<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>reference counting on glee</title><link>https://kiblitz.github.io/tags/reference-counting/</link><description>Recent content in reference counting on glee</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 17 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kiblitz.github.io/tags/reference-counting/index.xml" rel="self" type="application/rss+xml"/><item><title>Garbage Collection</title><link>https://kiblitz.github.io/p/garbage-collection/</link><pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/garbage-collection/</guid><description>&lt;img src="https://kiblitz.github.io/p/garbage-collection/garbage.jpg" alt="Featured image of post Garbage Collection" />&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Oftentimes, your program will need to allocate memory on the heap. Unlike the stack where deallocations occur upon scope exiting, something needs to explicitly free memory from the heap.&lt;/p>
&lt;p>In some languages like $\texttt{C}$, it is the programmer&amp;rsquo;s responsibility to call $\texttt{free}$ when it is no longer needed. Manual memory leak debugging and tests were required (i.e. &lt;a class="link" href="https://en.wikipedia.org/wiki/Valgrind" target="_blank" rel="noopener"
>valgrind&lt;/a>).&lt;/p>
&lt;p>A lot of higher-level programming languages have a &amp;ldquo;garbage collector&amp;rdquo; (gc). Aptly named, they execute independently of the main program and free memory that is no longer being used (garbage).&lt;/p>
&lt;h2 id="techniques">Techniques&lt;/h2>
&lt;p>Garbage collection is a difficult task. There is a juggling tradeoff between the completeness of the gc (what leaks can we allow) versus the resource complexity of the gc (time, space, processing).&lt;/p>
&lt;h3 id="reference-counting">Reference Counting&lt;/h3>
&lt;p>For every allocated piece of memory, store a referencing counter representing the number of pointers that point to it. If it ever reaches $0$, free the memory chunk.&lt;/p>
&lt;h4 id="algorithm">Algorithm&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{on new $M$:}\newline
&amp;amp;\texttt{\qquad $M$.ref\_count = 1}\newline
&amp;amp;\newline
&amp;amp;\texttt{on $x$ = $M$:}\newline
&amp;amp;\texttt{\qquad $M$.ref\_count++}\newline
&amp;amp;\newline
&amp;amp;\texttt{on ($x$ = $M$) out of scope:}\newline
&amp;amp;\texttt{\qquad $M$.ref\_count--}\newline
&amp;amp;\texttt{\qquad if $M$.ref\_count = 0}\newline
&amp;amp;\texttt{\qquad \qquad free($M$)}\newline
&amp;amp;\texttt{\qquad \qquad recurse out-of-scope check on $M$ fields}
\end{align*}
$$&lt;/p>
&lt;h4 id="pros">Pros&lt;/h4>
&lt;ul>
&lt;li>Very simple to implement&lt;/li>
&lt;li>No background thread running in background (all operations are triggered)&lt;/li>
&lt;/ul>
&lt;h4 id="cons">Cons&lt;/h4>
&lt;ul>
&lt;li>Word overhead for storing $\texttt{ref\_count}$ per allocated memory block&lt;/li>
&lt;li>Chain overhead when freeing a linked data structure
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 336 25"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,0 L 40,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,0 L 104,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,0 L 168,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 L 232,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,0 L 296,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='48.000000,0.000000 36.000000,-5.600000 36.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 40.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='112.000000,0.000000 100.000000,-5.600000 100.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 104.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='176.000000,0.000000 164.000000,-5.600000 164.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 168.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='240.000000,0.000000 228.000000,-5.600000 228.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 232.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='304.000000,0.000000 292.000000,-5.600000 292.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 296.000000, 0.000000)'>&lt;/polygon>
&lt;text text-anchor='middle' x='0' y='4' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='64' y='4' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='128' y='4' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='192' y='4' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='256' y='4' fill='currentColor' style='font-size:1em'>E&lt;/text>
&lt;text text-anchor='middle' x='320' y='4' fill='currentColor' style='font-size:1em'>F&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>Imagine $\texttt{A}$ is freed. Then, $\texttt{B}$ is freed. Then, $\texttt{C}$ is freed. And so on. So there is a potential high overhead when freeing linked data structures (program pause).&lt;/p>&lt;/p>
&lt;/div>
&lt;/li>
&lt;li>&lt;strong>Cycles leak memory&lt;/strong>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 336 89"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,0 L 40,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,64 L 48,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,32 L 0,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,16 L 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='8.000000,32.000000 -4.000000,26.400000 -4.000000,37.599998' fill='currentColor' transform='rotate(270.000000, 0.000000, 32.000000)'>&lt;/polygon>
&lt;polygon points='32.000000,64.000000 20.000000,58.400002 20.000000,69.599998' fill='currentColor' transform='rotate(180.000000, 24.000000, 64.000000)'>&lt;/polygon>
&lt;polygon points='48.000000,0.000000 36.000000,-5.600000 36.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 40.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='72.000000,32.000000 60.000000,26.400000 60.000000,37.599998' fill='currentColor' transform='rotate(90.000000, 64.000000, 32.000000)'>&lt;/polygon>
&lt;text text-anchor='middle' x='0' y='4' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='0' y='68' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='64' y='4' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='64' y='68' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>These nodes point to each other. So, their $\texttt{ref\_count}$ will never be $0$ even if nothing else in the program points to them (should be garbage).&lt;/p>&lt;/p>
&lt;/div>
&lt;div class="box box-shortcode tip" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#tip-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/Python_%28programming_language%29" target="_blank" rel="noopener"
>Python&lt;/a> uses reference counting for its gc. Watch it leak by making a large number of cycle structures.&lt;/p>
&lt;/div>
&lt;/li>
&lt;/ul>
&lt;h3 id="mark-sweep">Mark Sweep&lt;/h3>
&lt;p>For every allocated block of memory, store a mark bit (initialized to $0$). Every now and then, mark all memory that have pointers to them within the current program scope. Free all allocated memory that has not been marked (cannot be accessed $\implies$ garbage). Unmark all marks.&lt;/p>
&lt;h4 id="algorithm-1">Algorithm&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let markRecurse(ptr $p$):}\newline
&amp;amp;\texttt{\qquad if $p$ is marked then return}\newline
&amp;amp;\texttt{\qquad mark $p$}\newline
&amp;amp;\texttt{\qquad for all pointers $f$ that are fields of $p$:}\newline
&amp;amp;\texttt{\qquad \qquad markRecurse($f$)}\newline
&amp;amp;\newline
&amp;amp;\texttt{on gc trigger:}\newline
&amp;amp;\texttt{\qquad pause program}\newline
&amp;amp;\newline
&amp;amp;\texttt{\qquad // mark phase}\newline
&amp;amp;\texttt{\qquad for all pointers $p$ in scope:}\newline
&amp;amp;\texttt{\qquad \qquad markRecurse($p$)}\newline
&amp;amp;\newline
&amp;amp;\texttt{\qquad // sweep phase}\newline
&amp;amp;\texttt{\qquad for all allocated memory blocks $b$:}\newline
&amp;amp;\texttt{\qquad \qquad if $b$ is marked then free($b$)}\newline
&amp;amp;\texttt{\qquad \qquad unmark $b$}\newline
&amp;amp;\newline
&amp;amp;\texttt{\qquad resume program}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The gc trigger is heuristical. It could be based on time intervals, memory utilization, processor utilization, etc.&lt;/p>
&lt;/div>
&lt;h4 id="pros-1">Pros&lt;/h4>
&lt;ul>
&lt;li>The gc will collect all garbage&lt;/li>
&lt;/ul>
&lt;h4 id="cons-1">Cons&lt;/h4>
&lt;ul>
&lt;li>Long pauses when gc is running&lt;/li>
&lt;/ul>
&lt;h3 id="copy-collection">Copy Collection&lt;/h3>
&lt;p>Divide the heap into two equal sections: &lt;em>from&lt;/em> and &lt;em>to&lt;/em>. For every allocated block of memory, store a &amp;ldquo;forwarding address&amp;rdquo; (initialized to $0$). All newly allocated blocks are placed in the &lt;em>from&lt;/em> space. Once full, the gc is triggered. It moves all non-garbage blocks to the &lt;em>to&lt;/em> space and frees the &lt;em>from&lt;/em> space. Then, it swaps the &lt;em>from&lt;/em> and &lt;em>to&lt;/em> space labels.&lt;/p>
&lt;h4 id="algorithm-2">Algorithm&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let copyRecurse(ptr $p$):}\newline
&amp;amp;\texttt{\qquad if $p$ has no forwarding address:}\newline
&amp;amp;\texttt{\qquad \qquad let $m$ = next available block in $to$ space}\newline
&amp;amp;\texttt{\qquad \qquad copy non-ptr fields of $p$ into $m$}\newline
&amp;amp;\texttt{\qquad \qquad $p$ forwarding address = $m$ (in $from$ space)}\newline
&amp;amp;\texttt{\qquad \qquad for all ptr fields $f$ of $p$:}\newline
&amp;amp;\texttt{\qquad \qquad \qquad $f$ forwarding address = copyRecurse($f$)}\newline
&amp;amp;\texttt{\qquad return $p$ forwarding address}\newline
&amp;amp;\newline
&amp;amp;\texttt{on gc trigger:}\newline
&amp;amp;\texttt{\qquad pause program}\newline
&amp;amp;\newline
&amp;amp;\texttt{\qquad for all pointers $p$ in scope:}\newline
&amp;amp;\texttt{\qquad \qquad copyRecurse($p$)}\newline
&amp;amp;\texttt{\qquad free($from$ space)}\newline
&amp;amp;\newline
&amp;amp;\texttt{\qquad swap $to$ and $from$ labels}\newline
&amp;amp;\newline
&amp;amp;\texttt{\qquad resume program}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The &amp;ldquo;forwarding address&amp;rdquo; is for the gc to move cyclical data structures to the &lt;em>to&lt;/em> space.&lt;/p>
&lt;p>Without it, recursing on pointers to blocks already in the &lt;em>to&lt;/em> space will move the same block again (essentially duplicating it infinitely in the &lt;em>to&lt;/em> space).&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 328 377"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,0 L 72,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,0 L 144,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,0 L 240,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 L 312,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 L 32,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,48 L 200,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,112 L 32,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,112 L 200,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,128 L 72,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,128 L 144,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,128 L 240,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,128 L 312,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,160 L 72,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,160 L 144,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,160 L 240,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,160 L 312,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,208 L 32,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,208 L 200,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,272 L 32,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,272 L 200,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,288 L 72,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,288 L 144,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,352 L 240,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,352 L 312,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,0 L 0,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,160 L 0,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 L 16,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,208 L 16,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,64 L 48,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,224 L 48,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,0 L 72,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,160 L 72,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,224 L 104,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,0 L 144,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,160 L 144,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,0 L 168,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,160 L 168,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,48 L 184,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,208 L 184,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,64 L 216,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,224 L 216,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 L 240,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,160 L 240,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,224 L 272,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,288 L 272,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 312,0 L 312,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 312,160 L 312,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='40.000000,48.000000 28.000000,42.400002 28.000000,53.599998' fill='currentColor' transform='rotate(0.000000, 32.000000, 48.000000)'>&lt;/polygon>
&lt;polygon points='40.000000,208.000000 28.000000,202.399994 28.000000,213.600006' fill='currentColor' transform='rotate(0.000000, 32.000000, 208.000000)'>&lt;/polygon>
&lt;polygon points='56.000000,80.000000 44.000000,74.400002 44.000000,85.599998' fill='currentColor' transform='rotate(90.000000, 48.000000, 80.000000)'>&lt;/polygon>
&lt;polygon points='56.000000,240.000000 44.000000,234.399994 44.000000,245.600006' fill='currentColor' transform='rotate(90.000000, 48.000000, 240.000000)'>&lt;/polygon>
&lt;polygon points='112.000000,240.000000 100.000000,234.399994 100.000000,245.600006' fill='currentColor' transform='rotate(90.000000, 104.000000, 240.000000)'>&lt;/polygon>
&lt;polygon points='208.000000,48.000000 196.000000,42.400002 196.000000,53.599998' fill='currentColor' transform='rotate(0.000000, 200.000000, 48.000000)'>&lt;/polygon>
&lt;polygon points='208.000000,208.000000 196.000000,202.399994 196.000000,213.600006' fill='currentColor' transform='rotate(0.000000, 200.000000, 208.000000)'>&lt;/polygon>
&lt;polygon points='224.000000,80.000000 212.000000,74.400002 212.000000,85.599998' fill='currentColor' transform='rotate(90.000000, 216.000000, 80.000000)'>&lt;/polygon>
&lt;polygon points='224.000000,240.000000 212.000000,234.399994 212.000000,245.600006' fill='currentColor' transform='rotate(90.000000, 216.000000, 240.000000)'>&lt;/polygon>
&lt;polygon points='280.000000,240.000000 268.000000,234.399994 268.000000,245.600006' fill='currentColor' transform='rotate(90.000000, 272.000000, 240.000000)'>&lt;/polygon>
&lt;polygon points='280.000000,304.000000 268.000000,298.399994 268.000000,309.600006' fill='currentColor' transform='rotate(90.000000, 272.000000, 304.000000)'>&lt;/polygon>
&lt;text text-anchor='middle' x='24' y='20' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='24' y='180' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='32' y='20' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='32' y='180' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='40' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='40' y='180' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='48' y='20' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='48' y='52' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='48' y='116' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='48' y='180' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='48' y='212' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='48' y='276' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='96' y='20' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='96' y='180' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='104' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='104' y='180' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='104' y='212' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='104' y='276' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='192' y='180' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='200' y='20' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='200' y='180' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='208' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='208' y='180' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='216' y='20' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='216' y='52' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='216' y='116' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='216' y='180' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='216' y='212' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='216' y='276' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='264' y='20' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='264' y='180' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='272' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='272' y='52' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='272' y='180' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='272' y='212' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='272' y='276' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='272' y='340' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;/div>
&lt;h4 id="example">Example&lt;/h4>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 328 313"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,0 L 72,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,0 L 144,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,0 L 240,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 L 312,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 L 32,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,48 L 200,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,48 L 240,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,48 L 256,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,112 L 32,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,112 L 200,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,128 L 72,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,128 L 144,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,128 L 240,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,128 L 312,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,160 L 72,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,160 L 144,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,160 L 240,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,160 L 312,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,208 L 32,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,208 L 72,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,208 L 88,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,272 L 32,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,272 L 72,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,272 L 88,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,288 L 72,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,288 L 144,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,288 L 240,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,288 L 312,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,0 L 0,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,160 L 0,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 L 16,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,208 L 16,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,64 L 48,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,208 L 48,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,0 L 72,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,160 L 72,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,208 L 72,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,272 L 72,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,224 L 104,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,0 L 144,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,160 L 144,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,0 L 168,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,160 L 168,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,48 L 184,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,48 L 216,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 L 240,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,48 L 240,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,160 L 240,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,224 L 272,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 312,0 L 312,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 312,160 L 312,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='40.000000,48.000000 28.000000,42.400002 28.000000,53.599998' fill='currentColor' transform='rotate(0.000000, 32.000000, 48.000000)'>&lt;/polygon>
&lt;polygon points='40.000000,208.000000 28.000000,202.399994 28.000000,213.600006' fill='currentColor' transform='rotate(0.000000, 32.000000, 208.000000)'>&lt;/polygon>
&lt;polygon points='56.000000,80.000000 44.000000,74.400002 44.000000,85.599998' fill='currentColor' transform='rotate(90.000000, 48.000000, 80.000000)'>&lt;/polygon>
&lt;polygon points='56.000000,240.000000 44.000000,234.399994 44.000000,245.600006' fill='currentColor' transform='rotate(90.000000, 48.000000, 240.000000)'>&lt;/polygon>
&lt;polygon points='96.000000,208.000000 84.000000,202.399994 84.000000,213.600006' fill='currentColor' transform='rotate(0.000000, 88.000000, 208.000000)'>&lt;/polygon>
&lt;polygon points='96.000000,272.000000 84.000000,266.399994 84.000000,277.600006' fill='currentColor' transform='rotate(0.000000, 88.000000, 272.000000)'>&lt;/polygon>
&lt;polygon points='112.000000,240.000000 100.000000,234.399994 100.000000,245.600006' fill='currentColor' transform='rotate(90.000000, 104.000000, 240.000000)'>&lt;/polygon>
&lt;polygon points='208.000000,48.000000 196.000000,42.400002 196.000000,53.599998' fill='currentColor' transform='rotate(0.000000, 200.000000, 48.000000)'>&lt;/polygon>
&lt;polygon points='224.000000,80.000000 212.000000,74.400002 212.000000,85.599998' fill='currentColor' transform='rotate(90.000000, 216.000000, 80.000000)'>&lt;/polygon>
&lt;polygon points='264.000000,48.000000 252.000000,42.400002 252.000000,53.599998' fill='currentColor' transform='rotate(0.000000, 256.000000, 48.000000)'>&lt;/polygon>
&lt;polygon points='280.000000,240.000000 268.000000,234.399994 268.000000,245.600006' fill='currentColor' transform='rotate(90.000000, 272.000000, 240.000000)'>&lt;/polygon>
&lt;circle cx='48' cy='208' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='272' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='216' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='24' y='20' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='24' y='180' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='32' y='20' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='32' y='180' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='40' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='40' y='180' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='48' y='20' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='48' y='52' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='48' y='116' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='48' y='180' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='96' y='20' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='96' y='180' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='104' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='104' y='180' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='104' y='212' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='104' y='276' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='192' y='180' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='200' y='20' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='200' y='180' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='208' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='216' y='20' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='216' y='116' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='264' y='20' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='264' y='180' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='272' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='272' y='52' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='272' y='180' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='272' y='212' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='272' y='276' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='280' y='180' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='288' y='180' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;h4 id="pros-2">Pros&lt;/h4>
&lt;ul>
&lt;li>The gc will collect all garbage&lt;/li>
&lt;li>Efficient memory utilization (all allocations are contiguous: no fragmentation)&lt;/li>
&lt;li>Only $1$ iteration (as opposed to $2$ from mark/sweep)&lt;/li>
&lt;/ul>
&lt;h4 id="cons-2">Cons&lt;/h4>
&lt;ul>
&lt;li>Long pauses when gc is running&lt;/li>
&lt;li>Only half of the heap can be operated on at a time&lt;/li>
&lt;/ul>
&lt;h2 id="lifetime-optimization">Lifetime Optimization&lt;/h2>
&lt;p>A general analysis of programs yields the following result.&lt;/p>
&lt;ul>
&lt;li>Allocated memory blocks that live past a certain point tend to live a really long time&lt;/li>
&lt;li>Other blocks tend to be short lived&lt;/li>
&lt;/ul>
&lt;p>This sort of makes sense. These long lasting blocks are likely to be data structures that persist throughout the program. On the other hand, short lived blocks might be temporaries that we only need for a scope (i.e. within function).&lt;/p>
&lt;p>An optimization to employ is &lt;strong>generational collection&lt;/strong>. The heap is divided into two sections: &lt;em>nursery&lt;/em> and &lt;em>tenured&lt;/em>.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 432 169"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,0 L 208,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 L 416,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,144 L 208,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,144 L 416,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,0 L 0,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 L 208,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,0 L 416,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='80' y='68' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='88' y='68' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='88' y='84' fill='currentColor' style='font-size:1em'>[&lt;/text>
&lt;text text-anchor='middle' x='96' y='68' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='96' y='84' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='104' y='68' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='104' y='84' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='112' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='112' y='84' fill='currentColor' style='font-size:1em'>w&lt;/text>
&lt;text text-anchor='middle' x='120' y='68' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='120' y='84' fill='currentColor' style='font-size:1em'>]&lt;/text>
&lt;text text-anchor='middle' x='128' y='68' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;text text-anchor='middle' x='288' y='68' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='296' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='296' y='84' fill='currentColor' style='font-size:1em'>[&lt;/text>
&lt;text text-anchor='middle' x='304' y='68' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='304' y='84' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='312' y='68' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='312' y='84' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='320' y='68' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='320' y='84' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='328' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='328' y='84' fill='currentColor' style='font-size:1em'>]&lt;/text>
&lt;text text-anchor='middle' x='336' y='68' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>All newly allocated blocks are placed in the &lt;em>nursery&lt;/em>. When a &lt;em>nursery&lt;/em> gc triggers and cleans up the trash, all blocks that were not cleaned up are &amp;ldquo;promoted&amp;rdquo; to live in the &lt;em>tenured&lt;/em> space. There is also a &lt;em>tenured&lt;/em> gc, but that executes less frequently than the &lt;em>nursery&lt;/em> gc (since those blocks are less likely to be garbage).
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Observe that after a &lt;em>nursery&lt;/em> gc execution, the entire &lt;em>nursery&lt;/em> is freed. Much like in &lt;strong>copy collection&lt;/strong>, we can just reclaim the entire space at once rather than for each individual block.&lt;/p>
&lt;/div>
&lt;/p>
&lt;h2 id="type-unsafe-problem">Type Unsafe Problem&lt;/h2>
&lt;p>Lots of higher-level programming languages have type systems that keep code &amp;ldquo;safe&amp;rdquo;. In a lower-level language like $\texttt{C/C++}$, anything goes. Specifically, any piece of data could be casted to a pointer.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>For instance, $\texttt{int x = 5}$ could technically also be a pointer to the memory address $\texttt{0x5}$.&lt;/p>
&lt;/div>
&lt;p>An approach is to employ &lt;strong>conservative collection&lt;/strong>. Any &lt;em>data&lt;/em> in scope is conservatively considered to be a pointer. If there exists allocated memory at the address specified by that data, then consider it &amp;ldquo;not garbage&amp;rdquo; (don&amp;rsquo;t free it).&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>If we had $\texttt{int x = 5}$ and there was $\texttt{Object obj}$ allocated at address $\texttt{0x4}$ with size $\texttt{0x8}$, then consider $\texttt{obj}$ to be in use.&lt;/p>
&lt;p>The reason being is that we could technically use $\texttt{x}$ to access $\texttt{obj}$, so we can&amp;rsquo;t deem $\texttt{obj}$ as garbage yet.&lt;/p>
&lt;/div>
&lt;p>It&amp;rsquo;s a conservative approach because the gc might falsely mark a piece of memory as still in use, thus leaking it.&lt;/p></description></item></channel></rss>