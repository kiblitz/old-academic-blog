<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>splay tree on glee</title><link>https://kiblitz.github.io/tags/splay-tree/</link><description>Recent content in splay tree on glee</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 20 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kiblitz.github.io/tags/splay-tree/index.xml" rel="self" type="application/rss+xml"/><item><title>IV. Splay Trees</title><link>https://kiblitz.github.io/p/451-splay-trees/</link><pubDate>Tue, 20 Jun 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/451-splay-trees/</guid><description>&lt;img src="https://kiblitz.github.io/p/451-splay-trees/waterfall_forest.jpg" alt="Featured image of post IV. Splay Trees" />&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;h3 id="motivation">Motivation&lt;/h3>
&lt;p>Suppose you want to keep an ordered mapping of keys to values. If the contents are dynamic, a self-balancing tree (i.e. AVL, red-black, etc.) is desirable to allow for logarithmic modification and access operations.&lt;/p>
&lt;p>What if repeated access are expected? Specifically, if a value is queried several times and is located at a leaf, then each operation has $\mathcal{O}(\log n)$ time complexity. But we already know the value after the first query. We should be caching accesses.&lt;/p>
&lt;h3 id="splay-tree">Splay Tree&lt;/h3>
&lt;p>The splay tree is a self-balancing binary tree with the property that accesses are cached through its internal structure.&lt;/p>
&lt;p>Operations on a splay tree are approximately the same as those of other self-balancing trees: $\mathcal{O}(\log n)$ amortized.&lt;/p>
&lt;p>At a high level, any operation on a node $N$ restructures the tree so that $N$ becomes the new root. Thus, repeated queries have $\mathcal{O}(1)$ time complexity.&lt;/p>
&lt;h2 id="definition">Definition&lt;/h2>
&lt;h3 id="rotations">Rotations&lt;/h3>
&lt;p>There are three splay steps for moving $N$ to the root (in these cases, $x$ upwards). Each is constructed using rotations. Each of these three have a mirror version. &lt;strong>Zig&lt;/strong> is specifically for when $x$ is the child of the root node.&lt;/p>
&lt;h4 id="zig">Zig&lt;/h4>
&lt;p>When $y$ is the root.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 89"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 8,48 L 24,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,16 L 112,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='8' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='24' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='96' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='112' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='0' y='68' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;text text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='64' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='88' y='4' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='120' y='68' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;h4 id="zig-zag">Zig-zag&lt;/h4>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 121"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,48 L 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,80 L 120,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,48 L 136,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,64 L 240,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 L 32,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,32 L 256,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='104' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='120' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='136' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='224' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='240' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='256' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='0' y='52' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;text text-anchor='middle' x='40' y='4' fill='currentColor' style='font-size:1em'>z&lt;/text>
&lt;text text-anchor='middle' x='40' y='100' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='56' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='64' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='72' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='80' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='96' y='100' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;text text-anchor='middle' x='136' y='52' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='144' y='4' fill='currentColor' style='font-size:1em'>z&lt;/text>
&lt;text text-anchor='middle' x='168' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='176' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='184' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='192' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='216' y='84' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;text text-anchor='middle' x='240' y='20' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='264' y='84' fill='currentColor' style='font-size:1em'>z&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;h4 id="zig-zig">Zig-zig&lt;/h4>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 121"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 8,80 L 24,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,48 L 40,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,64 L 136,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,32 L 152,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,16 L 248,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 248,48 L 264,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='8' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='24' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='40' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='120' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='136' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='152' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='232' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='248' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='264' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='0' y='100' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='8' y='52' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;text text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'>z&lt;/text>
&lt;text text-anchor='middle' x='64' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='72' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='80' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='88' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='112' y='84' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='136' y='20' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;text text-anchor='middle' x='160' y='84' fill='currentColor' style='font-size:1em'>z&lt;/text>
&lt;text text-anchor='middle' x='184' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='192' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='200' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='208' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='224' y='4' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='264' y='52' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;text text-anchor='middle' x='272' y='100' fill='currentColor' style='font-size:1em'>z&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 392 25"
>
&lt;g transform='translate(8,16)'>
&lt;text text-anchor='middle' x='8' y='4' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='16' y='4' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='24' y='4' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>The arrows above signify &lt;em>&lt;strong>rotations&lt;/strong>&lt;/em>.&lt;/p>
&lt;hr>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 25"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,0 L 32,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='40.000000,0.000000 28.000000,-5.600000 28.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 32.000000, 0.000000)'>&lt;/polygon>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>The arrows below signify &lt;em>&lt;strong>splay steps&lt;/strong>&lt;/em>.&lt;/p>
&lt;hr>
&lt;p>Rotations make up splay steps, but for analysis purposes we only care about splay steps.&lt;/p>&lt;/p>
&lt;/div>
&lt;h3 id="access">Access&lt;/h3>
&lt;p>Whenever we want to access (i.e. find the mapped value of) $N$, we traverse to $N$ and then splay it to the root.&lt;/p>
&lt;h3 id="examples">Examples&lt;/h3>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 217"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,192 L 32,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,160 L 48,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,128 L 64,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,96 L 80,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,64 L 96,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,32 L 112,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='192' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='160' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='64' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='80' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='96' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='112' cy='0' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='0' y='196' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='16' y='164' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='32' y='132' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='48' y='100' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='64' y='68' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='80' y='36' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='96' y='4' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>$\texttt{splay}(0)$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 217"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,96 L 32,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,96 L 152,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,96 L 264,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,128 L 88,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,96 L 104,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,64 L 120,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,32 L 136,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,80 L 208,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,48 L 224,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,144 L 208,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,128 L 320,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,96 L 336,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,128 L 88,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,160 L 104,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,144 L 208,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,80 L 208,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,112 L 224,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,128 L 320,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,96 L 336,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,32 L 336,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,64 L 352,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='40.000000,96.000000 28.000000,90.400002 28.000000,101.599998' fill='currentColor' transform='rotate(0.000000, 32.000000, 96.000000)'>&lt;/polygon>
&lt;polygon points='160.000000,96.000000 148.000000,90.400002 148.000000,101.599998' fill='currentColor' transform='rotate(0.000000, 152.000000, 96.000000)'>&lt;/polygon>
&lt;polygon points='272.000000,96.000000 260.000000,90.400002 260.000000,101.599998' fill='currentColor' transform='rotate(0.000000, 264.000000, 96.000000)'>&lt;/polygon>
&lt;circle cx='72' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='88' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='88' cy='160' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='104' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='104' cy='192' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='120' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='136' cy='0' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='192' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='192' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='208' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='208' cy='112' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='208' cy='176' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='224' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='224' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='304' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='320' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='320' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='320' cy='160' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='336' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='336' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='352' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='56' y='132' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='72' y='100' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='72' y='164' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='88' y='68' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='88' y='196' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='104' y='36' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='120' y='4' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='176' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='176' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='192' y='52' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='192' y='116' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='208' y='20' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='224' y='180' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='240' y='148' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='288' y='132' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='304' y='36' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='304' y='100' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='320' y='68' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='336' y='164' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='352' y='132' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='368' y='100' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>$\texttt{splay}(3)$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 169"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,80 L 32,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,80 L 128,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,112 L 168,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,80 L 104,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,112 L 120,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,0 L 168,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,80 L 184,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='40.000000,80.000000 28.000000,74.400002 28.000000,85.599998' fill='currentColor' transform='rotate(0.000000, 32.000000, 80.000000)'>&lt;/polygon>
&lt;circle cx='88' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='104' cy='112' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='120' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='128' cy='0' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='152' cy='112' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='168' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='184' cy='112' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='72' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='88' y='116' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='104' y='148' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='112' y='4' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='136' y='116' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='152' y='84' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='200' y='116' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;h2 id="analysis">Analysis&lt;/h2>
&lt;h3 id="setup">Setup&lt;/h3>
&lt;h4 id="weights">Weights&lt;/h4>
&lt;p>Purely for the purposes of analysis, assign each node $x$ with weight $w(x)&amp;gt;0$.&lt;/p>
&lt;h4 id="sizes">Sizes&lt;/h4>
&lt;p>Let $T(x)$ denote the subtree rooted at node $x$.
$$s(x)=\sum_{y\in T(x)} w(y)$$&lt;/p>
&lt;h4 id="rank">Rank&lt;/h4>
&lt;p>$$r(x)=\lfloor\log_2(s(x))\rfloor$$
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Observe that in a rotation between nodes $x,y$, the sizes (and thus ranks) of &lt;em>&lt;strong>only&lt;/strong>&lt;/em> $x,y$ change. Thus, splay steps only alter the ranks of the nodes they involve.&lt;/p>
&lt;/div>
&lt;/p>
&lt;h4 id="potential">Potential&lt;/h4>
&lt;p>Let $T$ denote the entire tree state.
$$\Phi(T)=\sum_{x\in T}r(x)$$&lt;/p>
&lt;h4 id="example">Example&lt;/h4>
&lt;p>Let $w(\cdot)=1$. Sizes $s(x)$ on left and ranks $r(x)$ on right.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 185"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 40,128 L 56,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 56,96 L 72,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,64 L 88,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,32 L 104,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,128 L 88,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 264,128 L 280,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,96 L 296,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 296,64 L 312,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 312,32 L 328,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 296,128 L 312,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,128 L 88,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,64 L 88,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,32 L 104,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 296,128 L 312,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 296,64 L 312,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 312,32 L 328,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='40' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='56' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='72' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='72' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='88' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='88' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='88' cy='160' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='104' cy='0' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='104' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='264' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='280' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='296' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='296' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='312' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='312' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='312' cy='160' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='328' cy='0' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='328' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='24' y='132' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='40' y='100' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='56' y='68' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='88' y='4' fill='currentColor' style='font-size:1em'>9&lt;/text>
&lt;text text-anchor='middle' x='88' y='132' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='104' y='100' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='104' y='164' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='120' y='68' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='248' y='132' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='264' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='280' y='68' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='296' y='36' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='312' y='4' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='312' y='132' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='328' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='328' y='164' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='344' y='68' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>$$\Phi(T)=11$$
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Observe that when $w(\cdot)=1$, $\Phi(T)=\mathcal{O}(n)$ when $T$ is balanced, and $\Phi(T)=\mathcal{O}(n\log n)$ when $T$ is most unbalanced (long chain)&lt;/p>
&lt;/div>
&lt;/p>
&lt;h3 id="access-lemma">Access Lemma&lt;/h3>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Lemma&lt;/strong>&lt;/dt>
&lt;dd>The amortized time cost for splaying node $x$ on tree $T$ with root $t$ is at most the following (regardless of $w$):&lt;/dd>
&lt;dd>$$3(r(t)-r(x))+1$$&lt;/dd>
&lt;/dl>
&lt;p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Recall:
$$ac_i = c_i + \Phi(S_i)-\Phi(S_{i-1})$$&lt;/p>
&lt;/div>
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>This is a very tedious and dense proof. You&amp;rsquo;ll be fine if you take my word for it that the lemma is true.&lt;/p>
&lt;/div>
&lt;/p>
&lt;dl>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>Observe that if two siblings have the same rank $r$, then their sizes are at least $2^r$. Thus, their parent has size at least $2\cdot 2^r=2^{r+1}$. Thus, the parent node has rank at least $r+1$.&lt;/dd>
&lt;dd>
&lt;p>Conversely, observe that if a node $x$ and its parent have the same rank $r$, then the sibling of $x$ must have rank less than $r$.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>Call this observation the &lt;strong>Rank Rule&lt;/strong>.&lt;/p>
&lt;/dd>
&lt;dd>&lt;hr>
&lt;/dd>
&lt;dd>Call $T_i$ the tree state after splay step $i$, where $T_0=T$. Let $r_i(n)$ be the rank of node $n$ in $T_i$.&lt;/dd>
&lt;dd>
&lt;p>We define $ac_i&amp;rsquo;=c_i&amp;rsquo;+\Phi(T_i)-\Phi(T_{i-1})$, $c_i&amp;rsquo;$ is the cost of the $i$th splay step and $ac_i&amp;rsquo;$ is the amortized cost of the $i$th splay step. Observe that a splay with $k$ splay steps is consistent with global $ac$:
$$\begin{align*}ac&amp;amp;=\sum_iac_i&amp;rsquo;\newline&amp;amp;=\sum_ic_i&amp;rsquo;+(\Phi(T_k)-\Phi(T_{k-1}))+&amp;hellip;+(\Phi(T_1)-\Phi(T))\newline&amp;amp;=c+\Phi(T_k)-\Phi(T)\end{align*}$$&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>For readibility purposes, if $i$ is fixed at a proof step, we will refer to $i$ as $\text{curr}$ and $i-1$ as $\text{prev}$.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>We will show that if splay step $i$ is a zig step moving node $a$ upwards to $b$: $$ac_\text{curr}&amp;rsquo;\leq 3(r_\text{prev}(b)-r_\text{prev}(a))+1$$ We will also show that if splay step $i$ is either a zig-zag or zig-zig step: $$ac_\text{curr}&amp;rsquo;\leq 3(r_\text{prev}(b)-r_\text{prev}(a))$$&lt;/p>
&lt;/dd>
&lt;dd>Since the zig step can occur at most once, we would be able to prove the problem statement.&lt;/dd>
&lt;dd>$$ac=\sum_iac_i&amp;rsquo;\leq 1 + \underbrace{3(r(t) -r(x))}_{\text{telescopes}}$$&lt;/dd>
&lt;dd>
&lt;p>&lt;strong>Zig&lt;/strong>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 89"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 8,48 L 24,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,16 L 112,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='8' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='24' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='96' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='112' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='0' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='64' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='88' y='4' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='120' y='68' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>&lt;/p>
&lt;/div>
&lt;/p>
&lt;/dd>
&lt;dd>This can only occur if $b$ is the root. Since the rank on the root is constant (sum of all weights is constant): $$r_\text{curr}(a)=r_\text{prev}(b)$$&lt;/dd>
&lt;dd>
&lt;p>Since the rank of a child is at most that of its parent: $$r_\text{curr}(b)\leq r_\text{curr}(a)=r_\text{prev}(b)$$&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>The root node still has rank $r_\text{prev}(b)$ (no change) and its child at most increases from $r_\text{prev}(a)$ to $r_\text{prev}(b)$.&lt;/p>
&lt;/dd>
&lt;dd>$$\Phi(T_\text{curr})-\Phi(T_\text{prev})\leq r_\text{prev}(b)-r_\text{prev}(a)$$&lt;/dd>
&lt;dd>$$ac \leq 1 + r_\text{prev}(b)-r_\text{prev}(a)\leq 3(r_\text{prev}(b)-r_\text{prev}(a))+1$$&lt;/dd>
&lt;dd>
&lt;p>&lt;strong>Zig-zag&lt;/strong>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 121"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,48 L 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,80 L 120,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,48 L 136,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,64 L 240,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 L 32,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,32 L 256,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='104' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='120' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='136' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='224' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='240' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='256' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='0' y='52' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='40' y='4' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='40' y='100' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='56' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='64' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='72' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='80' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='96' y='100' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='136' y='52' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='144' y='4' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='168' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='176' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='184' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='192' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='216' y='84' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='240' y='20' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='264' y='84' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>&lt;/p>
&lt;/div>
&lt;/p>
&lt;/dd>
&lt;dd>&lt;strong>Case $r_\text{prev}(a)=r_\text{prev}(b)$&lt;/strong>&lt;/dd>
&lt;dd>
&lt;p>Since the rank of a node is lower bounded by the rank of its child, $r_\text{prev}(c)=r_\text{prev}(a)=r_\text{prev}(b)$.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>Recall that since the sum of the weights of the subtree are the same, $r_\text{prev}(b)=r_\text{curr}(a)$. By the &lt;strong>Rank Rule&lt;/strong>: $$r_\text{curr}(c)&amp;lt;r_\text{curr}(a) \text{ OR } r_\text{curr}(b)&amp;lt;r_\text{curr}(a)$$ Since $r(\cdot)$ is integral, $$r_\text{curr}(c)\leq r_\text{curr}(a) - 1 \text{ OR } r_\text{curr}(b)\leq r_\text{curr}(a) - 1$$&lt;/p>
&lt;/dd>
&lt;dd>Thus,&lt;/dd>
&lt;dd>$$\begin{align*}\Phi(T_\text{curr})-\Phi(T_\text{prev})&amp;amp;= (r_\text{curr}(a) + r_\text{curr}(b) + r_\text{curr}(c))-(r_\text{prev}(a) + r_\text{prev}(b) + r_\text{prev}(c))\newline &amp;amp;\leq r_\text{curr}(a) + (r_\text{curr}(a) + r_\text{curr}(a) - 1)-(r_\text{curr}(a) + r_\text{curr}(a) + r_\text{curr}(a))\newline &amp;amp;= -1\end{align*}$$&lt;/dd>
&lt;dd>$$ac \leq 1 - 1 =0 \leq 3(r_\text{prev}(b)-r_\text{prev}(a))$$&lt;/dd>
&lt;dd>&lt;hr>
&lt;/dd>
&lt;dd>&lt;strong>Case $r_\text{prev}(a)&amp;lt;r_\text{prev}(b)$&lt;/strong>&lt;/dd>
&lt;dd>
&lt;p>Since $r(\cdot)$ is integral and $r_\text{prev}(a)&amp;lt;r_\text{prev}(b)$,&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>$$r_\text{prev}(a)+1\leq r_\text{prev}(b)$$&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>As before, $r_\text{prev}(b)=r_\text{curr}(a)$, and all node ranks are upper bounded by those of their parents.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>$$\begin{align*}\Phi(T_\text{curr})-\Phi(T_\text{prev})&amp;amp;= (r_\text{curr}(a) + r_\text{curr}(b) + r_\text{curr}(c))-(r_\text{prev}(a) + r_\text{prev}(b) + r_\text{prev}(c))\newline &amp;amp;\leq r_\text{prev}(b) + r_\text{prev}(b) + r_\text{prev}(b)-(r_\text{prev}(a) + (r_\text{prev}(a)+1) + r_\text{prev}(a))\newline &amp;amp;= 3(r_\text{prev}(b)-r_\text{prev}(a))-1\end{align*}$$&lt;/p>
&lt;/dd>
&lt;dd>$$ac \leq 1 + 3(r_\text{prev}(b)-r_\text{prev}(a))- 1 = 3(r_\text{prev}(b)-r_\text{prev}(a))$$&lt;/dd>
&lt;dd>&lt;strong>Zig-zig&lt;/strong>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 121"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 8,80 L 24,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,48 L 40,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,64 L 136,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,32 L 152,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,16 L 248,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 248,48 L 264,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='8' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='24' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='40' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='120' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='136' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='152' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='232' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='248' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='264' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='0' y='100' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='8' y='52' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='64' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='72' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='80' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='88' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='112' y='84' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='136' y='20' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='160' y='84' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='184' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='192' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='200' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='208' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='224' y='4' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='264' y='52' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='272' y='100' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>&lt;/p>
&lt;/div>
&lt;/dd>
&lt;dd>&lt;strong>Case $r_\text{prev}(a)=r_\text{prev}(b)$&lt;/strong>&lt;/dd>
&lt;dd>
&lt;p>Since the rank of a node is lower bounded by the rank of its child, $r_\text{prev}(c)=r_\text{prev}(a)=r_\text{prev}(b)$.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>As before, $r_\text{prev}(b)=r_\text{curr}(a)$, and all node ranks are upper bounded by those of their parents.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>Let $r_\text{inter}(\cdot)$ indicate node ranks in the intermediate rotation (rooted at $c$). Observe that $r_\text{prev}(a)=r_\text{inter}(a)$ and $r_\text{inter}(b)=r_\text{curr}(b)$ since their children remain the same. By the &lt;strong>Rank Rule&lt;/strong>, $r_\text{inter}(b) &amp;lt; r_\text{inter}(c)=r_\text{inter}(a)$. Because $r(\cdot)$ is integral, $$r_\text{curr}(b)\leq r_\text{curr}(a)-1$$&lt;/p>
&lt;/dd>
&lt;dd>Thus,&lt;/dd>
&lt;dd>
&lt;p>$$\begin{align*}\Phi(T_\text{curr})-\Phi(T_\text{prev})&amp;amp;= (r_\text{curr}(a) + r_\text{curr}(b) + r_\text{curr}(c))-(r_\text{prev}(a) + r_\text{prev}(b) + r_\text{prev}(c))\newline &amp;amp;\leq r_\text{curr}(a) + (r_\text{curr}(a)-1) + r_\text{curr}(a) - (r_\text{curr}(a) + r_\text{curr}(a) + r_\text{curr}(a))\newline &amp;amp;= -1\end{align*}$$&lt;/p>
&lt;/dd>
&lt;dd>$$ac \leq 1 - 1 =0 \leq 3(r_\text{prev}(b)-r_\text{prev}(a))$$&lt;/dd>
&lt;dd>&lt;hr>
&lt;/dd>
&lt;dd>&lt;strong>Case $r_\text{prev}(a)&amp;lt;r_\text{prev}(b)$&lt;/strong>&lt;/dd>
&lt;dd>
&lt;p>Since $r(\cdot)$ is integral and $r_\text{prev}(a)&amp;lt;r_\text{prev}(b)$,&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>$$r_\text{prev}(a)+1\leq r_\text{prev}(b)$$&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>As before, $r_\text{prev}(b)=r_\text{curr}(a)$, and all node ranks are upper bounded by those of their parents.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>$$\begin{align*}\Phi(T_\text{curr})-\Phi(T_\text{prev})&amp;amp;= (r_\text{curr}(a) + r_\text{curr}(b) + r_\text{curr}(c))-(r_\text{prev}(a) + r_\text{prev}(b) + r_\text{prev}(c))\newline &amp;amp;\leq r_\text{prev}(b) + r_\text{prev}(b) + r_\text{prev}(b)-(r_\text{prev}(a) + (r_\text{prev}(a)+1) + r_\text{prev}(a))\newline &amp;amp;= 3(r_\text{prev}(b)-r_\text{prev}(a))-1\end{align*}$$&lt;/p>
&lt;/dd>
&lt;dd>$$ac \leq 1 + 3(r_\text{prev}(b)-r_\text{prev}(a))- 1 = 3(r_\text{prev}(b)-r_\text{prev}(a))$$&lt;/dd>
&lt;/dl>
&lt;/blockquote>
&lt;h3 id="balance-theorem">Balance Theorem&lt;/h3>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Theorem&lt;/strong>&lt;/dt>
&lt;dd>A sequence of $k$ splays in a tree of $n$ nodes has time complexity $$\mathcal{O}(k\log n + n\log n)$$&lt;/dd>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>Set $w(\cdot)=1$. By the &lt;strong>Access Lemma&lt;/strong>,&lt;/dd>
&lt;dd>$$\begin{align*}ac_i &amp;amp;= c_i + \Phi(T_i)-\Phi(T_{i-1}) \newline&amp;amp;\leq 3(r(t)-r(x) + 1\newline&amp;amp;\leq 3(\log_2(n)-0)+1\newline&amp;amp;\leq 3\log_2(n)+1\end{align*}$$&lt;/dd>
&lt;dd>Thus,&lt;/dd>
&lt;dd>$$\sum_i ac_i = \sum_i c_i + \Phi(T_m)-\Phi(T_{0}) \leq k (3\log_2 n + 1)$$&lt;/dd>
&lt;dd>Since $\log(\cdot)&amp;gt;0$ and $r(t)\leq\log_2 n$, $$0\leq \Phi(T)\leq n\log_2 n$$&lt;/dd>
&lt;dd>Thus,&lt;/dd>
&lt;dd>$$\begin{align*}\sum_i c_i -n \log_2 n &amp;amp;\leq k (3\log_2 n + 1)\newline\sum_i c_i &amp;amp;\leq n \log_2 n + k (3\log_2 n + 1)\newline&amp;amp;\in\mathcal{O}(k\log n + n\log n)\end{align*}$$&lt;/dd>
&lt;/dl>
&lt;/blockquote>
&lt;h2 id="operations">Operations&lt;/h2>
&lt;h3 id="access-1">Access&lt;/h3>
&lt;p>As we mentioned before, access searches for a node $x$ then splays it if found. Since binary search has time complexity $\mathcal{O}(\log n)$, the work is dominated by the splaying.&lt;/p>
&lt;h3 id="insert">Insert&lt;/h3>
&lt;p>First, traverse $T$ as if to search for the node $x$. Once we reach a node $n$ and cannot traverse further (i.e. $\texttt{insert}(3)$ but the $2$ node has no right child), splay $n$.&lt;/p>
&lt;p>Now, we can insert $x$ appropriately into $T$.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 121"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,64 L 32,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,80 L 160,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,48 L 176,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 296,48 L 312,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,32 L 48,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,16 L 192,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 312,16 L 328,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,48 L 344,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='144' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='160' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='176' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='192' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='296' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='312' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='328' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='344' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='8' y='84' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='32' y='20' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='56' y='84' fill='currentColor' style='font-size:1em'>R&lt;/text>
&lt;text text-anchor='middle' x='80' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='88' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='96' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='104' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='136' y='100' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='144' y='52' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='176' y='4' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='200' y='68' fill='currentColor' style='font-size:1em'>R&lt;/text>
&lt;text text-anchor='middle' x='240' y='52' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='248' y='52' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='288' y='68' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='312' y='4' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='344' y='52' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='352' y='100' fill='currentColor' style='font-size:1em'>R&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>Again, the search and insertion ($\mathcal{O}(1)$) is dominated by the splaying.&lt;/p>
&lt;h3 id="delete">Delete&lt;/h3>
&lt;p>First, splay the node we want to delete $x$. Now consider its children subtrees $L,R$. After removing $x$, splay the right-most node in $L$. Clearly, this new $L&amp;rsquo;$ has no right child. Set $R$ to be its new right child.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 89"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,48 L 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,48 L 144,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,48 L 176,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 264,64 L 272,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,48 L 288,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 L 48,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,32 L 152,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,32 L 184,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,48 L 280,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,16 L 304,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='144' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='176' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='272' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='288' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='304' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='8' y='68' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='56' y='68' fill='currentColor' style='font-size:1em'>R&lt;/text>
&lt;text text-anchor='middle' x='80' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='88' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='96' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='104' y='36' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='144' y='20' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='176' y='20' fill='currentColor' style='font-size:1em'>R&lt;/text>
&lt;text text-anchor='middle' x='216' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='224' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='232' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='240' y='36' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='288' y='4' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='296' y='4' fill='currentColor' style='font-size:1em'>'&lt;/text>
&lt;text text-anchor='middle' x='312' y='68' fill='currentColor' style='font-size:1em'>R&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>As before, the search is dominated by the two splaying operations.&lt;/p>
&lt;h2 id="above-and-beyond">Above and Beyond&lt;/h2>
&lt;h3 id="static-optimality">Static Optimality&lt;/h3>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Theorem&lt;/strong>&lt;/dt>
&lt;dd>Let T be any static search tree with $n$ nodes. Let $t$ be the cost of searching for all nodes in a sequence of $s$ accesses (sum of depths of all nodes). The cost of splaying that sequence of requests, starting with any initial splay tree is $\mathcal{O}(n^2+t)$.&lt;/dd>
&lt;/dl>
&lt;/blockquote>
&lt;p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Can be proved with $w(x)=\text{number of times $x$ is accessed)}$&lt;/p>
&lt;/div>
For a static tree $T$, $n$ is constant. This is powerful since essentially, splay trees perform only a constant sum ($n^2$) of work worse than the most optimal tree for $s$.&lt;/p>
&lt;h3 id="sequential-access">Sequential Access&lt;/h3>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Theorem&lt;/strong>&lt;/dt>
&lt;dd>The cost of accessing each of the $n$ nodes in a tree in in-order order is $\mathcal{O}(n)$&lt;/dd>
&lt;/dl>
&lt;/blockquote></description></item></channel></rss>