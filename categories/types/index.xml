<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>types on glee</title><link>https://kiblitz.github.io/categories/types/</link><description>Recent content in types on glee</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 16 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kiblitz.github.io/categories/types/index.xml" rel="self" type="application/rss+xml"/><item><title>Phantom Types</title><link>https://kiblitz.github.io/p/phantom-types/</link><pubDate>Sun, 16 Jul 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/phantom-types/</guid><description>&lt;img src="https://kiblitz.github.io/p/phantom-types/ghost.jpeg" alt="Featured image of post Phantom Types" />&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>As implied by the name, phantom types are defined by type parameters that are not actually used in implementation. Instead, they are used by the type system to restrict operations on that type. We can use them to improve program correctness (by the type checker).&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;h3 id="units">Units&lt;/h3>
&lt;p>Suppose we want to have a type for measurement units.&lt;/p>
&lt;h4 id="definition">Definition&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{module Unit : sig}\newline
&amp;amp;\texttt{\qquad type &amp;lsquo;a t}\newline
&amp;amp;\texttt{\qquad val of\_float : float -&amp;gt; &amp;lsquo;a t}\newline
&amp;amp;\texttt{\qquad val (+.) : &amp;lsquo;a t -&amp;gt; &amp;lsquo;a t -&amp;gt; &amp;lsquo;a t}\newline
&amp;amp;\texttt{end = struct}\newline
&amp;amp;\texttt{\qquad type &amp;lsquo;a t = float}\newline
&amp;amp;\texttt{\qquad let of\_float x = x}\newline
&amp;amp;\texttt{\qquad let (+.) = (+.)}\newline
&amp;amp;\texttt{end}
\end{align*}
$$&lt;/p>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The module syntax is for defining stuff (in this case types and functions) in a context. So you would have to call $\texttt{of\_float}$ with $\texttt{Unit.of\_float}$.&lt;/p>
&lt;p>$\texttt{sig}$ represents the module signature and $\texttt{struct}$ represents its actual definition (you can have multiple $\texttt{struct}$ definitions for a single $\texttt{sig}$).&lt;/p>
&lt;/div>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$\texttt{(+.)}$ is just an infix operator for float addition. Here, we define it for operations involving two values of type $\texttt{Unit}$.&lt;/p>
&lt;/div>
&lt;p>Notice how $\texttt{&amp;lsquo;a}$ is never actually used: its underlying type is just a $\texttt{float}$. However, notice that $\texttt{(+.)}$ has type $\texttt{&amp;lsquo;a t -&amp;gt; &amp;lsquo;a t -&amp;gt; &amp;lsquo;a t}$. This means that the two parameters we pass into $\texttt{(+.)}$ better have the same $\texttt{&amp;lsquo;a}$ type parameter. Similarly, it will return a value with that same $\texttt{&amp;lsquo;a}$.&lt;/p>
&lt;h4 id="use">Use&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{type meters}\newline
&amp;amp;\texttt{type lbs}\newline
&amp;amp;\newline
&amp;amp;\texttt{open Unit}\newline
&amp;amp;\texttt{let m1 : meters t = of\_float 2.}\newline
&amp;amp;\texttt{let m2 : meters t = of\_float 4.}\newline
&amp;amp;\texttt{let p1 : lbs t = of\_float 3.}\newline
&amp;amp;\texttt{let p2 : lbs t = of\_float 5.}\newline
&amp;amp;\texttt{let total\_m = m1 +. m2}\newline
&amp;amp;\texttt{let total\_p = p1 +. p2}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$\texttt{open Unit}$ just allows us to access $\texttt{Unit}$ things without prepending them.&lt;/p>
&lt;/div>
&lt;p>Notice how $\texttt{meter}$ and $\texttt{lbs}$ are never actually used outside of declaring types. This is how we can enforce that $\texttt{(+.)}$ operations can never be used on different units.&lt;/p>
&lt;div class="box box-shortcode warning" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#warning-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>If you try to add units with different $\texttt{&amp;lsquo;a}$ parameter types, your program will fail to type check.&lt;/p>
&lt;p>$$\cancel{\texttt{total\_m (+.) total\_p}}$$&lt;/p>
&lt;p>Also, if you try to instantiate a variable with a phantom type without the explicit $\texttt{&amp;lsquo;a}$, your program will also fail to type check.&lt;/p>
&lt;p>$$\cancel{\texttt{let x = of\_float 6.}}$$&lt;/p>
&lt;/div>
&lt;h3 id="access-control">Access Control&lt;/h3>
&lt;p>This example was inspired by a &lt;a class="link" href="https://blog.janestreet.com/howto-static-access-control-using-phantom-types/" target="_blank" rel="noopener"
>Ron Minsky post&lt;/a>.&lt;/p>
&lt;p>Suppose we want to have a type for reference cells that have access control permissions (read and read/write).&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Reference cells allow for mutable values by storing them as addresses containing the data.&lt;/p>
&lt;ul>
&lt;li>$\texttt{let x = ref 10}$ creates a reference cell $\texttt{x}$ storing the value $\texttt{10}$.&lt;/li>
&lt;li>$\texttt{x := 4}$ sets the value in $\texttt{x}$ to $\texttt{4}$.&lt;/li>
&lt;li>$\texttt{let v = !x}$ extracts the value in $\texttt{x}$ (so $\texttt{v = 4}$).&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h4 id="definition-1">Definition&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{type read}\newline
&amp;amp;\texttt{type write}\newline
&amp;amp;\newline
&amp;amp;\texttt{module Ref : sig}\newline
&amp;amp;\texttt{\qquad type (&amp;lsquo;a, &amp;lsquo;b) t}\newline
&amp;amp;\texttt{\qquad create : &amp;lsquo;b -&amp;gt; (write, &amp;lsquo;b) t}\newline
&amp;amp;\texttt{\qquad set : (write, &amp;lsquo;b) t -&amp;gt; &amp;lsquo;b -&amp;gt; unit}\newline
&amp;amp;\texttt{\qquad get : (&amp;lsquo;a, &amp;lsquo;b) t -&amp;gt; &amp;lsquo;b}\newline
&amp;amp;\texttt{\qquad readonly : (&amp;lsquo;a, &amp;lsquo;b) t -&amp;gt; (read, &amp;lsquo;b) t}\newline
&amp;amp;\texttt{end = struct}\newline
&amp;amp;\texttt{\qquad type (&amp;lsquo;a, &amp;lsquo;b) t = &amp;lsquo;b ref}\newline
&amp;amp;\texttt{\qquad create x = ref x}\newline
&amp;amp;\texttt{\qquad set t x = t := x}\newline
&amp;amp;\texttt{\qquad get x = !x}\newline
&amp;amp;\texttt{\qquad readonly x = x}\newline
&amp;amp;\texttt{end}
\end{align*}
$$&lt;/p>
&lt;p>$\texttt{&amp;lsquo;a}$ is discarded in the definition of $\texttt{Ref}$ (what makes it a phantom type). $\texttt{&amp;lsquo;b}$ just makes it polymorphic.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Polymorphic just means that the underlying type of the data within the cell can be anything. In the use example below, we will use $\texttt{&amp;lsquo;b = int}$.&lt;/p>
&lt;/div>
&lt;p>As shown, $\texttt{Ref}$ has $\texttt{&amp;lsquo;a = write}$ access upon creation, and you can only call $\texttt{set}$ on a $\texttt{Ref}$ which has $\texttt{&amp;lsquo;a = write}$. Additionally, you can cast any $\texttt{Ref}$ to have $\texttt{&amp;lsquo;a = read}$ using $\texttt{readonly}$ without actually changing any of its underlying data (just its $\texttt{&amp;lsquo;a}$ parameter type).&lt;/p>
&lt;h4 id="use-1">Use&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{open Ref}\newline
&amp;amp;\texttt{let write\_ref = create 10}\newline
&amp;amp;\texttt{let read\_ref = readonly write\_ref}\newline
&amp;amp;\texttt{let value1 = get write\_ref}\newline
&amp;amp;\texttt{let () = set write\_ref 4}\newline
&amp;amp;\texttt{let value2 = get read\_ref}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode warning" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#warning-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>If you try to call $\texttt{set}$ on a $\texttt{Ref}$ with $\texttt{&amp;lsquo;a = readonly}$, your program will fail to type check.&lt;/p>
&lt;p>$$\cancel{\texttt{set read\_ref 4}}$$&lt;/p>
&lt;/div></description></item><item><title>Monads</title><link>https://kiblitz.github.io/p/monads/</link><pubDate>Sat, 15 Jul 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/monads/</guid><description>&lt;img src="https://kiblitz.github.io/p/monads/abstract1.png" alt="Featured image of post Monads" />&lt;h2 id="definition">Definition&lt;/h2>
&lt;p>Monads are structures that wrap values. They are useful for creating computation pipelines that abstract away control flow and side effects.&lt;/p>
&lt;h3 id="return-and-bind">Return and Bind&lt;/h3>
&lt;p>A monad of type $\texttt{&amp;lsquo;a t}$ has the following functions.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{return: &amp;lsquo;a -&amp;gt; &amp;lsquo;a t}\newline
&amp;amp;\texttt{bind: &amp;lsquo;a t -&amp;gt; (&amp;lsquo;a -&amp;gt; &amp;lsquo;b t) -&amp;gt; &amp;lsquo;b t}
\end{align*}
$$&lt;/p>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Monads are &lt;a class="link" href="https://en.wikipedia.org/wiki/Parametric_polymorphism" target="_blank" rel="noopener"
>parametric types&lt;/a>. $\texttt{t}$ represents the monad itself and $\texttt{&amp;lsquo;a}$ is the type parameter.&lt;/p>
&lt;p>For example, $\texttt{Option}$ is a monad. The value it wraps has the parameter type $\texttt{&amp;lsquo;a}$. So, you could have types like $\texttt{int Option}$ or $\texttt{string Option}$.&lt;/p>
&lt;p>$\texttt{&amp;lsquo;b}$ is another parameter. Bind takes a function that essentially &amp;ldquo;maps&amp;rdquo; the current monad type parameter $\texttt{&amp;lsquo;a}$ to another monad of type $\texttt{&amp;lsquo;b}$.&lt;/p>
&lt;/div>
&lt;p>It helps to follow the types. $\texttt{return}$ constructs the monad from a value. $\texttt{bind}$ transforms the value within the monad (computation pipeline).&lt;/p>
&lt;h3 id="map">Map&lt;/h3>
&lt;p>The definition for the monadic function $\texttt{map}$ follows from the functions above.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{map: &amp;lsquo;a t -&amp;gt; (&amp;lsquo;a -&amp;gt; &amp;lsquo;b) -&amp;gt; &amp;lsquo;b t}\newline
&amp;amp;\newline
&amp;amp;\texttt{let map t f =}\newline
&amp;amp;\texttt{\qquad let g a = return (f a) in}\newline
&amp;amp;\texttt{\qquad bind t g}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$\texttt{map}$ is the same as $\texttt{bind}$ except the function ($\texttt{f}$) returns a raw $\texttt{&amp;lsquo;b}$ rather than a $\texttt{&amp;lsquo;b t}$.&lt;/p>
&lt;p>Here, we construct the $\texttt{g}$ necessary for $\texttt{bind}$ by just applying $\texttt{return}$ to the result of $\texttt{f}$.&lt;/p>
&lt;/div>
&lt;h2 id="ocaml-ppx_let">OCaml ppx_let&lt;/h2>
&lt;p>The &lt;a class="link" href="https://github.com/janestreet/ppx_let" target="_blank" rel="noopener"
>ppx_let&lt;/a> library for OCaml provides an elegant way to code with monads.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Although The &lt;a class="link" href="https://github.com/janestreet/ppx_let" target="_blank" rel="noopener"
>ppx_let&lt;/a> library introduces various monadic syntax (i.e. monadic pattern matching), we will only display monadic let bindings.&lt;/p>
&lt;p>They work similarly to these monadic let bindings (see documentation).&lt;/p>
&lt;/div>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let\%bind a = a\_monad in (* a : &amp;lsquo;a; a\_monad : &amp;lsquo;a t *)}\newline
&amp;amp;\texttt{\qquad &amp;hellip;}\newline
&amp;amp;\texttt{\qquad b\_monad (* b\_monad : &amp;lsquo;b t *)}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$\texttt{(* &amp;hellip; *)}$ are comments.&lt;/p>
&lt;/div>
&lt;p>With this syntactic sugar, we define the function parameter in (call it $\texttt{f}$ with type $\texttt{&amp;lsquo;a -&amp;gt; &amp;lsquo;b t}$) in the body of the $\texttt{let\%bind}$, where $\texttt{a}$ is the parameter to $\texttt{f}$.&lt;/p>
&lt;hr>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let\%map a = a\_monad in (* a : &amp;lsquo;a; a\_monad : &amp;lsquo;a t *)}\newline
&amp;amp;\texttt{\qquad &amp;hellip;}\newline
&amp;amp;\texttt{\qquad b (* b : &amp;lsquo;b *)}
\end{align*}
$$&lt;/p>
&lt;p>$\texttt{let\%map}$ does basically the same thing except the return type of its body is just a $\texttt{&amp;lsquo;b}$ (as is in $\texttt{f}$ with type $\texttt{&amp;lsquo;a -&amp;gt; &amp;lsquo;b}$).&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>These might be easier to grasp with the examples below.&lt;/p>
&lt;/div>
&lt;hr>
&lt;p>Important to note that the type of the entire $\texttt{let\%bind}$ and $\texttt{let\%map}$ expressions are $\texttt{&amp;lsquo;b t}$, consistent with the return types of $\texttt{bind}$ and $\texttt{map}$.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Typically, to chain monadic operations we will end with a single $\texttt{let\%map}$. All previous bindings will be $\texttt{let\%bind}$.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let\%bind a = a\_monad in}\newline
&amp;amp;\texttt{let\%bind b = b\_monad in}\newline
&amp;amp;\texttt{let\%bind c = c\_monad in}\newline
&amp;amp;\texttt{let\%map d = d\_monad in}\newline
&amp;amp;\texttt{(a, b, c, d)}
\end{align*}
$$&lt;/p>
&lt;p>Why is this the case?&lt;/p>
&lt;ul>
&lt;li>$\texttt{let\%bind}$ expects its function parameter to return a monad, which both $\texttt{let\%bind}$ and $\texttt{let\%map}$ do. This is why all except the last level must be $\texttt{let\%bind}$.&lt;/li>
&lt;li>It is natural to perform computations without monads. Since this usually occurs after &amp;ldquo;unwrapping&amp;rdquo; all the monads, the last level is usually a $\texttt{let\%map}$.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>Note that if the last level were a $\texttt{let\%bind}$, we would have to return a monad.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let\%bind a = a\_monad in}\newline
&amp;amp;\texttt{let\%bind b = b\_monad in}\newline
&amp;amp;\texttt{let\%bind c = c\_monad in}\newline
&amp;amp;\texttt{let\%bind d = d\_monad in}\newline
&amp;amp;\texttt{return (a, b, c, d)}
\end{align*}
$$&lt;/p>
&lt;/div>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;h3 id="option">Option&lt;/h3>
&lt;h4 id="definition-1">Definition&lt;/h4>
&lt;p>Options give optionality to the existence of an underlying value.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{type &amp;lsquo;a Option =}\newline
&amp;amp;\texttt{\quad | None}\newline
&amp;amp;\texttt{\quad | Some of &amp;lsquo;a}\newline
&amp;amp;\newline
&amp;amp;\texttt{let return a = Some a }\newline
&amp;amp;\texttt{let bind a\_opt f =}\newline
&amp;amp;\texttt{\qquad match a\_opt with}\newline
&amp;amp;\texttt{\qquad \qquad None -&amp;gt; None}\newline
&amp;amp;\texttt{\qquad \quad | Some a -&amp;gt; f a}
\end{align*}
$$&lt;/p>
&lt;h4 id="use">Use&lt;/h4>
&lt;p>Suppose we want to implement the $\texttt{option\_plus}$ function which operates on two parameters of type $\texttt{int Option}$.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let option\_plus (a\_opt : int Option) (b\_opt : int Option) : int Option =}\newline
&amp;amp;\texttt{\qquad let\%bind a = a\_opt in}\newline
&amp;amp;\texttt{\qquad let\%map b = b\_opt in}\newline
&amp;amp;\texttt{\qquad a + b}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>This is much more elegant than &amp;ldquo;if-statement spamming&amp;rdquo; (or in OCaml, &amp;ldquo;pattern match spamming&amp;rdquo;).&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let option\_plus (a\_opt : int Option) (b\_opt : int Option) : int Option =}\newline
&amp;amp;\texttt{\qquad match a\_opt with}\newline
&amp;amp;\texttt{\qquad \qquad None -&amp;gt; None}\newline
&amp;amp;\texttt{\qquad \quad | Some a -&amp;gt;}\newline
&amp;amp;\texttt{\qquad \qquad (match b\_opt with}\newline
&amp;amp;\texttt{\qquad \qquad \qquad None -&amp;gt; None}\newline
&amp;amp;\texttt{\qquad \quad \qquad | Some b -&amp;gt; a + b)}
\end{align*}
$$&lt;/p>
&lt;/div>
&lt;h3 id="result">Result&lt;/h3>
&lt;h4 id="definition-2">Definition&lt;/h4>
&lt;p>Results allow values to have a fail condition. They are like options except we can tag the $\texttt{None}$ case with information (i.e. error information).&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{type (&amp;lsquo;a, &amp;lsquo;b) Result =}\newline
&amp;amp;\texttt{\quad | Ok of &amp;lsquo;a}\newline
&amp;amp;\texttt{\quad | Error of &amp;lsquo;b}\newline
&amp;amp;\newline
&amp;amp;\texttt{let return a = Ok a }\newline
&amp;amp;\texttt{let bind a\_res f =}\newline
&amp;amp;\texttt{\qquad match a\_res with}\newline
&amp;amp;\texttt{\qquad \qquad Ok a -&amp;gt; f a}\newline
&amp;amp;\texttt{\qquad \quad | Error \_ as err -&amp;gt; err}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The $\texttt{Error \_ as err -&amp;gt; err}$ just assigns the entire result into $\texttt{err}$. Alternatively, we could have written $\texttt{Error e -&amp;gt; Error e}$.&lt;/p>
&lt;/div>
&lt;h4 id="use-1">Use&lt;/h4>
&lt;p>Suppose we have a function $\texttt{input: unit -&amp;gt; string}$ which reads from $\texttt{stdin}$.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The $\texttt{unit}$ type has only one possible value: $\texttt{()}$. It is useful for when we want a function that requires zero arguments.&lt;/p>
&lt;/div>
&lt;p>Suppose we have a function which attempts to convert a $\texttt{string}$ to an $\texttt{int}$ and stores the error as a $\texttt{string}$.&lt;/p>
&lt;p>$$\texttt{atoi: string -&amp;gt; (int, string) Result}$$&lt;/p>
&lt;p>Now, let&amp;rsquo;s write a function to add two user inputs.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let add\_user\_inputs (() : unit) : (int, string) Result =}\newline
&amp;amp;\texttt{\qquad let\%bind a = input () |&amp;gt; atoi in}\newline
&amp;amp;\texttt{\qquad let\%map b = input () |&amp;gt; atoi in}\newline
&amp;amp;\texttt{\qquad a + b}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$\texttt{input () |&amp;gt; atoi}$ is syntactic sugar for $\texttt{atoi (input ())}$&lt;/p>
&lt;/div>
&lt;h3 id="deferred">Deferred&lt;/h3>
&lt;h4 id="definition-3">Definition&lt;/h4>
&lt;p>Deferreds allow us to make asynchronous computation. The implementation is a bit more involved, since the idea is computation is queued to a scheduler within a deferred monad. For this reason, &lt;em>the following code is pseudocode&lt;/em>.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{type &amp;lsquo;a Deferred =}\newline
&amp;amp;\texttt{\quad | Determined of &amp;lsquo;a}\newline
&amp;amp;\texttt{\quad | Undetermined}\newline
&amp;amp;\newline
&amp;amp;\texttt{let return a = Determined a }\newline
&amp;amp;\texttt{let bind a\_def f = &amp;hellip;}\newline
&amp;amp;\texttt{(* f is queued on the scheduler. The return value of the bind}\newline
&amp;amp;\texttt{ * (call it x) resolves immediately to undetermined. Upon f&amp;rsquo;s}\newline
&amp;amp;\texttt{ * execution completion, x becomes a determined. Monadic chains}\newline
&amp;amp;\texttt{ * (bind to bind to &amp;hellip; to bind to map) continue asynchronously}\newline
&amp;amp;\texttt{ * on x.}\newline
&amp;amp;\texttt{ *}\newline
&amp;amp;\texttt{ * These deferred monadic chains are &amp;ldquo;upon&amp;rdquo; computations.}\newline
&amp;amp;\texttt{ *)}\newline
\end{align*}
$$&lt;/p>
&lt;h4 id="use-2">Use&lt;/h4>
&lt;p>Suppose we have a function write a function to crawl a webpage and click all links and print visited urls. The function halts once it has reached a given depth (all links on the first page result have depth $1$; all of their links have depth $2$; etc).&lt;/p>
&lt;p>Here are the functions we are given to use:&lt;/p>
&lt;ul>
&lt;li>$\texttt{print: string -&amp;gt; unit}$ outputs to $\texttt{stdout}$&lt;/li>
&lt;li>$\texttt{curl: string -&amp;gt; string Deferred}$ queries the web for an html page given its web address&lt;/li>
&lt;li>$\texttt{get\_links: string -&amp;gt; string List}$ grabs a list of all links on an html page&lt;/li>
&lt;li>$\texttt{List.map: &amp;lsquo;a List -&amp;gt; (&amp;lsquo;a -&amp;gt; &amp;lsquo;b) -&amp;gt; &amp;lsquo;b List}$ takes a list of items and performs a computation on all of its elements&lt;/li>
&lt;li>$\texttt{Deferred.all: &amp;lsquo;a Deferred List -&amp;gt; &amp;lsquo;a List Deferred}$ transforms a list of deferreds into a single deferred holding a list&lt;/li>
&lt;/ul>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Notice the $\texttt{List.map}$. Indeed there exists a list monad! We will not be covering it.&lt;/p>
&lt;/div>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let crawl (i : int) (url : string) : unit Deferred =}\newline
&amp;amp;\texttt{\qquad let () = print url in}\newline
&amp;amp;\texttt{\qquad if i = 0 then return () else}\newline
&amp;amp;\texttt{\qquad let j = i - 1 in}\newline
&amp;amp;\texttt{\qquad let\%bind html = curl url in}\newline
&amp;amp;\texttt{\qquad let links = get\_links html in}\newline
&amp;amp;\texttt{\qquad let crawls = List.map links (crawl j) in}\newline
&amp;amp;\texttt{\qquad let\%map (\_ : unit List) = Deferred.all crawls in}\newline
&amp;amp;\texttt{\qquad ()}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Note that $\texttt{crawl}$ is non-blocking. If we call it, it will immediately return a $\texttt{unit Deferred}$ and we can continue the program ($\texttt{crawl}$ is queued by the scheduler). If at any point, we want to block until $\texttt{crawl}$ completes, we can monadic bind on the $\texttt{unit Deferred}$ return value.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let unit\_def = crawl 5 &amp;ldquo;https://www.wikipedia.org&amp;rdquo; in}\newline
&amp;amp;\texttt{(* &amp;hellip; do some stuff &amp;hellip; *)}\newline
&amp;amp;\texttt{let\%map () = unit\_def in ()}\newline
\end{align*}
$$&lt;/p>
&lt;/div></description></item><item><title>Type Checking: Subtyping</title><link>https://kiblitz.github.io/p/subtyping/</link><pubDate>Sun, 09 Jul 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/subtyping/</guid><description>&lt;img src="https://kiblitz.github.io/p/subtyping/purple.jpg" alt="Featured image of post Type Checking: Subtyping" />&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>At the very least when it comes to types, something of type $\texttt{A}$ can be used whenever something of type $\texttt{A}$ is expected.&lt;/p>
&lt;p>$\texttt{int a = 5}\newline\texttt{float b = 5.0}$&lt;/p>
&lt;p>Is there any leeway for flexibility? Specifically, does there exist a notion of type substitutability?&lt;/p>
&lt;hr>
&lt;p>$\texttt{float b = 5}$&lt;/p>
&lt;p>This makes sense because an $\texttt{int}$ is a subset of a $\texttt{float}$. In other words, a $\texttt{float}$ can do anything an $\texttt{int}$ can do.&lt;/p>
&lt;p>$\cancel{\texttt{int b = 5.0}}$&lt;/p>
&lt;p>This won&amp;rsquo;t work. An $\texttt{int}$ cannot do everything a $\texttt{float}$ can do (cannot represent all of its values). A quick way to break this is: $$\texttt{int b = 5.5}$$&lt;/p>
&lt;h2 id="definition">Definition&lt;/h2>
&lt;p>$S &amp;lt;: T$ means that $S$ is a subtype of $T$.&lt;/p>
&lt;p>This means that anything of type $S$ can be used whenever type $T$ is expected.&lt;/p>
&lt;p>So in the above example:
$$\texttt{int}&amp;lt;:\texttt{float}$$&lt;/p>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode tip" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#tip-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>You can think of it as $S$ is &lt;em>more&lt;/em> restrictive &lt;strong>(to typecheck)&lt;/strong> than $T$ since if you want to do something with $T$, you should also be able to do it with $S$.&lt;/p>
&lt;/div>
&lt;h2 id="structures">Structures&lt;/h2>
&lt;h3 id="width-subtyping">Width Subtyping&lt;/h3>
&lt;h4 id="class-hierarchy">Class Hierarchy&lt;/h4>
&lt;p>Suppose a class lineage has the following structures.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{class Animal:}\newline
&amp;amp;\texttt{\qquad string name}\newline
&amp;amp;\texttt{\qquad int age}\newline
&amp;amp;\texttt{\qquad void}\rightarrow\texttt{void makeNoise}\newline
&amp;amp;\newline
&amp;amp;\texttt{class Mammal extends Animal:}\newline
&amp;amp;\texttt{\qquad string furColor}\newline
&amp;amp;\newline
&amp;amp;\texttt{class Human extends Mammal:}\newline
&amp;amp;\texttt{\qquad string occupation}\newline
&amp;amp;\texttt{\qquad int netWorth}\newline
&amp;amp;\texttt{\qquad void}\rightarrow\texttt{int doTaxes}
\end{align*}
$$&lt;/p>
&lt;p>By definition of class hierarchy, a child has every characteristic its parent has. For example, $\texttt{Human}$ has a $\texttt{furColor}$, and transitively, since $\texttt{Mammal}$ has a $\texttt{name}$ (among other things), so does $\texttt{Human}$.&lt;/p>
&lt;p>Since children have everything their parents have (and thus can do anything the parents can do):
$$\texttt{Human} &amp;lt;: \texttt{Mammal}$$
$$\texttt{Mammal} &amp;lt;: \texttt{Animal}$$
$$- \textit{and transitively } -$$
$$\texttt{Human} &amp;lt;: \texttt{Animal}$$&lt;/p>
&lt;p>Generally:&lt;/p>
&lt;blockquote>
&lt;p>$$\texttt{Child} &amp;lt;: \texttt{Parent}$$&lt;/p>
&lt;/blockquote>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>This is called &lt;strong>width subtyping&lt;/strong> since supertypes (opposite of subtypes) contain a subset of fields (along the width of the class definition).&lt;/p>
&lt;/div>
&lt;h4 id="unrelated-structures">Unrelated structures&lt;/h4>
&lt;p>The notion of width subtyping can be extended to datatypes without hierarchical relationships.&lt;/p>
&lt;p>For example, suppose there are two unrelated datatypes with the following definitions.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{struct Named:}\newline
&amp;amp;\texttt{\qquad string name}\newline
&amp;amp;\newline
&amp;amp;\texttt{struct User:}\newline
&amp;amp;\texttt{\qquad string name}\newline
&amp;amp;\texttt{\qquad string age}
\end{align*}
$$&lt;/p>
&lt;p>They have no explicit relationship. However, it sort of makes sense that whenever a program expects a $\texttt{Named}$ entity that we can pass it a $\texttt{User}$ (since anything a $\texttt{Named}$ has, a $\texttt{User}$ also has).&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Example:&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{func rename(Named entity, string newName):}\newline
&amp;amp;\texttt{\qquad entity.name = newName}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{User user = }\lbrace\texttt{name: &amp;ldquo;glee&amp;rdquo;, age: 1000}\rbrace\newline
&amp;amp;\texttt{rename(user, &amp;ldquo;not glee&amp;rdquo;)}
\end{align*}
$$&lt;/p>
&lt;/div>
&lt;p>This can get fairly messy to type check in various type systems.&lt;/p>
&lt;ul>
&lt;li>C++ has &lt;a class="link" href="https://en.wikipedia.org/wiki/Template_metaprogramming" target="_blank" rel="noopener"
>template metaprogramming&lt;/a> (&lt;a class="link" href="https://en.wikipedia.org/wiki/Undecidable_problem" target="_blank" rel="noopener"
>undecideable&lt;/a> and thus limited by recursion depth)&lt;/li>
&lt;li>Python uses &lt;a class="link" href="https://en.wikipedia.org/wiki/Duck_typing" target="_blank" rel="noopener"
>duck typing&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="depth-subtyping">Depth Subtyping&lt;/h3>
&lt;h4 id="definition-1">Definition&lt;/h4>
&lt;p>Instead of subtyping at the top level, could we subtype at the field level (and thus, their fields recursively)?&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{class LivingSpace:}\newline
&amp;amp;\texttt{\qquad Animal resident}\newline
&amp;amp;\newline
&amp;amp;\texttt{class Studio:}\newline
&amp;amp;\texttt{\qquad Human resident}
&amp;amp;\end{align*}
$$&lt;/p>
&lt;p>Does $\texttt{Studio} &amp;lt;: \texttt{LivingSpace}$?&lt;/p>
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Notice that these cannot have hierarchical relationships.&lt;/p>
&lt;/div>
&lt;p>It might make sense logically that if our program requires a $\texttt{LivingSpace}$ that we may provide it with a $\texttt{Studio}$ since the latter can do anything the former can do (in this case, provide $\texttt{resident.name}$).&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{func owner(LivingSpace home)} \rightarrow \texttt{string:}\newline
&amp;amp;\texttt{\qquad return home.resident.name}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{Studio studio = }\lbrace\texttt{resident: }\lbrace- \textit{some human} -\rbrace\rbrace\newline
&amp;amp;\texttt{print(owner(studio))}
\end{align*}
$$&lt;/p>
&lt;h4 id="caveat">Caveat&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{func reassignResident(LivingSpace home, Animal newResident):}\newline
&amp;amp;\texttt{\qquad home.resident = newResident}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{Studio studio = }\lbrace\texttt{resident: }\lbrace- \textit{some human} -\rbrace\rbrace\newline
&amp;amp;\texttt{reassignResident(studio, }\lbrace- \textit{some animal } -\rbrace)
\end{align*}
$$&lt;/p>
&lt;p>Ah, so here&amp;rsquo;s where it breaks down. We want to assign our subtyped field. But the true underlying structure requires more!&lt;/p>
&lt;p>$\texttt{reassignResident}$ is under the impression that an $\texttt{Animal}$ is enough to fill up a $\texttt{LivingSpace}$, which is logically true. But if we pass $\texttt{reassignResident}$ a $\texttt{Studio}$, it should really expect a $\texttt{Human}$ instead of an $\texttt{Animal}$.&lt;/p>
&lt;blockquote>
&lt;p>It turns out that the breakdown occurs because of &lt;a class="link" href="https://en.wikipedia.org/wiki/Aliasing_%28computing%29#:~:text=In%20computing%2C%20aliasing%20describes%20a,symbolic%20names%20in%20the%20program." target="_blank" rel="noopener"
>aliasing&lt;/a>. Thus, &lt;strong>depth subtyping&lt;/strong> works with &lt;em>immutable structures&lt;/em> (records).&lt;/p>
&lt;/blockquote>
&lt;h2 id="functions">Functions&lt;/h2>
&lt;h3 id="introduction-1">Introduction&lt;/h3>
&lt;p>Functions are values. So how do we typecheck function assignment? We&amp;rsquo;ll reuse some types from above.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{Mammal} \rightarrow \texttt{Mammal someFunction}=\ldots\newline
&amp;amp;\texttt{Mammal input = }\lbrace\ldots\rbrace\newline
&amp;amp;\texttt{Mammal output = someFunction(input)}
\end{align*}
$$&lt;/p>
&lt;p>The question is: what types can we assign to $\texttt{someFunction}$?&lt;/p>
&lt;h3 id="outputs">Outputs&lt;/h3>
&lt;p>Let&amp;rsquo;s trial and error, and try to reason the solution out.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{Mammal} \rightarrow \texttt{Human functionValue}=\ldots\newline
&amp;amp;\texttt{Mammal} \rightarrow \texttt{Mammal someFunction = functionValue}
\end{align*}
$$&lt;/p>
&lt;p>$\texttt{functionValue}$ returns a $\texttt{Human}$. Executions of $\texttt{someFunction}$ expect a return value that can do everything a $\texttt{Mammal}$ can do, which a $\texttt{Human}$ satisfies. This works.&lt;/p>
&lt;p>$$\texttt{actualOutput} &amp;lt;: \texttt{expectedOutput}$$&lt;/p>
&lt;hr>
&lt;p>For sake of clarity, let&amp;rsquo;s try it the other way.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{Mammal} \rightarrow \texttt{Animal functionValue}=\ldots\newline
&amp;amp;\cancel{\texttt{Mammal} \rightarrow \texttt{Mammal someFunction = functionValue}}
\end{align*}
$$&lt;/p>
&lt;p>Clearly, an execution to $\texttt{someFunction}$ which expects a $\texttt{Mammal}$ return type will miss out on the $\texttt{furColor}$ attribute.&lt;/p>
&lt;h3 id="inputs">Inputs&lt;/h3>
&lt;p>Again, let&amp;rsquo;s trial and error.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{Human} \rightarrow \texttt{Mammal functionValue}=\ldots\newline
&amp;amp;\cancel{\texttt{Mammal} \rightarrow \texttt{Mammal someFunction = functionValue}}
\end{align*}
$$&lt;/p>
&lt;p>Clearly, whatever we provide as input must be able to do whatever $\texttt{someFunction}$ requires of it. If we provide $\texttt{Mammal}$, $\texttt{functionValue}$ expects a $\texttt{Human}$ which might use attributes like $\texttt{occupation}$ which aren&amp;rsquo;t present in $\texttt{Mammal}$.&lt;/p>
&lt;hr>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{Animal} \rightarrow \texttt{Mammal functionValue}=\ldots\newline
&amp;amp;\texttt{Mammal} \rightarrow \texttt{Mammal someFunction = functionValue}
\end{align*}
$$&lt;/p>
&lt;p>Providing $\texttt{someFunction}$ with an input that can do at least what $\texttt{Mammal}$ can do will allow it to safely be used as input to its value, $\texttt{functionValue}$.&lt;/p>
&lt;p>$$\texttt{expectedInput} &amp;lt;: \texttt{actualInput}$$&lt;/p>
&lt;h3 id="putting-it-all-together">Putting it All Together&lt;/h3>
&lt;p>It&amp;rsquo;s a little counterintuitive, but the inputs and outputs of a function subtype have opposite directionality (as we saw above).&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{Animal} \rightarrow \texttt{Human functionValue}=\ldots\newline
&amp;amp;\texttt{Mammal} \rightarrow \texttt{Mammal someFunction = functionValue}
\end{align*}
$$&lt;/p>
&lt;blockquote>
&lt;p>$$\begin{align*}
\texttt{I}&amp;amp;\texttt{&amp;rsquo;} &amp;lt;:\texttt{I}\newline
&amp;amp;\texttt{O} &amp;lt;:\texttt{O&amp;rsquo;}\newline
&amp;amp;\implies\newline
\texttt{I}\rightarrow\medspace&amp;amp;\texttt{O} &amp;lt;: \texttt{I&amp;rsquo;}\rightarrow\texttt{O&amp;rsquo;}
\end{align*}$$&lt;/p>
&lt;/blockquote></description></item></channel></rss>