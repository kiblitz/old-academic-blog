<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>15-459 on glee</title><link>https://kiblitz.github.io/categories/15-459/</link><description>Recent content in 15-459 on glee</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 13 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kiblitz.github.io/categories/15-459/index.xml" rel="self" type="application/rss+xml"/><item><title>IV. Minus World</title><link>https://kiblitz.github.io/p/minus-world/</link><pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/minus-world/</guid><description>&lt;img src="https://kiblitz.github.io/p/minus-world/mountain_colorful_horizon.jpg" alt="Featured image of post IV. Minus World" />&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>We know that the unique edge in quantum computing is derived from negative amplitudes. How can we cause a qubit value to have negative amplitude?&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;h3 id="working-with-the-hadamard-gate">Working with the Hadamard Gate&lt;/h3>
&lt;p>The only instruction that we&amp;rsquo;ve seen that introduces negative amplitude is the hadamard gate. Specifically, $1\xmapsto{-1} 1$.&lt;/p>
&lt;p>$$H=\frac{\sqrt{2}}{2}\begin{bmatrix}1 &amp;amp; 1 \newline 1 &amp;amp; -1\end{bmatrix}$$&lt;/p>
&lt;p>So if we want to enter minus world, we probably want to perform $\texttt{HAD}$ on a qubit with value $1$.&lt;/p>
&lt;p>$$\frac{\sqrt{2}}{2}\begin{bmatrix}1 &amp;amp; 1 \newline 1 &amp;amp; -1\end{bmatrix}\cdot\begin{bmatrix}0 \newline 1\end{bmatrix} = \frac{\sqrt{2}}{2}\begin{bmatrix}1 \newline -1\end{bmatrix}$$&lt;/p>
&lt;p>Recall that $\texttt{HAD}$ is its own reverse ($\texttt{HAD}^\dagger=\texttt{HAD}\implies H^2=I$).
$$\begin{align*}(\frac{\sqrt{2}}{2}\begin{bmatrix}1 &amp;amp; 1 \newline 1 &amp;amp; -1\end{bmatrix})^\dagger\cdot \frac{\sqrt{2}}{2}\begin{bmatrix}1 &amp;amp; 1 \newline 1 &amp;amp; -1\end{bmatrix}\cdot\begin{bmatrix}0 \newline 1\end{bmatrix} &amp;amp;= (\frac{\sqrt{2}}{2}\begin{bmatrix}1 &amp;amp; 1 \newline 1 &amp;amp; -1\end{bmatrix})^\dagger\cdot\frac{\sqrt{2}}{2}\begin{bmatrix}1 \newline -1\end{bmatrix}\newline \begin{bmatrix}0 \newline 1\end{bmatrix} &amp;amp;= \frac{\sqrt{2}}{2}\begin{bmatrix}1 &amp;amp; 1 \newline 1 &amp;amp; -1\end{bmatrix}\frac{\sqrt{2}}{2}\begin{bmatrix}1 \newline -1\end{bmatrix}\end{align*}$$&lt;/p>
&lt;h3 id="the-magic">The Magic&lt;/h3>
&lt;p>The left side of the above equation shows a qubit with amplitude $1$ on value $1$. Looking at the computations in matrix form, it is clear that what we want is to somehow negate both sides of the equation.&lt;/p>
&lt;p>Here is a simple equality.&lt;/p>
&lt;p>$$-\frac{\sqrt{2}}{2}\begin{bmatrix}1 \newline -1\end{bmatrix}=\frac{\sqrt{2}}{2}\begin{bmatrix}-1 \newline 1\end{bmatrix}$$&lt;/p>
&lt;p>Now the solution is clear.
$$\texttt{NOT}(\frac{\sqrt{2}}{2}\begin{bmatrix}1 \newline -1\end{bmatrix})=\frac{\sqrt{2}}{2}\begin{bmatrix}-1 \newline 1\end{bmatrix}=-\frac{\sqrt{2}}{2}\begin{bmatrix}1 \newline -1\end{bmatrix}$$&lt;/p>
&lt;h3 id="putting-it-all-together">Putting it All Together&lt;/h3>
&lt;p>The first step, we applied $\texttt{HAD}$ on a qubit with amplitude $1$ on value $1$ to get the following state.
$$\frac{\sqrt{2}}{2}\begin{bmatrix}1 \newline -1\end{bmatrix}$$
In the next step, we negated this expression with a $\texttt{NOT}$ operation.
$$\frac{\sqrt{2}}{2}\begin{bmatrix}-1 \newline 1\end{bmatrix}$$
Finally, we applied $\texttt{HAD}$ on this updated qubit.
$$\begin{bmatrix}0 \newline -1\end{bmatrix}$$&lt;/p>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Notice that we require in the first step for the qubit to have value $1$. If it had value $0$, the steps would be the same but without the minus sign. In other words, no effect would take place.&lt;/p>
&lt;p>This is powerful, because now we have a $\texttt{If }A\texttt{=1 THEN MINUS}(A)$ subroutine.&lt;/p>
&lt;/div>
&lt;h2 id="quantum-code">Quantum Code&lt;/h2>
&lt;p>$
\texttt{INIT}(A)
\newline\texttt{NOT}(A)
\newline\quad\newline
\newline\texttt{HAD}(A)
\newline\texttt{NOT}(A)
\newline\texttt{HAD}(A)
$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 488 249"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 256,0 L 304,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,48 L 160,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,48 L 232,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,96 L 304,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,112 L 96,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,128 L 304,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,176 L 160,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,176 L 232,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,224 L 304,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,112 L 128,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,48 L 256,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,176 L 256,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,112 L 128,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,176 L 256,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,48 L 256,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='32' cy='112' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='96' cy='112' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='160' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='160' cy='176' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='232' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='232' cy='176' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='304' cy='0' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='304' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='304' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='304' cy='224' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='0' y='116' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='16' y='116' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='48' y='164' fill='currentColor' style='font-size:1em'>N&lt;/text>
&lt;text text-anchor='middle' x='56' y='164' fill='currentColor' style='font-size:1em'>O&lt;/text>
&lt;text text-anchor='middle' x='64' y='132' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='72' y='164' fill='currentColor' style='font-size:1em'>(&lt;/text>
&lt;text text-anchor='middle' x='80' y='164' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='88' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='88' y='164' fill='currentColor' style='font-size:1em'>)&lt;/text>
&lt;text text-anchor='middle' x='104' y='180' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='112' y='52' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='112' y='116' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='112' y='180' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='120' y='116' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='128' y='116' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='136' y='116' fill='currentColor' style='font-size:1em'>(&lt;/text>
&lt;text text-anchor='middle' x='144' y='116' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='152' y='116' fill='currentColor' style='font-size:1em'>)&lt;/text>
&lt;text text-anchor='middle' x='160' y='36' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='160' y='196' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='176' y='116' fill='currentColor' style='font-size:1em'>N&lt;/text>
&lt;text text-anchor='middle' x='184' y='116' fill='currentColor' style='font-size:1em'>O&lt;/text>
&lt;text text-anchor='middle' x='192' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='192' y='116' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='192' y='196' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='200' y='116' fill='currentColor' style='font-size:1em'>(&lt;/text>
&lt;text text-anchor='middle' x='208' y='116' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='216' y='116' fill='currentColor' style='font-size:1em'>)&lt;/text>
&lt;text text-anchor='middle' x='224' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='224' y='196' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='240' y='116' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='248' y='116' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='256' y='84' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='256' y='116' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='264' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='264' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='264' y='116' fill='currentColor' style='font-size:1em'>(&lt;/text>
&lt;text text-anchor='middle' x='264' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='264' y='212' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='272' y='116' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='280' y='116' fill='currentColor' style='font-size:1em'>)&lt;/text>
&lt;text text-anchor='middle' x='320' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='320' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='320' y='132' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='320' y='228' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>$
\mathbb{A}[0] = (1\times 1\times 1\times 1) + (1\times -1\times 1\times 1) = 0\newline
\mathbb{A}[1] = (1\times 1\times 1\times -1) + (1\times -1\times 1\times 1) = -2
$
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Unnormalized. Clearly when normalized, $\mathbb{A}[1]=-1$.&lt;/p>
&lt;/div>
&lt;/p>
&lt;h2 id="new-power">New Power&lt;/h2>
&lt;p>Suppose we created some subroutine $\texttt{MAJ}(ABCM)$ which negates $M$ if the majority value in $ABC$ is $1$ (we will use it with $M=0$, so essentially this function just sets $M$ to the majority value).&lt;/p>
&lt;p>Now, with our new code, the following subroutine is possible.&lt;/p>
&lt;p>$
\texttt{INIT}(ABCM)
\newline\texttt{// assign }ABC
\newline\texttt{MAJ}(ABCM)
\newline\texttt{HAD}(M)
\newline\texttt{NOT}(M)
\newline\texttt{HAD}(M)
$&lt;/p>
&lt;p>Going forward, we can just execute subroutines like this with $\texttt{IF MAJ}(ABCM)\texttt{ THEN MINUS}(M)$.&lt;/p></description></item><item><title>III. Garbage Qubit Disposal</title><link>https://kiblitz.github.io/p/garbage-qubit-disposal/</link><pubDate>Mon, 12 Jun 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/garbage-qubit-disposal/</guid><description>&lt;img src="https://kiblitz.github.io/p/garbage-qubit-disposal/mountain_contrast.jpg" alt="Featured image of post III. Garbage Qubit Disposal" />&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;h3 id="example">Example&lt;/h3>
&lt;p>Suppose we had the following quantum code.&lt;/p>
&lt;p>$\texttt{INIT}(A)\newline\texttt{HAD}(A)\newline\texttt{HAD}(A)$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 448 185"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 64,48 L 80,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,48 L 128,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,64 L 48,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,16 L 96,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,64 L 144,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,144 L 48,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,144 L 144,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,80 L 80,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,80 L 176,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,48 A 16,16 0 0,0 48,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,32 A 16,16 0 0,1 80,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,32 A 16,16 0 0,0 112,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,48 A 16,16 0 0,1 144,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='80' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='96' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='112' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='144' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='176' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='16' y='164' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='24' y='116' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='32' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='72' y='116' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='80' y='164' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='96' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='112' y='164' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='120' y='116' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='136' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='160' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='168' y='116' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='176' y='116' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='176' y='164' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>We can see that the amplitudes on the paths to value $1$ cancel out, leaving $A=0$ with probability $1$.&lt;/p>
&lt;p>What happens when we throw a random qubit into the program?&lt;/p>
&lt;h3 id="correctness-bug">Correctness Bug&lt;/h3>
&lt;p>$\texttt{INIT}(A,B)\newline\texttt{HAD}(A)\newline\texttt{CNOT}(AB)\newline\texttt{HAD}(A)$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 448 249"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 64,48 L 80,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,48 L 128,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,64 L 48,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,80 L 48,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,16 L 96,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,64 L 144,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,80 L 144,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,208 L 48,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,208 L 144,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,144 L 80,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,144 L 176,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,48 A 16,16 0 0,0 48,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,32 A 16,16 0 0,1 80,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,32 A 16,16 0 0,0 112,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,48 A 16,16 0 0,1 144,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='208' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='80' cy='208' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='96' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='112' cy='208' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='144' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='144' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='176' cy='208' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='8' y='228' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='16' y='228' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='24' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='24' y='148' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='24' y='180' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='32' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='32' y='148' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='40' y='116' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='72' y='180' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='72' y='228' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='80' y='228' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='96' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='104' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='112' y='228' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='120' y='180' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='120' y='228' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='136' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='152' y='116' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='160' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='160' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='168' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='168' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='168' y='180' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='176' y='180' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='176' y='228' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='184' y='228' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>Now that $B$ has a value, amplitude cancellations don&amp;rsquo;t work anymore. We don&amp;rsquo;t modify $A$ at all with this change. Yet, $A=0$ and $A=1$ each have probability $0.5$.&lt;/p>
&lt;p>This example is a bit contrived, but you can imagine that you might need to introduce extra temporary qubits and perform computations on them like you would temporary variables in classical computing. These types of qubits are called &lt;strong>garbage qubits&lt;/strong>.&lt;/p>
&lt;h2 id="taking-out-the-trash">Taking Out the Trash&lt;/h2>
&lt;p>So here&amp;rsquo;s the fix. Just set all the garbage qubits to $0$. That way all leaves have the same garbage qubit values and interference works as if they didn&amp;rsquo;t exist.&lt;/p>
&lt;p>The catch? Remember that all quantum computation must be reversible. Assignment isn&amp;rsquo;t reversible. We can&amp;rsquo;t actually just set qubits to $0$.&lt;/p>
&lt;h3 id="reversible-computation">Reversible Computation&lt;/h3>
&lt;p>Instead, we can perform computations with our garbage qubits, use their outcomes, and then perform &lt;em>&lt;strong>reversed computations&lt;/strong>&lt;/em> on the garbage qubits.&lt;/p>
&lt;h4 id="example-1">Example&lt;/h4>
&lt;p>$\texttt{INIT}(A,B)\newline\texttt{HAD}(A)\newline\texttt{CNOT}(AB)\newline\boxed{\texttt{CNOT}(AB)}\newline\texttt{HAD}(A)$&lt;/p>
&lt;p>Again, this example is a bit contrived. But the idea is still applicable. Once you are finished working with garbage qubits, you need to apply the inverse of the computations on those qubits so they can be reversed to $0$.&lt;/p>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Reversal example&lt;/p>
&lt;p>$
\texttt{CCNOT}(ABC)
\newline\texttt{NOT}(A)
\newline\texttt{CNOT}(AB)
\newline\quad\newline
\newline\texttt{CNOT}(AB)
\newline\texttt{NOT}(A)
\newline\texttt{CCNOT}(ABC)
$&lt;/p>
&lt;/div>
&lt;h4 id="hadamard">Hadamard&lt;/h4>
&lt;p>Recall that Hadamard performs the following mapping on qubit values.
$$\begin{align*}0&amp;amp;\xmapsto{1}1\newline0&amp;amp;\xmapsto{1}0\end{align*}$$$$\begin{align*}1&amp;amp;\xmapsto{1}0\newline1&amp;amp;\xmapsto{-1}1\newline\end{align*}$$
Notice that if we flip the arrows, the operation is the same. Thus, $\texttt{HAD}$ is its own reverse.
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>This explains why executing $\texttt{HAD}$ twice has no effect&lt;/p>
&lt;/div>
&lt;/p>
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Technically this reverse operation is called &lt;a class="link" href="https://en.wikipedia.org/wiki/Conjugate_transpose" target="_blank" rel="noopener"
>dagger&lt;/a> (will be covered in a later post).&lt;/p>
&lt;/div></description></item><item><title>II. Quantum Computing Foundations</title><link>https://kiblitz.github.io/p/quantum-computing-foundations/</link><pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/quantum-computing-foundations/</guid><description>&lt;img src="https://kiblitz.github.io/p/quantum-computing-foundations/mountain_winter.jpeg" alt="Featured image of post II. Quantum Computing Foundations" />&lt;h2 id="qubit-system-representations">Qubit System Representations&lt;/h2>
&lt;h3 id="single-qubit-recap">Single Qubit Recap&lt;/h3>
&lt;p>Previously, we saw that a single qubit can be represented as a pair of amplitudes.
$$A=\begin{bmatrix} v_0 \newline v_1 \end{bmatrix}$$
$$\text{OR}$$
$$A=v_0|0\rangle + v_1|1\rangle$$
Where $v_0$ represents $A$&amp;rsquo;s amplitude on $0$ and $v_1$ represents $A$&amp;rsquo;s amplitude on $1$.&lt;/p>
&lt;h3 id="extending-to-multi-qubit-states">Extending to Multi-Qubit States&lt;/h3>
&lt;p>In $q$-qubit systems, the representing vectors are $2^q$-dimensional where each component&amp;rsquo;s magnitude represents the amplitude on a specific value. The mapping of axis to value follows from the tensor product order.
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Suppose $AB$ had the following state.
$$AB=v_{00}|00\rangle + v_{01}|01\rangle + v_{10}|10\rangle + v_{11}|11\rangle$$
The corresponding vector would be the following.
$$AB=\begin{bmatrix} v_{00} \newline v_{01} \newline v_{10} \newline v_{11} \end{bmatrix}$$&lt;/p>
&lt;/div>
&lt;/p>
&lt;h2 id="classical-quantum-gates">Classical Quantum Gates&lt;/h2>
&lt;p>With the exception of qubit initialization, quantum computing operations are all bijective modifications on their input qubits with no outputs.
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The reason for this strict rule is for &lt;a class="link" href="https://en.wikipedia.org/wiki/Reversible_computing" target="_blank" rel="noopener"
>computational reversibility&lt;/a> which is essential for taking out the garbage (to be explained in a later post).&lt;/p>
&lt;p>This is why qubit value assignment isn&amp;rsquo;t possible. It is not possible to reverse the assigned value $o$ since every possible input $i$ maps to $o$.&lt;/p>
&lt;/div>
&lt;/p>
&lt;h3 id="definitions">Definitions&lt;/h3>
&lt;h4 id="initialize">Initialize&lt;/h4>
&lt;p>$\texttt{INIT}(A)$&lt;/p>
&lt;p>Creates a new qubit $A$ with full amplitude on value $0$.&lt;/p>
&lt;p>$$\begin{bmatrix} 1 \newline 0 \end{bmatrix}$$&lt;/p>
&lt;h4 id="not">Not&lt;/h4>
&lt;p>$\texttt{NOT}(A)$&lt;/p>
&lt;p>Negates $A$. In other words, adds $1$ to qubit $A$ ($\bmod\thickspace2$).&lt;/p>
&lt;p>$$\begin{bmatrix} 0 &amp;amp; 1 \newline 1 &amp;amp; 0 \end{bmatrix}$$&lt;/p>
&lt;h4 id="controlled-not">Controlled Not&lt;/h4>
&lt;p>$\texttt{CNOT}(AB)$&lt;/p>
&lt;p>If $A=1$ then negates $B$. In other words, adds $A$ to qubit $B$ ($\bmod\thickspace2$).&lt;/p>
&lt;p>$$\begin{bmatrix} 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \newline 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 \newline 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 \newline 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0\end{bmatrix}$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$$
\begin{array}{c|c}
AB &amp;amp; \texttt{CNOT}(AB) \newline
00 &amp;amp; 00 \newline
01 &amp;amp; 01 \newline
\boxed{10} &amp;amp; 11 \newline
\boxed{11} &amp;amp; 10
\end{array}
$$&lt;/p>
&lt;/div>
&lt;h4 id="controlled-controlled-not">Controlled Controlled Not&lt;/h4>
&lt;p>$\texttt{CCNOT}(ABC)$&lt;/p>
&lt;p>If $A=1$ and $B=1$ then negates $C$. In other words, adds $A\And B$ to qubit $C$ ($\bmod\thickspace 2$).&lt;/p>
&lt;p>$$\begin{bmatrix}
1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \newline
0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \newline
0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \newline
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \newline
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \newline
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 \newline
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 \newline
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0
\end{bmatrix}$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$$
\begin{array}{c|c}
ABC &amp;amp; \texttt{CCNOT}(ABC) \newline
000 &amp;amp; 000 \newline
001 &amp;amp; 001 \newline
010 &amp;amp; 010 \newline
011 &amp;amp; 011 \newline
100 &amp;amp; 100 \newline
101 &amp;amp; 101 \newline
\boxed{110} &amp;amp; 111 \newline
\boxed{111} &amp;amp; 110
\end{array}
$$&lt;/p>
&lt;/div>
&lt;h3 id="syntactic-sugar">Syntactic Sugar&lt;/h3>
&lt;p>Sometimes we will define/use a subroutine $F(X_1X_2&amp;hellip;X_n)$ that outputs a value which we later execute in some pseudocode fashion (i.e. $\text{If }F(AB)\text{ Then}&amp;hellip;$). But technically returning a value isn&amp;rsquo;t allowed.&lt;/p>
&lt;p>This is just syntactic sugar for creating a temporary qubit $T$ and applying $F$&amp;rsquo;s logic to modify $T$ as the output.
$$\texttt{INIT}(T)\newline &amp;hellip;\newline \text{// Apply $F$ logic onto $T$}\newline &amp;hellip; \newline\text{If }T\text{ Then}&amp;hellip;$$&lt;/p>
&lt;p>Also note that since quantum computation must be reversible, branching must be done intelligently.
For example, $\text{If}$ branches are syntactic sugar for controlled operations ($\texttt{CTRUEBRANCH}(T&amp;hellip;)$).&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Example for negation of adding $\texttt{CCNOT}$ to input.
$$
\begin{array}{c|c}
\text{compiled} &amp;amp; \text{syntactic sugar} \newline\newline
\texttt{INIT}(A) &amp;amp; \texttt{INIT}(A) \newline
\texttt{INIT}(B) &amp;amp; \texttt{INIT}(B) \newline
\texttt{INIT}(C) &amp;amp; \texttt{INIT}(C) \newline
\texttt{INIT}(D) &amp;amp; \texttt{INIT}(D) \newline
\texttt{INIT}(T_1) &amp;amp; \newline
\texttt{INIT}(T_2) &amp;amp; \newline
&amp;amp; \texttt{def F}(X_1X_2)\lbrace \newline
&amp;amp; \texttt{INIT}(T) \newline
&amp;amp; \texttt{NOT}(X_1) \newline
&amp;amp; \texttt{NOT}(X_2) \newline
&amp;amp; \texttt{CCNOT}(X_1X_2T) \newline
&amp;amp; \texttt{NOT}(X_1) \newline
&amp;amp; \texttt{NOT}(X_2) \newline
&amp;amp; \texttt{Output }T \newline
&amp;amp; \rbrace\quad\quad\quad\quad\quad\quad \newline
&amp;amp; \newline
\texttt{NOT}(A) &amp;amp; \texttt{If F}(AB)\texttt{ Then}\lbrace \newline
\texttt{NOT}(B) &amp;amp; \newline
\texttt{CCNOT}(ABT_1) &amp;amp; \newline
\texttt{NOT}(A) &amp;amp; \newline
\texttt{NOT}(B) &amp;amp; \newline
\texttt{CNOT}(T_1A)&amp;amp; \texttt{NOT}(A) \newline
\texttt{CNOT}(T_1B)&amp;amp; \texttt{NOT}(B) \newline
&amp;amp; \rbrace\quad\quad\quad\quad\quad\quad\quad \newline
&amp;amp; \newline
\texttt{NOT}(C) &amp;amp; \texttt{If F}(CD)\texttt{ Then}\lbrace \newline
\texttt{NOT}(D) &amp;amp; \newline
\texttt{CCNOT}(CDT_2) &amp;amp; \newline
\texttt{NOT}(C) &amp;amp; \newline
\texttt{NOT}(D) &amp;amp; \newline
\texttt{CCNOT}(T_2CD)&amp;amp; \texttt{CNOT}(CD) \newline
&amp;amp; \rbrace\quad\quad\quad\quad\quad\quad\quad \newline
\end{array}
$$&lt;/p>
&lt;/div></description></item><item><title>I. The Hadamard Gate</title><link>https://kiblitz.github.io/p/the-hadamard-gate/</link><pubDate>Wed, 07 Jun 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/the-hadamard-gate/</guid><description>&lt;img src="https://kiblitz.github.io/p/the-hadamard-gate/mountain_cross.jpeg" alt="Featured image of post I. The Hadamard Gate" />&lt;h2 id="probabilistic-computing-analogy">Probabilistic Computing Analogy&lt;/h2>
&lt;p>The first computing models were entirely deterministic. The idea of probabilistic computing brought about a single new instruction.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 496 121"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 136,16 L 192,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,32 L 120,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,48 L 24,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,64 L 120,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,80 L 192,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,32 L 24,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,48 L 24,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,32 L 120,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,48 L 136,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,48 L 136,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='40' y='52' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='48' y='52' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='56' y='52' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='64' y='52' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='80' y='52' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='88' y='52' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='96' y='52' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='104' y='52' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='152' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='152' y='100' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='160' y='4' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='160' y='100' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='168' y='4' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='168' y='100' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>It provided computers with greater functionality and the ability to solve problems in novel ways (randomized/approximation algorithms) as well as introduce a new space of problems not possible before (i.e. &lt;a class="link" href="https://en.wikipedia.org/wiki/Interactive_proof_system" target="_blank" rel="noopener"
>interactive proof systems&lt;/a>).&lt;/p>
&lt;p>Quantum computing does something similar. Enter the Hadamard gate.
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Technically more but for now just the Hadamard gate&lt;/p>
&lt;/div>
&lt;/p>
&lt;h2 id="hadamard">Hadamard&lt;/h2>
&lt;p>The Hadamard gate is a modification operation on a single qubit.
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>We will go over what a qubit is later. For now, it is sufficient to think of a qubit as a bit&lt;/p>
&lt;/div>
&lt;/p>
&lt;h3 id="what-does-it-do">What does it do?&lt;/h3>
&lt;h4 id="testing">Testing&lt;/h4>
&lt;p>What happens if we execute the following?
&lt;style>
.alert {
padding: 20px;
background-color: #2196F3;
color: white;
opacity: 1;
transition: opacity 0.6s;
margin-bottom: 15px;
}
.alert.success {
background-color: #04AA6D;
}
.alert.danger {
background-color: #f44336;
}
.alert.warning {
background-color: #ff9800;
}
.closebtn {
margin-left: 15px;
color: white;
font-weight: bold;
float: right;
font-size: 22px;
line-height: 20px;
cursor: pointer;
transition: 0.3s;
}
.closebtn:hover {
color: black;
}
&lt;/style>
&lt;div class="alert success">
&lt;span class="closebtn" onclick="var div=this.parentElement; div.style.opacity='0';setTimeout(function(){ div.style.display = 'none'; }, 600);">&amp;times;&lt;/span>
Refresh the page to see!
&lt;/div>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">$$\texttt{INIT}(A)\newline\texttt{HAD}(A)$$&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">
&lt;p id="demo1">&lt;/p>
&lt;script>
document.getElementById("demo1").innerHTML = "$A = " + Math.round(Math.random()) + "$";
&lt;/script>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Seems like a coin flip. What about if $A=1$?&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">$$\texttt{INIT}(A)\newline\texttt{NOT}(A)\newline\texttt{HAD}(A)$$&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">
&lt;p id="demo2">&lt;/p>
&lt;script>
document.getElementById("demo2").innerHTML = "$A = " + Math.round(Math.random()) + "$";
&lt;/script>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Also a coin flip. Is quantum computing really just a computer that can coin flip?&lt;/p>
&lt;hr>
&lt;p>Ok let&amp;rsquo;s see what happens when we chain $\texttt{HAD}$ operations.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>$$\texttt{INIT}(A)\newline\texttt{HAD}(A)\newline\texttt{HAD}(A)$$&lt;/th>
&lt;th>$$\texttt{INIT}(A)\newline\texttt{NOT}(A)\newline\texttt{HAD}(A)\newline\texttt{HAD}(A)$$&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>$$A=0$$&lt;/td>
&lt;td>$$A=1$$&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>???&lt;/p>
&lt;h4 id="the-qubit">The Qubit&lt;/h4>
&lt;p>Before we can explain what&amp;rsquo;s going on, let&amp;rsquo;s revisit the qubit. It looks like a bit and acts like a bit with non-quantum instructions. But is it really a bit?&lt;/p>
&lt;p>In reality, a qubit can be defined by a pair of &lt;strong>amplitudes&lt;/strong>. Amplitudes in quantum computing are like what probabilities are in probabilistic computing. After a coin flip, the random bit has a $0.5$ probability of being $0$ and a $0.5$ probability of being $1$. The Hadamard gate has a similar effect except with the qubit&amp;rsquo;s amplitudes.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Quantum pairs well with linear algebra. A qubit can be represented as a 2-dimensional vector where its components are the qubit&amp;rsquo;s amplitudes. In the example below, qubit $A$ has all of its amplitude on the $0$ state. $$A=\begin{bmatrix}1 \newline 0 \end{bmatrix}$$In quantum, we typically use &lt;a class="link" href="https://en.wikipedia.org/wiki/Bra%E2%80%93ket_notation" target="_blank" rel="noopener"
>Bra-ket notation&lt;/a>.$$A=1|0\rangle + 0|1\rangle = |0\rangle$$&lt;/p>
&lt;/div>
&lt;p>So how does a qubit resolve its amplitude state? A qubit with a non-trivial state is said to be in &lt;a class="link" href="https://en.wikipedia.org/wiki/Quantum_superposition" target="_blank" rel="noopener"
>superposition&lt;/a>. The probability that a qubit measures to a value is its amplitude on that value &lt;em>&lt;strong>squared&lt;/strong>&lt;/em>.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Suppose $A=\frac{\sqrt{2}}{2}|0\rangle + \frac{\sqrt{2}}{2}|1\rangle$. Then, $A$ has a $0.5$ probability to measure with value $0$ and likewise $1$. Observe that the sum of the squares of amplitudes must sum to $1$. Because of this strict ratio property, we can represent qubits with their unnormalized state.$$A=|0\rangle + |1\rangle$$&lt;/p>
&lt;/div>
&lt;p>So how does it offer any more than probabilistic computing?&lt;/p>
&lt;h4 id="hadamard-definition">Hadamard Definition&lt;/h4>
&lt;p>In simple terms, the Hadamard gate has the following value mappings (amplitudes on arrows).
$$\begin{align*}0&amp;amp;\xmapsto{\frac{\sqrt{2}}{2}}1\newline0&amp;amp;\xmapsto{\frac{\sqrt{2}}{2}}0\end{align*}$$$$\begin{align*}1&amp;amp;\xmapsto{\frac{\sqrt{2}}{2}}0\newline1&amp;amp;\xmapsto{-\frac{\sqrt{2}}{2}}1\newline\end{align*}$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>It may be easier to think about the mappings in their unnormalized amplitudes$$\begin{align*}0&amp;amp;\xmapsto{1}1\newline0&amp;amp;\xmapsto{1}0\end{align*}$$$$\begin{align*}1&amp;amp;\xmapsto{1}0\newline1&amp;amp;\xmapsto{-1}1\newline\end{align*}$$&lt;/p>
&lt;/div>
&lt;p>The Hadamard gate can be represented by the following matrix.$$H=\frac{\sqrt{2}}{2}\begin{bmatrix}1 &amp;amp; 1 \newline 1 &amp;amp; -1\end{bmatrix}$$&lt;/p>
&lt;p>Represented as a pair of amplitude trees based on starting state:&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 488 105"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,64 L 40,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,64 L 136,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 40,16 L 64,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,16 L 160,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='40' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='64' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='112' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='136' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='160' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='16' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='40' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='112' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='120' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='136' y='4' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='152' y='36' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='160' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='160' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The root of the tree represents the starting state and the leaves the end state. The edges along any path represent the amplitudes (unnormalized in this example).&lt;/p>
&lt;/div>
&lt;p>The interesting capability quantum offers over probabilistic computing is that qubits can have &lt;em>negative amplitudes&lt;/em>.&lt;/p>
&lt;h4 id="examples">Examples&lt;/h4>
&lt;p>$\texttt{INIT}(A)\newline\texttt{HAD}(A)$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 488 105"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,64 L 40,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 40,16 L 64,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='40' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='64' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='16' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='40' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>$\mathbb{P}[A=0]=0.5\newline\mathbb{P}[A=1]=0.5$&lt;/p>
&lt;hr>
&lt;p>$\texttt{INIT}(A)\newline\texttt{NOT}(A)\newline\texttt{HAD}(A)$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 488 169"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 48,16 L 48,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,128 L 48,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,64 L 80,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='80' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='16' y='148' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='24' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='40' y='52' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='64' y='68' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='72' y='100' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='80' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='80' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>$\mathbb{P}[A=0]=0.5\newline\mathbb{P}[A=1]=0.5$&lt;/p>
&lt;hr>
&lt;p>This is consistent with our first two testing results where $\texttt{HAD}$ acted like a coin flip.&lt;/p>
&lt;p>$\texttt{INIT}(A)\newline\texttt{HAD}(A)\newline\texttt{HAD}(A)$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 496 169"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 56,48 L 64,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,48 L 104,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 40,64 L 40,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,16 L 80,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,64 L 120,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,128 L 40,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,128 L 120,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 40,80 L 64,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,80 L 144,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 56,48 A 16,16 0 0,0 40,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,32 A 16,16 0 0,1 64,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,32 A 16,16 0 0,0 96,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,48 A 16,16 0 0,1 120,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='40' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='64' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='80' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='96' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='120' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='144' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='16' y='148' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='24' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='32' y='68' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='56' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='80' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='96' y='148' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='104' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='112' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='128' y='68' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='136' y='100' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='144' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='144' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>$\mathbb{A}[A=0]=1\times 1 + 1\times 1 = 2\newline \mathbb{A}[A=1]=1\times 1 + 1\times (-1) = 0$
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Unnormalized&lt;/p>
&lt;/div>
$\mathbb{P}[A=0]=1$&lt;/p>
&lt;p>Ok, so this explains our last testing result. Essentially, there are two paths resulting in $A=1$ whose amplitudes cancelled each other out. This is the unique factor in quantum computing.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>This is called &lt;a class="link" href="https://en.wikipedia.org/wiki/Wave_interference" target="_blank" rel="noopener"
>destructive interference&lt;/a>&lt;/p>
&lt;/div>
&lt;h2 id="concluding-remarks">Concluding Remarks&lt;/h2>
&lt;h3 id="quantum-computing-advantage">Quantum Computing Advantage&lt;/h3>
&lt;p>Notice that the state of qubit $A$ only resolves at the end. If we were to only look at the right subtree, we would not know that an amplitude cancellation occured. In other words, to understand the behavior of a qubit we need knowledge on the entire amplitude tree. This is why &lt;em>simulating a quantum computer using a classical computer has &lt;strong>exponential&lt;/strong> complexity&lt;/em>.&lt;/p>
&lt;h3 id="resolving-qubit-values">Resolving Qubit Values&lt;/h3>
&lt;p>At what point do the amplitude calculations resolve to probabilities? In other words, at what point is the value of $A$ known? In our examples, it seems to resolve at the end of the program. In actuality, a qubit is known when it is &lt;a class="link" href="https://en.wikipedia.org/wiki/Measurement_in_quantum_mechanics" target="_blank" rel="noopener"
>measured&lt;/a>.&lt;/p>
&lt;p>In our last example, if we had measured qubit $A$ at every step, then the value of $A$ at the end is equally $0$ or $1$ at every step (essentially just a series of coin flips).&lt;/p></description></item></channel></rss>