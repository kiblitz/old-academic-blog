<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>glee</title><link>https://kiblitz.github.io/</link><description>Recent content on glee</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 21 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kiblitz.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Helix</title><link>https://kiblitz.github.io/d/helix/</link><pubDate>Fri, 21 Jul 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/d/helix/</guid><description>
&lt;style>
html, body {
margin: 0;
padding: 0;
top: 0.5px;
bottom: 0.5px;
width: 100%;
height: 100%;
}
canvas {
width: 100%;
height: 100%;
}
&lt;/style>
&lt;html>
&lt;body onload="init();" onresize="updateDimensions();">
&lt;canvas id="canvas">&lt;/canvas>
&lt;/body>
&lt;/html>
&lt;script>
const LINKS = 10;
function init() {
window.canvas = document.getElementById("canvas");
window.ctx = window.canvas.getContext("2d");
window.ctx.webkitImageSmoothingEnabled = true;
window.color = 'aqua';
const urlParams = new URLSearchParams(window.location.search);
if (urlParams.has('color')) {
window.color = urlParams.get('color');
}
updateDimensions();
}
function updateDimensions() {
window.width = window.canvas.getBoundingClientRect().width;
window.height = window.width / 2;
window.canvas.width = window.width;
window.canvas.height = window.height;
window.helixHeight = window.height * 5 / 6;
window.helixOffsetY = (window.height - window.helixHeight) / 2;
window.helixWidth = window.helixHeight / 2;
window.helixOffsetX = window.width / 2 - window.helixWidth / 2;
window.ballSize = window.helixHeight / LINKS / 4;
window.t = 0;
redraw();
}
function redraw() {
window.ctx.clearRect(0, 0, window.canvas.width, window.canvas.height);
window.ctx.fillStyle = window.color;
window.ctx.strokeStyle = 'white';
for (let i = 0; i &lt; LINKS; i++) {
let delta = i * 3 / 5;
let y = window.helixOffsetY + (i * 4 + 2) * window.ballSize;
let x1 = window.width / 2 - Math.cos(t + delta) * window.helixWidth / 2;
let x2 = window.width / 2 + Math.cos(t + delta) * window.helixWidth / 2;
let size1 = window.ballSize - Math.sin(t) * window.ballSize / 3;
let size2 = window.ballSize + Math.sin(t) * window.ballSize / 3;
window.ctx.beginPath();
window.ctx.moveTo(x1, y);
window.ctx.lineTo(x2, y);
window.ctx.stroke()
drawBall(x1, y, size1);
drawBall(x2, y, size2);
}
}
function drawBall(x, y, size) {
window.ctx.arc(x, y, size, 0, 2 * Math.PI);
window.ctx.closePath();
window.ctx.fill();
}
function update() {
window.t+=0.02;
redraw()
}
setInterval(update, 10);
&lt;/script></description></item><item><title>Convex Hull</title><link>https://kiblitz.github.io/p/convex-hull/</link><pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/convex-hull/</guid><description>&lt;img src="https://kiblitz.github.io/p/convex-hull/metal.jpeg" alt="Featured image of post Convex Hull" />
&lt;style>
html, body {
margin: 0;
padding: 0;
top: 0.5px;
bottom: 0.5px;
width: 100%;
height: 100%;
}
canvas {
width: 100%;
height: 100%;
}
&lt;/style>
&lt;html>
&lt;body onload="init();" onresize="updateDimensions();">
&lt;canvas id="canvas">&lt;/canvas>
&lt;/body>
&lt;/html>
&lt;script>
const NUM_EX = 5;
function init() {
window.canvas = document.getElementById("canvas");
window.ex = Array.from({length: NUM_EX}, (_, i) => document.getElementById("ex" + i));
window.ctx = window.canvas.getContext("2d");
window.pts = Array.from({length: 10}, () => [Math.random(), Math.random()]);
window.canvas.addEventListener("mousemove", onMouseMove, true);
window.canvas.addEventListener("mouseup", onMouseUp, true);
window.canvas.addEventListener("mousedown", onMouseDown, true);
window.canvas.addEventListener("touchmove", onMouseMove, true);
window.canvas.addEventListener("touchend", onMouseUp, true);
window.canvas.addEventListener("touchstart", onMouseDown, true);
window.canvas.addEventListener("mouseleave", onMouseLeave, true);
window.canvas.addEventListener("mouseenter", onMouseEnter, true);
window.mouseX = 0;
window.mouseY = 0;
window.mouseDown = false;
window.mousePt = null;
window.mouseInFrame = false;
window.mouseLeeway = 1;
updateConvexHull();
updateDimensions();
}
function onMouseMove() {
window.mouseInFrame = true;
var mouseX, mouseY;
if (event.targetTouches &amp;&amp; event.changedTouches) {
mouseX = (event.targetTouches[0] ? event.targetTouches[0].pageX : event.changedTouches[event.changedTouches.length-1].pageX) - window.canvas.getBoundingClientRect().left;
mouseY = (event.targetTouches[0] ? event.targetTouches[0].clientY : event.changedTouches[event.changedTouches.length-1].clientY) - window.canvas.getBoundingClientRect().top;
window.mouseLeeway = 8;
} else {
mouseX = window.event.clientX - window.canvas.getBoundingClientRect().left;
mouseY = window.event.clientY - window.canvas.getBoundingClientRect().top;
window.mouseLeeway = 1;
}
if (window.mousePt !== null) {
let scaledDiff = windowUnscalePt([mouseX - window.mouseX, mouseY - window.mouseY]);
window.pts[window.mousePt][0] += scaledDiff[0];
window.pts[window.mousePt][1] += scaledDiff[1];
updateConvexHull();
}
window.mouseX = mouseX;
window.mouseY = mouseY;
redraw();
}
function onMouseDown(e) {
onMouseMove();
e.preventDefault();
window.mouseDown = true;
let minDist = Infinity;
window.pts.forEach((pt, i) => {
let scaledPt = windowScalePt(pt);
let dist = Math.pow(window.mouseX - scaledPt[0], 2) + Math.pow(window.mouseY - scaledPt[1], 2);
if (dist &lt;= window.mouseLeeway * Math.pow(window.dot_dim, 2) &amp;&amp; dist &lt;= minDist) {
window.mousePt = i;
minDist = dist;
}
});
redraw();
}
function onMouseUp() {
window.mouseDown = false;
if (window.mousePt !== null) {
let x = window.pts[window.mousePt][0];
let y = window.pts[window.mousePt][1];
window.pts[window.mousePt][0] = Math.min(Math.max(x, 0), 1);
window.pts[window.mousePt][1] = Math.min(Math.max(y, 0), 1);
window.mousePt = null;
}
redraw();
}
function onMouseLeave() {
window.mouseInFrame = false;
onMouseUp();
}
function onMouseEnter() {
window.mouseInFrame = true;
}
function redraw() {
window.ctx.clearRect(0, 0, window.canvas.width, window.canvas.height);
window.ctx.fillStyle = 'white';
window.ctx.strokeStyle = 'white';
window.ctx.lineWidth = window.mouseInFrame ? 2 : 1;
window.ctx.strokeRect(0, 0, window.canvas.width, window.canvas.height);
window.ctx.lineWidth = 1;
window.pts.forEach(pt => {
window.ctx.beginPath();
let scaledPt = windowScalePt(pt);
window.ctx.arc(scaledPt[0], scaledPt[1], window.dot_dim, 0, 2 * Math.PI);
window.ctx.stroke();
if (Math.pow(window.mouseX - scaledPt[0], 2)
+ Math.pow(window.mouseY - scaledPt[1], 2)
&lt;= window.mouseLeeway * Math.pow(window.dot_dim, 2)) {
window.ctx.fill();
}
});
window.ctx.beginPath();
let scaledStart = windowScalePt(window.ch[0]);
window.ctx.moveTo(scaledStart[0], scaledStart[1]);
for (let i = 1; i &lt; window.ch.length; i++) {
let scaledStart = windowScalePt(window.ch[i]);
window.ctx.lineTo(scaledStart[0], scaledStart[1]);
}
window.ctx.closePath();
window.ctx.fillStyle = "rgba(255, 0, 0, 0.2)";
window.ctx.fill();
for (let i = 0; i &lt; NUM_EX; i++) {
window["ex" + i + "redraw"]();
}
}
function updateDimensions() {
window.width = window.canvas.getBoundingClientRect().width;
window.height = window.width / 3;
window.canvas.width = window.width;
window.canvas.height = window.height;
window.dot_dim = window.width > 600 ? 6 : 5;
for (let i = 0; i &lt; NUM_EX; i++) {
window.ex[i].width = window.width;
window.ex[i].height = window.height;
}
redraw();
}
function updateConvexHull() {
let min_elem = window.pts.reduce(
(min, p) => p[0] &lt; min[0] ? p
: (p[0] == min[0] &amp;&amp; p[1] &lt; min[1] ? p
: min), window.pts[0]
);
let pts = window.pts.filter(pt => pt !== min_elem)
pts.sort((a, b) => {
a_slope = (a[1] - min_elem[1]) / (a[0] - min_elem[0]);
b_slope = (b[1] - min_elem[1]) / (b[0] - min_elem[0]);
if (isNaN(a_slope)) {
a_slope = Math.sign(a[1] - min_elem[1]) * Infinity;
}
if (isNaN(b_slope)) {
b_slope = Math.sign(b[1] - min_elem[1]) * Infinity;
}
if (a_slope === b_slope) {
return 0;
}
return a_slope - b_slope;
});
let ch = [min_elem];
pts.forEach(pt => {
if (ch.length &lt; 2) {
ch.push(pt);
return;
}
while (ch.length > 1) {
let a = [
ch[ch.length - 1][0] - ch[ch.length - 2][0],
ch[ch.length - 1][1] - ch[ch.length - 2][1]
];
let b = [
pt[0] - ch[ch.length - 1][0],
pt[1] - ch[ch.length - 1][1]
];
let det = a[0] * b[1] - b[0] * a[1];
if (det &lt; 0) {
ch.pop();
} else {
break;
}
};
ch.push(pt);
});
window.ch = ch;
}
function windowScalePt(pt) {
return [pt[0] * window.canvas.width, pt[1] * window.canvas.height];
}
function windowUnscalePt(pt) {
return [pt[0] / window.canvas.width, pt[1] / window.canvas.height];
}
&lt;/script>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode tip" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#tip-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Drag the points!&lt;/p>
&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;blockquote>
&lt;p>Given a set of points, what is the smallest convex shape that encloses all of them? What is the boundary of this shape?&lt;/p>
&lt;/blockquote>
&lt;p>This is the convex hull problem.&lt;/p>
&lt;h2 id="2d-convex-hull">2D Convex Hull&lt;/h2>
&lt;h3 id="observations">Observations&lt;/h3>
&lt;p>Notice that given a convex hull, all points lie on the same side of every edge.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 248 169"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 40,0 L 200,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 8,144 L 208,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,80 L 0,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,64 L 232,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 8,64 L 40,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,144 L 224,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,16 L 232,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='8.000000,128.000000 -4.000000,122.400002 -4.000000,133.600006' fill='currentColor' transform='rotate(90.000000, 0.000000, 128.000000)'>&lt;/polygon>
&lt;polygon points='20.000000,64.000000 8.000000,58.400002 8.000000,69.599998' fill='currentColor' transform='rotate(120.000000, 8.000000, 64.000000)'>&lt;/polygon>
&lt;polygon points='8.000000,144.000000 -4.000000,138.399994 -4.000000,149.600006' fill='currentColor' transform='rotate(180.000000, 8.000000, 144.000000)'>&lt;/polygon>
&lt;polygon points='200.000000,0.000000 188.000000,-5.600000 188.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 200.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='228.000000,16.000000 216.000000,10.400000 216.000000,21.600000' fill='currentColor' transform='rotate(240.000000, 216.000000, 16.000000)'>&lt;/polygon>
&lt;polygon points='236.000000,112.000000 224.000000,106.400002 224.000000,117.599998' fill='currentColor' transform='rotate(300.000000, 224.000000, 112.000000)'>&lt;/polygon>
&lt;polygon points='240.000000,64.000000 228.000000,58.400002 228.000000,69.599998' fill='currentColor' transform='rotate(270.000000, 232.000000, 64.000000)'>&lt;/polygon>
&lt;circle cx='0' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='0' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='40' cy='0' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='112' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='80' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='112' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='136' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='160' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='192' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='208' cy='0' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='208' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='232' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='232' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>Observe that for every edge, all points lie on the same side (right for top and bottom; left for all other).&lt;/p>&lt;/p>
&lt;/div>
&lt;h3 id="idea-1-add-edges-with-all-points-on-the-same-side">Idea 1: Add Edges with All Points on the same side&lt;/h3>
&lt;h4 id="naive-algorithm">Naive Algorithm&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{bool allPointsOnSameSideOf($e$):}\newline
&amp;amp;\texttt{\qquad for all other points $p\not\in e$:}\newline
&amp;amp;\texttt{\qquad \qquad if any $p$ on different side of $e$:}\newline
&amp;amp;\texttt{\qquad \qquad \qquad return false}\newline
&amp;amp;\texttt{\qquad return true}\newline
&amp;amp;\newline
&amp;amp;\texttt{for all points $p1$:}\newline
&amp;amp;\texttt{\qquad for all other points $p2$:}\newline
&amp;amp;\texttt{\qquad \qquad consider edge $e$ = ($p1$, $p2$)}\newline
&amp;amp;\texttt{\qquad \qquad if allPointsOnSameSideOf($e$):}\newline
&amp;amp;\texttt{\qquad \qquad \qquad add $e$ to convex hull}\newline
\end{align*}
$$&lt;/p>
&lt;p>Checking if all points are on the same side is a linear ($\mathcal{O}(n)$) operation. Iterating through all possible edges is a quadratic operation ($\mathcal{O}(n^2)$). Thus, this algorithm has cubic time complexity ($\mathcal{O}(n^3)$).&lt;/p>
&lt;h4 id="observation">Observation&lt;/h4>
&lt;p>We are checking all possible edges, but really edges are contiguous on a hull ($A\rightarrow B\rightarrow C\rightarrow A$ like a chain).&lt;/p>
&lt;p>But what about the first edge? Here&amp;rsquo;s another observation: the convex hull must contain the leftmost ($\min_x$) point!&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>If there are multiple leftmost points, then they must all be on the convex hull. Otherwise, that point would not be contained in the convex hull.&lt;/p>
&lt;/div>
&lt;p>With this chain in mind, we shouldn&amp;rsquo;t be iterating over all points for the next: in a chain, the next point should be &amp;ldquo;close&amp;rdquo; to the current pivot point. Could we precompute with a sort in some way?&lt;/p>
&lt;h3 id="graham-scan">Graham Scan&lt;/h3>
&lt;h4 id="algorithm">Algorithm&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let hull = [$\min_x$]}\newline
&amp;amp;\texttt{sort all points by $\theta$ with $\min_x$}\newline
&amp;amp;\newline
&amp;amp;\texttt{for all points $p\neq\min_x$:}\newline
&amp;amp;\texttt{\qquad add $p$ to hull}\newline
&amp;amp;\texttt{\qquad while hull (with $p$) is no longer convex:}\newline
&amp;amp;\texttt{\qquad \qquad pop hull}\newline
\end{align*}
$$
Convex meaning that the hull only &amp;ldquo;leans&amp;rdquo; in one direction (always curving left OR always curving right). This can easily be checked by verifying that the current point $p$ is on the same side of the previous edge (or vacuously true if there is no previous edge).&lt;/p>
&lt;h4 id="example">Example&lt;/h4>
&lt;/style>
&lt;html>
&lt;body onload="init();" onresize="updateDimensions();">
&lt;canvas id="ex0">&lt;/canvas>
&lt;/body>
&lt;/html>
&lt;script>
function ex0redraw() {
let canvas = window.ex[0];
let ctx = canvas.getContext("2d");
ctx.fillStyle = 'white';
ctx.strokeStyle = 'white';
ctx.clearRect(0, 0, window.canvas.width, window.canvas.height);
ctx.strokeRect(0, 0, window.canvas.width, window.canvas.height);
let pts = [
[0.09349743488591489, 0.586267349659145],
[0.40060336938038543, 0.8863856711116301],
[0.7331262185197241, 0.851984423840718],
[0.41631943954503126, 0.5888341099600415],
[0.31631943954503126, 0.5288341099600415],
[0.5151129707167391, 0.2959397175037858],
[0.4494122161398628, 0.09309081188615609],
[0.13235547336082165, 0.3696404944957633]
];
ctx.font = (4 * window.dot_dim) + "px bold serif";
pts.forEach((pt, i) => {
ctx.beginPath();
let scaledPt = windowScalePt(pt);
ctx.arc(scaledPt[0], scaledPt[1], window.dot_dim, 0, 2 * Math.PI);
ctx.fillStyle = 'black';
if (i === 0) {
ctx.fillStyle = 'red';
}
ctx.fill();
ctx.fillStyle = 'white';
if (i !== 0) {
ctx.fillText(i, scaledPt[0], scaledPt[1])
}
});
let hull = [
pts[0]
];
ctx.beginPath();
let scaledStart = windowScalePt(hull[0]);
ctx.moveTo(scaledStart[0], scaledStart[1]);
for (let i = 1; i &lt; hull.length; i++) {
let scaledStart = windowScalePt(hull[i]);
ctx.lineTo(scaledStart[0], scaledStart[1]);
}
ctx.closePath();
ctx.stroke();
}
&lt;/script>
&lt;p>Here, the leftmost point is highlighted in red. We sort the other points by their angle with this point (ordered numbering).&lt;/p>
&lt;/style>
&lt;html>
&lt;body onload="init();" onresize="updateDimensions();">
&lt;canvas id="ex1">&lt;/canvas>
&lt;/body>
&lt;/html>
&lt;script>
function ex1redraw() {
let canvas = window.ex[1];
let ctx = canvas.getContext("2d");
ctx.fillStyle = 'white';
ctx.strokeStyle = 'white';
ctx.clearRect(0, 0, window.canvas.width, window.canvas.height);
ctx.strokeRect(0, 0, window.canvas.width, window.canvas.height);
let pts = [
[0.09349743488591489, 0.586267349659145],
[0.40060336938038543, 0.8863856711116301],
[0.7331262185197241, 0.851984423840718],
[0.41631943954503126, 0.5888341099600415],
[0.31631943954503126, 0.5288341099600415],
[0.5151129707167391, 0.2959397175037858],
[0.4494122161398628, 0.09309081188615609],
[0.13235547336082165, 0.3696404944957633]
];
let hull = [
pts[0],
pts[1],
pts[2],
pts[3],
pts[4]
];
ctx.beginPath();
let scaledStart = windowScalePt(hull[0]);
ctx.moveTo(scaledStart[0], scaledStart[1]);
for (let i = 1; i &lt; hull.length; i++) {
let scaledStart = windowScalePt(hull[i]);
ctx.lineTo(scaledStart[0], scaledStart[1]);
}
ctx.stroke();
pts.forEach((pt, i) => {
ctx.beginPath();
let scaledPt = windowScalePt(pt);
ctx.arc(scaledPt[0], scaledPt[1], window.dot_dim, 0, 2 * Math.PI);
ctx.fillStyle = 'black';
if (i === 4) {
ctx.fillStyle = 'red';
}
ctx.fill();
ctx.fillStyle = 'white';
});
}
&lt;/script>
&lt;p>After a few iterations, our hull is still convex (always left leaning).&lt;/p>
&lt;/style>
&lt;html>
&lt;body onload="init();" onresize="updateDimensions();">
&lt;canvas id="ex2">&lt;/canvas>
&lt;/body>
&lt;/html>
&lt;script>
function ex2redraw() {
let canvas = window.ex[2];
let ctx = canvas.getContext("2d");
ctx.fillStyle = 'white';
ctx.strokeStyle = 'white';
ctx.clearRect(0, 0, window.canvas.width, window.canvas.height);
ctx.strokeRect(0, 0, window.canvas.width, window.canvas.height);
let pts = [
[0.09349743488591489, 0.586267349659145],
[0.40060336938038543, 0.8863856711116301],
[0.7331262185197241, 0.851984423840718],
[0.41631943954503126, 0.5888341099600415],
[0.31631943954503126, 0.5288341099600415],
[0.5151129707167391, 0.2959397175037858],
[0.4494122161398628, 0.09309081188615609],
[0.13235547336082165, 0.3696404944957633]
];
let hull = [
pts[0],
pts[1],
pts[2],
pts[3],
pts[4],
pts[5]
];
ctx.beginPath();
let scaledStart = windowScalePt(hull[0]);
ctx.moveTo(scaledStart[0], scaledStart[1]);
for (let i = 1; i &lt; hull.length; i++) {
let scaledStart = windowScalePt(hull[i]);
ctx.lineTo(scaledStart[0], scaledStart[1]);
}
ctx.stroke();
pts.forEach((pt, i) => {
ctx.beginPath();
let scaledPt = windowScalePt(pt);
ctx.arc(scaledPt[0], scaledPt[1], window.dot_dim, 0, 2 * Math.PI);
ctx.fillStyle = 'black';
if (i === 5) {
ctx.fillStyle = 'red';
}
ctx.fill();
ctx.fillStyle = 'white';
});
}
&lt;/script>
&lt;p>Now, the hull&amp;rsquo;s convexitivity breaks.&lt;/p>
&lt;/style>
&lt;html>
&lt;body onload="init();" onresize="updateDimensions();">
&lt;canvas id="ex3">&lt;/canvas>
&lt;/body>
&lt;/html>
&lt;script>
function ex3redraw() {
let canvas = window.ex[3];
let ctx = canvas.getContext("2d");
ctx.fillStyle = 'white';
ctx.strokeStyle = 'white';
ctx.clearRect(0, 0, window.canvas.width, window.canvas.height);
ctx.strokeRect(0, 0, window.canvas.width, window.canvas.height);
let pts = [
[0.09349743488591489, 0.586267349659145],
[0.40060336938038543, 0.8863856711116301],
[0.7331262185197241, 0.851984423840718],
[0.41631943954503126, 0.5888341099600415],
[0.31631943954503126, 0.5288341099600415],
[0.5151129707167391, 0.2959397175037858],
[0.4494122161398628, 0.09309081188615609],
[0.13235547336082165, 0.3696404944957633]
];
let hull = [
pts[0],
pts[1],
pts[2],
pts[3],
pts[5]
];
ctx.beginPath();
let scaledStart = windowScalePt(hull[0]);
ctx.moveTo(scaledStart[0], scaledStart[1]);
for (let i = 1; i &lt; hull.length; i++) {
let scaledStart = windowScalePt(hull[i]);
ctx.lineTo(scaledStart[0], scaledStart[1]);
}
ctx.stroke();
pts.forEach((pt, i) => {
ctx.beginPath();
let scaledPt = windowScalePt(pt);
ctx.arc(scaledPt[0], scaledPt[1], window.dot_dim, 0, 2 * Math.PI);
ctx.fillStyle = 'black';
if (i === 5) {
ctx.fillStyle = 'red';
}
ctx.fill();
ctx.fillStyle = 'white';
});
}
&lt;/script>
&lt;p>Still broken (we only have to check that the current red point is on the left side of the 2nd-to-last edge).&lt;/p>
&lt;/style>
&lt;html>
&lt;body onload="init();" onresize="updateDimensions();">
&lt;canvas id="ex4">&lt;/canvas>
&lt;/body>
&lt;/html>
&lt;script>
function ex4redraw() {
let canvas = window.ex[4];
let ctx = canvas.getContext("2d");
ctx.fillStyle = 'white';
ctx.strokeStyle = 'white';
ctx.clearRect(0, 0, window.canvas.width, window.canvas.height);
ctx.strokeRect(0, 0, window.canvas.width, window.canvas.height);
let pts = [
[0.09349743488591489, 0.586267349659145],
[0.40060336938038543, 0.8863856711116301],
[0.7331262185197241, 0.851984423840718],
[0.41631943954503126, 0.5888341099600415],
[0.31631943954503126, 0.5288341099600415],
[0.5151129707167391, 0.2959397175037858],
[0.4494122161398628, 0.09309081188615609],
[0.13235547336082165, 0.3696404944957633]
];
let hull = [
pts[0],
pts[1],
pts[2],
pts[5]
];
ctx.beginPath();
let scaledStart = windowScalePt(hull[0]);
ctx.moveTo(scaledStart[0], scaledStart[1]);
for (let i = 1; i &lt; hull.length; i++) {
let scaledStart = windowScalePt(hull[i]);
ctx.lineTo(scaledStart[0], scaledStart[1]);
}
ctx.stroke();
pts.forEach((pt, i) => {
ctx.beginPath();
let scaledPt = windowScalePt(pt);
ctx.arc(scaledPt[0], scaledPt[1], window.dot_dim, 0, 2 * Math.PI);
ctx.fillStyle = 'black';
if (i === 5) {
ctx.fillStyle = 'red';
}
ctx.fill();
ctx.fillStyle = 'white';
});
}
&lt;/script>
&lt;p>Convex!&lt;/p>
&lt;hr>
&lt;p>If we continue the algorithm, we will eventually reach the full convex hull.&lt;/p>
&lt;h3 id="analysis">Analysis&lt;/h3>
&lt;p>Determining the leftmost point just requires a linear scan ($\mathcal{O}(n)$). Since determining the angle between two points takes constant time ($\mathcal{O}(1)$), the initial sort has the normal time complexity $\mathcal{O}(n \log n)$.&lt;/p>
&lt;p>Every point will be the current point (red dot in example) exactly once, so this iteration has linear time complexity ($\mathcal{O}(n)$).&lt;/p>
&lt;p>What about popping non-convex points? Observe that any point can be popped at most once! So it has linear time complexity ($\mathcal{O}(n)$).&lt;/p>
&lt;p>$$\mathcal{O}(n) + \mathcal{O}(n \log n) + \mathcal{O}(n) + \mathcal{O}(n)$$ $$\subseteq\mathcal{O}(n \log n)$$&lt;/p>
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>A bit of notation abuse, but I think the point still gets across.&lt;/p>
&lt;/div>
&lt;h2 id="above-and-beyond">Above and Beyond&lt;/h2>
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Anything in this section serves as very light introductions to convex hull extensions. You should treat them as just introductions and feel free to explore further beyond this blog post.&lt;/p>
&lt;/div>
&lt;p>There are various algorithms for solving this problem in $d$-dimensions. For the 3D problem, there exists a deterministic divide-and-conquer $\mathcal{O}(n \log n)$ algorithm (but is notoriously difficult, especially the merge step).&lt;/p>
&lt;h3 id="chans-algorithm">Chan&amp;rsquo;s Algorithm&lt;/h3>
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/Chan%27s_algorithm" target="_blank" rel="noopener"
>Chan&amp;rsquo;s algorithm&lt;/a> is an output-sensitive algorithm for calculating the convex hull in 2D and 3D space.&lt;/p>
&lt;p>It relies on existing $\mathcal{O}(n \log n)$ algorithms in those spaces (Graham Scan, divide-and-conquer, etc.) and uses them to solve subpartitions of the original point set. It then combines these mini-convex hulls to solve the full problem.&lt;/p>
&lt;p>It has time complexity $\mathcal{O}(n \log h)$, where $h$ is the number of vertices in the solution convex hull.&lt;/p>
&lt;h3 id="quick-hull">Quick Hull&lt;/h3>
&lt;p>For the general $d$, &lt;a class="link" href="https://en.wikipedia.org/wiki/Quickhull" target="_blank" rel="noopener"
>Quick Hull&lt;/a> is a &lt;a class="link" href="https://en.wikipedia.org/wiki/Las_Vegas_algorithm" target="_blank" rel="noopener"
>Las Vegas algorithm&lt;/a> that has a time complexity of $\mathcal{O}(n \log n)$ in expectation for the 2D and 3D case.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The $d$-dimensional generalization adds a time complexity factor of $n^{\lfloor\frac{d}{2}\rfloor}$. I don&amp;rsquo;t have great intuition on this expression, but it has to do with the number of facets on a $d$-dimensional object (increasing recursion breadth).&lt;/p>
&lt;/div>
&lt;p>I don&amp;rsquo;t have great exposure to Quick Hull, but the general idea is that we begin with a &amp;ldquo;starter hull&amp;rdquo; (subset of the convex hull; encompasses a large percentage of points in expectation).&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>For the 2D case, this hull might have $p_1=\min_x$, $p_2=\max_x$, and $p_3=\max_\text{dist}(p_1p_2)$ (the point that is furthest from the line $p_1p_2$).&lt;/p>
&lt;p>For the 3D case, this hull might have the same points as in the 2D case plus $p_4=\max_\text{dist}(p_1p_2p_3)$ (the point that is furthest from the plane $p_1p_2p_3$)&lt;/p>
&lt;/div>
&lt;p>Then, for each facet on the current hull (line in 2D; plane in 3D), add the point $p$ (on the other side of the hull) farthest from the facet.&lt;/p>
&lt;p>This inclusion may break the convexitivity of the current hull. Perform &lt;a class="link" href="https://en.wikipedia.org/wiki/Breadth-first_search" target="_blank" rel="noopener"
>BFS&lt;/a> to determine the &amp;ldquo;horizon&amp;rdquo; of $p$ and remove all visited points not in the horizon.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The horizon is what you might be able to see if you were to put your eye at $p$. This can be checked using linear algebra magic.&lt;/p>
&lt;p>If you can see a point $a$ behind a point $b$, then that means $b$ is not in the horizon and causes the hull to be concave.&lt;/p>
&lt;/div>
&lt;p>Recursively repeat the previous two steps until every point is enclosed in the hull.&lt;/p></description></item><item><title>Garbage Collection</title><link>https://kiblitz.github.io/p/garbage-collection/</link><pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/garbage-collection/</guid><description>&lt;img src="https://kiblitz.github.io/p/garbage-collection/garbage.jpg" alt="Featured image of post Garbage Collection" />&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Oftentimes, your program will need to allocate memory on the heap. Unlike the stack where deallocations occur upon scope exiting, something needs to explicitly free memory from the heap.&lt;/p>
&lt;p>In some languages like $\texttt{C}$, it is the programmer&amp;rsquo;s responsibility to call $\texttt{free}$ when it is no longer needed. Manual memory leak debugging and tests were required (i.e. &lt;a class="link" href="https://en.wikipedia.org/wiki/Valgrind" target="_blank" rel="noopener"
>valgrind&lt;/a>).&lt;/p>
&lt;p>A lot of higher-level programming languages have a &amp;ldquo;garbage collector&amp;rdquo; (gc). Aptly named, they execute independently of the main program and free memory that is no longer being used (garbage).&lt;/p>
&lt;h2 id="techniques">Techniques&lt;/h2>
&lt;p>Garbage collection is a difficult task. There is a juggling tradeoff between the completeness of the gc (what leaks can we allow) versus the resource complexity of the gc (time, space, processing).&lt;/p>
&lt;h3 id="reference-counting">Reference Counting&lt;/h3>
&lt;p>For every allocated piece of memory, store a referencing counter representing the number of pointers that point to it. If it ever reaches $0$, free the memory chunk.&lt;/p>
&lt;h4 id="algorithm">Algorithm&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{on new $M$:}\newline
&amp;amp;\texttt{\qquad $M$.ref\_count = 1}\newline
&amp;amp;\newline
&amp;amp;\texttt{on $x$ = $M$:}\newline
&amp;amp;\texttt{\qquad $M$.ref\_count++}\newline
&amp;amp;\newline
&amp;amp;\texttt{on ($x$ = $M$) out of scope:}\newline
&amp;amp;\texttt{\qquad $M$.ref\_count--}\newline
&amp;amp;\texttt{\qquad if $M$.ref\_count = 0}\newline
&amp;amp;\texttt{\qquad \qquad free($M$)}\newline
&amp;amp;\texttt{\qquad \qquad recurse out-of-scope check on $M$ fields}
\end{align*}
$$&lt;/p>
&lt;h4 id="pros">Pros&lt;/h4>
&lt;ul>
&lt;li>Very simple to implement&lt;/li>
&lt;li>No background thread running in background (all operations are triggered)&lt;/li>
&lt;/ul>
&lt;h4 id="cons">Cons&lt;/h4>
&lt;ul>
&lt;li>Word overhead for storing $\texttt{ref\_count}$ per allocated memory block&lt;/li>
&lt;li>Chain overhead when freeing a linked data structure
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 336 25"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,0 L 40,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,0 L 104,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,0 L 168,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 L 232,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,0 L 296,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='48.000000,0.000000 36.000000,-5.600000 36.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 40.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='112.000000,0.000000 100.000000,-5.600000 100.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 104.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='176.000000,0.000000 164.000000,-5.600000 164.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 168.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='240.000000,0.000000 228.000000,-5.600000 228.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 232.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='304.000000,0.000000 292.000000,-5.600000 292.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 296.000000, 0.000000)'>&lt;/polygon>
&lt;text text-anchor='middle' x='0' y='4' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='64' y='4' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='128' y='4' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='192' y='4' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='256' y='4' fill='currentColor' style='font-size:1em'>E&lt;/text>
&lt;text text-anchor='middle' x='320' y='4' fill='currentColor' style='font-size:1em'>F&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>Imagine $\texttt{A}$ is freed. Then, $\texttt{B}$ is freed. Then, $\texttt{C}$ is freed. And so on. So there is a potential high overhead when freeing linked data structures (program pause).&lt;/p>&lt;/p>
&lt;/div>
&lt;/li>
&lt;li>&lt;strong>Cycles leak memory&lt;/strong>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 336 89"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,0 L 40,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,64 L 48,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,32 L 0,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,16 L 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='8.000000,32.000000 -4.000000,26.400000 -4.000000,37.599998' fill='currentColor' transform='rotate(270.000000, 0.000000, 32.000000)'>&lt;/polygon>
&lt;polygon points='32.000000,64.000000 20.000000,58.400002 20.000000,69.599998' fill='currentColor' transform='rotate(180.000000, 24.000000, 64.000000)'>&lt;/polygon>
&lt;polygon points='48.000000,0.000000 36.000000,-5.600000 36.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 40.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='72.000000,32.000000 60.000000,26.400000 60.000000,37.599998' fill='currentColor' transform='rotate(90.000000, 64.000000, 32.000000)'>&lt;/polygon>
&lt;text text-anchor='middle' x='0' y='4' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='0' y='68' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='64' y='4' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='64' y='68' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>These nodes point to each other. So, their $\texttt{ref\_count}$ will never be $0$ even if nothing else in the program points to them (should be garbage).&lt;/p>&lt;/p>
&lt;/div>
&lt;div class="box box-shortcode tip" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#tip-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/Python_%28programming_language%29" target="_blank" rel="noopener"
>Python&lt;/a> uses reference counting for its gc. Watch it leak by making a large number of cycle structures.&lt;/p>
&lt;/div>
&lt;/li>
&lt;/ul>
&lt;h3 id="mark-sweep">Mark Sweep&lt;/h3>
&lt;p>For every allocated block of memory, store a mark bit (initialized to $0$). Every now and then, mark all memory that have pointers to them within the current program scope. Free all allocated memory that has not been marked (cannot be accessed $\implies$ garbage). Unmark all marks.&lt;/p>
&lt;h4 id="algorithm-1">Algorithm&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let markRecurse(ptr $p$):}\newline
&amp;amp;\texttt{\qquad if $p$ is marked then return}\newline
&amp;amp;\texttt{\qquad mark $p$}\newline
&amp;amp;\texttt{\qquad for all pointers $f$ that are fields of $p$:}\newline
&amp;amp;\texttt{\qquad \qquad markRecurse($f$)}\newline
&amp;amp;\newline
&amp;amp;\texttt{on gc trigger:}\newline
&amp;amp;\texttt{\qquad pause program}\newline
&amp;amp;\newline
&amp;amp;\texttt{\qquad // mark phase}\newline
&amp;amp;\texttt{\qquad for all pointers $p$ in scope:}\newline
&amp;amp;\texttt{\qquad \qquad markRecurse($p$)}\newline
&amp;amp;\newline
&amp;amp;\texttt{\qquad // sweep phase}\newline
&amp;amp;\texttt{\qquad for all allocated memory blocks $b$:}\newline
&amp;amp;\texttt{\qquad \qquad if $b$ is marked then free($b$)}\newline
&amp;amp;\texttt{\qquad \qquad unmark $b$}\newline
&amp;amp;\newline
&amp;amp;\texttt{\qquad resume program}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The gc trigger is heuristical. It could be based on time intervals, memory utilization, processor utilization, etc.&lt;/p>
&lt;/div>
&lt;h4 id="pros-1">Pros&lt;/h4>
&lt;ul>
&lt;li>The gc will collect all garbage&lt;/li>
&lt;/ul>
&lt;h4 id="cons-1">Cons&lt;/h4>
&lt;ul>
&lt;li>Long pauses when gc is running&lt;/li>
&lt;/ul>
&lt;h3 id="copy-collection">Copy Collection&lt;/h3>
&lt;p>Divide the heap into two equal sections: &lt;em>from&lt;/em> and &lt;em>to&lt;/em>. For every allocated block of memory, store a &amp;ldquo;forwarding address&amp;rdquo; (initialized to $0$). All newly allocated blocks are placed in the &lt;em>from&lt;/em> space. Once full, the gc is triggered. It moves all non-garbage blocks to the &lt;em>to&lt;/em> space and frees the &lt;em>from&lt;/em> space. Then, it swaps the &lt;em>from&lt;/em> and &lt;em>to&lt;/em> space labels.&lt;/p>
&lt;h4 id="algorithm-2">Algorithm&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let copyRecurse(ptr $p$):}\newline
&amp;amp;\texttt{\qquad if $p$ has no forwarding address:}\newline
&amp;amp;\texttt{\qquad \qquad let $m$ = next available block in $to$ space}\newline
&amp;amp;\texttt{\qquad \qquad copy non-ptr fields of $p$ into $m$}\newline
&amp;amp;\texttt{\qquad \qquad $p$ forwarding address = $m$ (in $from$ space)}\newline
&amp;amp;\texttt{\qquad \qquad for all ptr fields $f$ of $p$:}\newline
&amp;amp;\texttt{\qquad \qquad \qquad $f$ forwarding address = copyRecurse($f$)}\newline
&amp;amp;\texttt{\qquad return $p$ forwarding address}\newline
&amp;amp;\newline
&amp;amp;\texttt{on gc trigger:}\newline
&amp;amp;\texttt{\qquad pause program}\newline
&amp;amp;\newline
&amp;amp;\texttt{\qquad for all pointers $p$ in scope:}\newline
&amp;amp;\texttt{\qquad \qquad copyRecurse($p$)}\newline
&amp;amp;\texttt{\qquad free($from$ space)}\newline
&amp;amp;\newline
&amp;amp;\texttt{\qquad swap $to$ and $from$ labels}\newline
&amp;amp;\newline
&amp;amp;\texttt{\qquad resume program}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The &amp;ldquo;forwarding address&amp;rdquo; is for the gc to move cyclical data structures to the &lt;em>to&lt;/em> space.&lt;/p>
&lt;p>Without it, recursing on pointers to blocks already in the &lt;em>to&lt;/em> space will move the same block again (essentially duplicating it infinitely in the &lt;em>to&lt;/em> space).&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 328 377"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,0 L 72,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,0 L 144,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,0 L 240,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 L 312,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 L 32,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,48 L 200,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,112 L 32,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,112 L 200,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,128 L 72,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,128 L 144,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,128 L 240,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,128 L 312,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,160 L 72,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,160 L 144,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,160 L 240,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,160 L 312,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,208 L 32,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,208 L 200,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,272 L 32,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,272 L 200,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,288 L 72,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,288 L 144,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,352 L 240,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,352 L 312,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,0 L 0,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,160 L 0,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 L 16,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,208 L 16,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,64 L 48,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,224 L 48,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,0 L 72,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,160 L 72,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,224 L 104,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,0 L 144,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,160 L 144,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,0 L 168,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,160 L 168,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,48 L 184,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,208 L 184,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,64 L 216,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,224 L 216,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 L 240,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,160 L 240,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,224 L 272,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,288 L 272,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 312,0 L 312,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 312,160 L 312,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='40.000000,48.000000 28.000000,42.400002 28.000000,53.599998' fill='currentColor' transform='rotate(0.000000, 32.000000, 48.000000)'>&lt;/polygon>
&lt;polygon points='40.000000,208.000000 28.000000,202.399994 28.000000,213.600006' fill='currentColor' transform='rotate(0.000000, 32.000000, 208.000000)'>&lt;/polygon>
&lt;polygon points='56.000000,80.000000 44.000000,74.400002 44.000000,85.599998' fill='currentColor' transform='rotate(90.000000, 48.000000, 80.000000)'>&lt;/polygon>
&lt;polygon points='56.000000,240.000000 44.000000,234.399994 44.000000,245.600006' fill='currentColor' transform='rotate(90.000000, 48.000000, 240.000000)'>&lt;/polygon>
&lt;polygon points='112.000000,240.000000 100.000000,234.399994 100.000000,245.600006' fill='currentColor' transform='rotate(90.000000, 104.000000, 240.000000)'>&lt;/polygon>
&lt;polygon points='208.000000,48.000000 196.000000,42.400002 196.000000,53.599998' fill='currentColor' transform='rotate(0.000000, 200.000000, 48.000000)'>&lt;/polygon>
&lt;polygon points='208.000000,208.000000 196.000000,202.399994 196.000000,213.600006' fill='currentColor' transform='rotate(0.000000, 200.000000, 208.000000)'>&lt;/polygon>
&lt;polygon points='224.000000,80.000000 212.000000,74.400002 212.000000,85.599998' fill='currentColor' transform='rotate(90.000000, 216.000000, 80.000000)'>&lt;/polygon>
&lt;polygon points='224.000000,240.000000 212.000000,234.399994 212.000000,245.600006' fill='currentColor' transform='rotate(90.000000, 216.000000, 240.000000)'>&lt;/polygon>
&lt;polygon points='280.000000,240.000000 268.000000,234.399994 268.000000,245.600006' fill='currentColor' transform='rotate(90.000000, 272.000000, 240.000000)'>&lt;/polygon>
&lt;polygon points='280.000000,304.000000 268.000000,298.399994 268.000000,309.600006' fill='currentColor' transform='rotate(90.000000, 272.000000, 304.000000)'>&lt;/polygon>
&lt;text text-anchor='middle' x='24' y='20' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='24' y='180' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='32' y='20' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='32' y='180' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='40' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='40' y='180' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='48' y='20' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='48' y='52' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='48' y='116' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='48' y='180' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='48' y='212' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='48' y='276' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='96' y='20' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='96' y='180' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='104' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='104' y='180' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='104' y='212' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='104' y='276' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='192' y='180' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='200' y='20' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='200' y='180' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='208' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='208' y='180' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='216' y='20' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='216' y='52' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='216' y='116' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='216' y='180' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='216' y='212' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='216' y='276' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='264' y='20' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='264' y='180' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='272' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='272' y='52' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='272' y='180' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='272' y='212' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='272' y='276' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='272' y='340' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;/div>
&lt;h4 id="example">Example&lt;/h4>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 328 313"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,0 L 72,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,0 L 144,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,0 L 240,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 L 312,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 L 32,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,48 L 200,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,48 L 240,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,48 L 256,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,112 L 32,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,112 L 200,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,128 L 72,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,128 L 144,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,128 L 240,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,128 L 312,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,160 L 72,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,160 L 144,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,160 L 240,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,160 L 312,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,208 L 32,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,208 L 72,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,208 L 88,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,272 L 32,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,272 L 72,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,272 L 88,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,288 L 72,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,288 L 144,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,288 L 240,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,288 L 312,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,0 L 0,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,160 L 0,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 L 16,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,208 L 16,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,64 L 48,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,208 L 48,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,0 L 72,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,160 L 72,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,208 L 72,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,272 L 72,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,224 L 104,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,0 L 144,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,160 L 144,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,0 L 168,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,160 L 168,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,48 L 184,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,48 L 216,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 L 240,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,48 L 240,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,160 L 240,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,224 L 272,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 312,0 L 312,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 312,160 L 312,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='40.000000,48.000000 28.000000,42.400002 28.000000,53.599998' fill='currentColor' transform='rotate(0.000000, 32.000000, 48.000000)'>&lt;/polygon>
&lt;polygon points='40.000000,208.000000 28.000000,202.399994 28.000000,213.600006' fill='currentColor' transform='rotate(0.000000, 32.000000, 208.000000)'>&lt;/polygon>
&lt;polygon points='56.000000,80.000000 44.000000,74.400002 44.000000,85.599998' fill='currentColor' transform='rotate(90.000000, 48.000000, 80.000000)'>&lt;/polygon>
&lt;polygon points='56.000000,240.000000 44.000000,234.399994 44.000000,245.600006' fill='currentColor' transform='rotate(90.000000, 48.000000, 240.000000)'>&lt;/polygon>
&lt;polygon points='96.000000,208.000000 84.000000,202.399994 84.000000,213.600006' fill='currentColor' transform='rotate(0.000000, 88.000000, 208.000000)'>&lt;/polygon>
&lt;polygon points='96.000000,272.000000 84.000000,266.399994 84.000000,277.600006' fill='currentColor' transform='rotate(0.000000, 88.000000, 272.000000)'>&lt;/polygon>
&lt;polygon points='112.000000,240.000000 100.000000,234.399994 100.000000,245.600006' fill='currentColor' transform='rotate(90.000000, 104.000000, 240.000000)'>&lt;/polygon>
&lt;polygon points='208.000000,48.000000 196.000000,42.400002 196.000000,53.599998' fill='currentColor' transform='rotate(0.000000, 200.000000, 48.000000)'>&lt;/polygon>
&lt;polygon points='224.000000,80.000000 212.000000,74.400002 212.000000,85.599998' fill='currentColor' transform='rotate(90.000000, 216.000000, 80.000000)'>&lt;/polygon>
&lt;polygon points='264.000000,48.000000 252.000000,42.400002 252.000000,53.599998' fill='currentColor' transform='rotate(0.000000, 256.000000, 48.000000)'>&lt;/polygon>
&lt;polygon points='280.000000,240.000000 268.000000,234.399994 268.000000,245.600006' fill='currentColor' transform='rotate(90.000000, 272.000000, 240.000000)'>&lt;/polygon>
&lt;circle cx='48' cy='208' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='272' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='216' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='24' y='20' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='24' y='180' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='32' y='20' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='32' y='180' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='40' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='40' y='180' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='48' y='20' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='48' y='52' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='48' y='116' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='48' y='180' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='96' y='20' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='96' y='180' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='104' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='104' y='180' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='104' y='212' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='104' y='276' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='192' y='180' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='200' y='20' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='200' y='180' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='208' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='216' y='20' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='216' y='116' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='264' y='20' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='264' y='180' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='272' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='272' y='52' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='272' y='180' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='272' y='212' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='272' y='276' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='280' y='180' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='288' y='180' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;h4 id="pros-2">Pros&lt;/h4>
&lt;ul>
&lt;li>The gc will collect all garbage&lt;/li>
&lt;li>Efficient memory utilization (all allocations are contiguous: no fragmentation)&lt;/li>
&lt;li>Only $1$ iteration (as opposed to $2$ from mark/sweep)&lt;/li>
&lt;/ul>
&lt;h4 id="cons-2">Cons&lt;/h4>
&lt;ul>
&lt;li>Long pauses when gc is running&lt;/li>
&lt;li>Only half of the heap can be operated on at a time&lt;/li>
&lt;/ul>
&lt;h2 id="lifetime-optimization">Lifetime Optimization&lt;/h2>
&lt;p>A general analysis of programs yields the following result.&lt;/p>
&lt;ul>
&lt;li>Allocated memory blocks that live past a certain point tend to live a really long time&lt;/li>
&lt;li>Other blocks tend to be short lived&lt;/li>
&lt;/ul>
&lt;p>This sort of makes sense. These long lasting blocks are likely to be data structures that persist throughout the program. On the other hand, short lived blocks might be temporaries that we only need for a scope (i.e. within function).&lt;/p>
&lt;p>An optimization to employ is &lt;strong>generational collection&lt;/strong>. The heap is divided into two sections: &lt;em>nursery&lt;/em> and &lt;em>tenured&lt;/em>.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 432 169"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,0 L 208,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 L 416,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,144 L 208,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,144 L 416,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,0 L 0,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 L 208,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,0 L 416,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='80' y='68' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='88' y='68' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='88' y='84' fill='currentColor' style='font-size:1em'>[&lt;/text>
&lt;text text-anchor='middle' x='96' y='68' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='96' y='84' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='104' y='68' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='104' y='84' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='112' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='112' y='84' fill='currentColor' style='font-size:1em'>w&lt;/text>
&lt;text text-anchor='middle' x='120' y='68' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='120' y='84' fill='currentColor' style='font-size:1em'>]&lt;/text>
&lt;text text-anchor='middle' x='128' y='68' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;text text-anchor='middle' x='288' y='68' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='296' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='296' y='84' fill='currentColor' style='font-size:1em'>[&lt;/text>
&lt;text text-anchor='middle' x='304' y='68' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='304' y='84' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='312' y='68' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='312' y='84' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='320' y='68' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='320' y='84' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='328' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='328' y='84' fill='currentColor' style='font-size:1em'>]&lt;/text>
&lt;text text-anchor='middle' x='336' y='68' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>All newly allocated blocks are placed in the &lt;em>nursery&lt;/em>. When a &lt;em>nursery&lt;/em> gc triggers and cleans up the trash, all blocks that were not cleaned up are &amp;ldquo;promoted&amp;rdquo; to live in the &lt;em>tenured&lt;/em> space. There is also a &lt;em>tenured&lt;/em> gc, but that executes less frequently than the &lt;em>nursery&lt;/em> gc (since those blocks are less likely to be garbage).
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Observe that after a &lt;em>nursery&lt;/em> gc execution, the entire &lt;em>nursery&lt;/em> is freed. Much like in &lt;strong>copy collection&lt;/strong>, we can just reclaim the entire space at once rather than for each individual block.&lt;/p>
&lt;/div>
&lt;/p>
&lt;h2 id="type-unsafe-problem">Type Unsafe Problem&lt;/h2>
&lt;p>Lots of higher-level programming languages have type systems that keep code &amp;ldquo;safe&amp;rdquo;. In a lower-level language like $\texttt{C/C++}$, anything goes. Specifically, any piece of data could be casted to a pointer.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>For instance, $\texttt{int x = 5}$ could technically also be a pointer to the memory address $\texttt{0x5}$.&lt;/p>
&lt;/div>
&lt;p>An approach is to employ &lt;strong>conservative collection&lt;/strong>. Any &lt;em>data&lt;/em> in scope is conservatively considered to be a pointer. If there exists allocated memory at the address specified by that data, then consider it &amp;ldquo;not garbage&amp;rdquo; (don&amp;rsquo;t free it).&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>If we had $\texttt{int x = 5}$ and there was $\texttt{Object obj}$ allocated at address $\texttt{0x4}$ with size $\texttt{0x8}$, then consider $\texttt{obj}$ to be in use.&lt;/p>
&lt;p>The reason being is that we could technically use $\texttt{x}$ to access $\texttt{obj}$, so we can&amp;rsquo;t deem $\texttt{obj}$ as garbage yet.&lt;/p>
&lt;/div>
&lt;p>It&amp;rsquo;s a conservative approach because the gc might falsely mark a piece of memory as still in use, thus leaking it.&lt;/p></description></item><item><title>Phantom Types</title><link>https://kiblitz.github.io/p/phantom-types/</link><pubDate>Sun, 16 Jul 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/phantom-types/</guid><description>&lt;img src="https://kiblitz.github.io/p/phantom-types/ghost.jpeg" alt="Featured image of post Phantom Types" />&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>As implied by the name, phantom types are defined by type parameters that are not actually used in implementation. Instead, they are used by the type system to restrict operations on that type. We can use them to improve program correctness (by the type checker).&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;h3 id="units">Units&lt;/h3>
&lt;p>Suppose we want to have a type for measurement units.&lt;/p>
&lt;h4 id="definition">Definition&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{module Unit : sig}\newline
&amp;amp;\texttt{\qquad type &amp;lsquo;a t}\newline
&amp;amp;\texttt{\qquad val of\_float : float -&amp;gt; &amp;lsquo;a t}\newline
&amp;amp;\texttt{\qquad val (+.) : &amp;lsquo;a t -&amp;gt; &amp;lsquo;a t -&amp;gt; &amp;lsquo;a t}\newline
&amp;amp;\texttt{end = struct}\newline
&amp;amp;\texttt{\qquad type &amp;lsquo;a t = float}\newline
&amp;amp;\texttt{\qquad let of\_float x = x}\newline
&amp;amp;\texttt{\qquad let (+.) = (+.)}\newline
&amp;amp;\texttt{end}
\end{align*}
$$&lt;/p>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The module syntax is for defining stuff (in this case types and functions) in a context. So you would have to call $\texttt{of\_float}$ with $\texttt{Unit.of\_float}$.&lt;/p>
&lt;p>$\texttt{sig}$ represents the module signature and $\texttt{struct}$ represents its actual definition (you can have multiple $\texttt{struct}$ definitions for a single $\texttt{sig}$).&lt;/p>
&lt;/div>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$\texttt{(+.)}$ is just an infix operator for float addition. Here, we define it for operations involving two values of type $\texttt{Unit}$.&lt;/p>
&lt;/div>
&lt;p>Notice how $\texttt{&amp;lsquo;a}$ is never actually used: its underlying type is just a $\texttt{float}$. However, notice that $\texttt{(+.)}$ has type $\texttt{&amp;lsquo;a t -&amp;gt; &amp;lsquo;a t -&amp;gt; &amp;lsquo;a t}$. This means that the two parameters we pass into $\texttt{(+.)}$ better have the same $\texttt{&amp;lsquo;a}$ type parameter. Similarly, it will return a value with that same $\texttt{&amp;lsquo;a}$.&lt;/p>
&lt;h4 id="use">Use&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{type meters}\newline
&amp;amp;\texttt{type lbs}\newline
&amp;amp;\newline
&amp;amp;\texttt{open Unit}\newline
&amp;amp;\texttt{let m1 : meters t = of\_float 2.}\newline
&amp;amp;\texttt{let m2 : meters t = of\_float 4.}\newline
&amp;amp;\texttt{let p1 : lbs t = of\_float 3.}\newline
&amp;amp;\texttt{let p2 : lbs t = of\_float 5.}\newline
&amp;amp;\texttt{let total\_m = m1 +. m2}\newline
&amp;amp;\texttt{let total\_p = p1 +. p2}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$\texttt{open Unit}$ just allows us to access $\texttt{Unit}$ things without prepending them.&lt;/p>
&lt;/div>
&lt;p>Notice how $\texttt{meter}$ and $\texttt{lbs}$ are never actually used outside of declaring types. This is how we can enforce that $\texttt{(+.)}$ operations can never be used on different units.&lt;/p>
&lt;div class="box box-shortcode warning" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#warning-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>If you try to add units with different $\texttt{&amp;lsquo;a}$ parameter types, your program will fail to type check.&lt;/p>
&lt;p>$$\cancel{\texttt{total\_m (+.) total\_p}}$$&lt;/p>
&lt;p>Also, if you try to instantiate a variable with a phantom type without the explicit $\texttt{&amp;lsquo;a}$, your program will also fail to type check.&lt;/p>
&lt;p>$$\cancel{\texttt{let x = of\_float 6.}}$$&lt;/p>
&lt;/div>
&lt;h3 id="access-control">Access Control&lt;/h3>
&lt;p>This example was inspired by a &lt;a class="link" href="https://blog.janestreet.com/howto-static-access-control-using-phantom-types/" target="_blank" rel="noopener"
>Ron Minsky post&lt;/a>.&lt;/p>
&lt;p>Suppose we want to have a type for reference cells that have access control permissions (read and read/write).&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Reference cells allow for mutable values by storing them as addresses containing the data.&lt;/p>
&lt;ul>
&lt;li>$\texttt{let x = ref 10}$ creates a reference cell $\texttt{x}$ storing the value $\texttt{10}$.&lt;/li>
&lt;li>$\texttt{x := 4}$ sets the value in $\texttt{x}$ to $\texttt{4}$.&lt;/li>
&lt;li>$\texttt{let v = !x}$ extracts the value in $\texttt{x}$ (so $\texttt{v = 4}$).&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h4 id="definition-1">Definition&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{type read}\newline
&amp;amp;\texttt{type write}\newline
&amp;amp;\newline
&amp;amp;\texttt{module Ref : sig}\newline
&amp;amp;\texttt{\qquad type (&amp;lsquo;a, &amp;lsquo;b) t}\newline
&amp;amp;\texttt{\qquad create : &amp;lsquo;b -&amp;gt; (write, &amp;lsquo;b) t}\newline
&amp;amp;\texttt{\qquad set : (write, &amp;lsquo;b) t -&amp;gt; &amp;lsquo;b -&amp;gt; unit}\newline
&amp;amp;\texttt{\qquad get : (&amp;lsquo;a, &amp;lsquo;b) t -&amp;gt; &amp;lsquo;b}\newline
&amp;amp;\texttt{\qquad readonly : (&amp;lsquo;a, &amp;lsquo;b) t -&amp;gt; (read, &amp;lsquo;b) t}\newline
&amp;amp;\texttt{end = struct}\newline
&amp;amp;\texttt{\qquad type (&amp;lsquo;a, &amp;lsquo;b) t = &amp;lsquo;b ref}\newline
&amp;amp;\texttt{\qquad create x = ref x}\newline
&amp;amp;\texttt{\qquad set t x = t := x}\newline
&amp;amp;\texttt{\qquad get x = !x}\newline
&amp;amp;\texttt{\qquad readonly x = x}\newline
&amp;amp;\texttt{end}
\end{align*}
$$&lt;/p>
&lt;p>$\texttt{&amp;lsquo;a}$ is discarded in the definition of $\texttt{Ref}$ (what makes it a phantom type). $\texttt{&amp;lsquo;b}$ just makes it polymorphic.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Polymorphic just means that the underlying type of the data within the cell can be anything. In the use example below, we will use $\texttt{&amp;lsquo;b = int}$.&lt;/p>
&lt;/div>
&lt;p>As shown, $\texttt{Ref}$ has $\texttt{&amp;lsquo;a = write}$ access upon creation, and you can only call $\texttt{set}$ on a $\texttt{Ref}$ which has $\texttt{&amp;lsquo;a = write}$. Additionally, you can cast any $\texttt{Ref}$ to have $\texttt{&amp;lsquo;a = read}$ using $\texttt{readonly}$ without actually changing any of its underlying data (just its $\texttt{&amp;lsquo;a}$ parameter type).&lt;/p>
&lt;h4 id="use-1">Use&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{open Ref}\newline
&amp;amp;\texttt{let write\_ref = create 10}\newline
&amp;amp;\texttt{let read\_ref = readonly write\_ref}\newline
&amp;amp;\texttt{let value1 = get write\_ref}\newline
&amp;amp;\texttt{let () = set write\_ref 4}\newline
&amp;amp;\texttt{let value2 = get read\_ref}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode warning" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#warning-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>If you try to call $\texttt{set}$ on a $\texttt{Ref}$ with $\texttt{&amp;lsquo;a = readonly}$, your program will fail to type check.&lt;/p>
&lt;p>$$\cancel{\texttt{set read\_ref 4}}$$&lt;/p>
&lt;/div></description></item><item><title>Monads</title><link>https://kiblitz.github.io/p/monads/</link><pubDate>Sat, 15 Jul 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/monads/</guid><description>&lt;img src="https://kiblitz.github.io/p/monads/abstract1.png" alt="Featured image of post Monads" />&lt;h2 id="definition">Definition&lt;/h2>
&lt;p>Monads are structures that wrap values. They are useful for creating computation pipelines that abstract away control flow and side effects.&lt;/p>
&lt;h3 id="return-and-bind">Return and Bind&lt;/h3>
&lt;p>A monad of type $\texttt{&amp;lsquo;a t}$ has the following functions.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{return: &amp;lsquo;a -&amp;gt; &amp;lsquo;a t}\newline
&amp;amp;\texttt{bind: &amp;lsquo;a t -&amp;gt; (&amp;lsquo;a -&amp;gt; &amp;lsquo;b t) -&amp;gt; &amp;lsquo;b t}
\end{align*}
$$&lt;/p>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Monads are &lt;a class="link" href="https://en.wikipedia.org/wiki/Parametric_polymorphism" target="_blank" rel="noopener"
>parametric types&lt;/a>. $\texttt{t}$ represents the monad itself and $\texttt{&amp;lsquo;a}$ is the type parameter.&lt;/p>
&lt;p>For example, $\texttt{Option}$ is a monad. The value it wraps has the parameter type $\texttt{&amp;lsquo;a}$. So, you could have types like $\texttt{int Option}$ or $\texttt{string Option}$.&lt;/p>
&lt;p>$\texttt{&amp;lsquo;b}$ is another parameter. Bind takes a function that essentially &amp;ldquo;maps&amp;rdquo; the current monad type parameter $\texttt{&amp;lsquo;a}$ to another monad of type $\texttt{&amp;lsquo;b}$.&lt;/p>
&lt;/div>
&lt;p>It helps to follow the types. $\texttt{return}$ constructs the monad from a value. $\texttt{bind}$ transforms the value within the monad (computation pipeline).&lt;/p>
&lt;h3 id="map">Map&lt;/h3>
&lt;p>The definition for the monadic function $\texttt{map}$ follows from the functions above.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{map: &amp;lsquo;a t -&amp;gt; (&amp;lsquo;a -&amp;gt; &amp;lsquo;b) -&amp;gt; &amp;lsquo;b t}\newline
&amp;amp;\newline
&amp;amp;\texttt{let map t f =}\newline
&amp;amp;\texttt{\qquad let g a = return (f a) in}\newline
&amp;amp;\texttt{\qquad bind t g}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$\texttt{map}$ is the same as $\texttt{bind}$ except the function ($\texttt{f}$) returns a raw $\texttt{&amp;lsquo;b}$ rather than a $\texttt{&amp;lsquo;b t}$.&lt;/p>
&lt;p>Here, we construct the $\texttt{g}$ necessary for $\texttt{bind}$ by just applying $\texttt{return}$ to the result of $\texttt{f}$.&lt;/p>
&lt;/div>
&lt;h2 id="ocaml-ppx_let">OCaml ppx_let&lt;/h2>
&lt;p>The &lt;a class="link" href="https://github.com/janestreet/ppx_let" target="_blank" rel="noopener"
>ppx_let&lt;/a> library for OCaml provides an elegant way to code with monads.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Although The &lt;a class="link" href="https://github.com/janestreet/ppx_let" target="_blank" rel="noopener"
>ppx_let&lt;/a> library introduces various monadic syntax (i.e. monadic pattern matching), we will only display monadic let bindings.&lt;/p>
&lt;p>They work similarly to these monadic let bindings (see documentation).&lt;/p>
&lt;/div>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let\%bind a = a\_monad in (* a : &amp;lsquo;a; a\_monad : &amp;lsquo;a t *)}\newline
&amp;amp;\texttt{\qquad &amp;hellip;}\newline
&amp;amp;\texttt{\qquad b\_monad (* b\_monad : &amp;lsquo;b t *)}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$\texttt{(* &amp;hellip; *)}$ are comments.&lt;/p>
&lt;/div>
&lt;p>With this syntactic sugar, we define the function parameter in (call it $\texttt{f}$ with type $\texttt{&amp;lsquo;a -&amp;gt; &amp;lsquo;b t}$) in the body of the $\texttt{let\%bind}$, where $\texttt{a}$ is the parameter to $\texttt{f}$.&lt;/p>
&lt;hr>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let\%map a = a\_monad in (* a : &amp;lsquo;a; a\_monad : &amp;lsquo;a t *)}\newline
&amp;amp;\texttt{\qquad &amp;hellip;}\newline
&amp;amp;\texttt{\qquad b (* b : &amp;lsquo;b *)}
\end{align*}
$$&lt;/p>
&lt;p>$\texttt{let\%map}$ does basically the same thing except the return type of its body is just a $\texttt{&amp;lsquo;b}$ (as is in $\texttt{f}$ with type $\texttt{&amp;lsquo;a -&amp;gt; &amp;lsquo;b}$).&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>These might be easier to grasp with the examples below.&lt;/p>
&lt;/div>
&lt;hr>
&lt;p>Important to note that the type of the entire $\texttt{let\%bind}$ and $\texttt{let\%map}$ expressions are $\texttt{&amp;lsquo;b t}$, consistent with the return types of $\texttt{bind}$ and $\texttt{map}$.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Typically, to chain monadic operations we will end with a single $\texttt{let\%map}$. All previous bindings will be $\texttt{let\%bind}$.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let\%bind a = a\_monad in}\newline
&amp;amp;\texttt{let\%bind b = b\_monad in}\newline
&amp;amp;\texttt{let\%bind c = c\_monad in}\newline
&amp;amp;\texttt{let\%map d = d\_monad in}\newline
&amp;amp;\texttt{(a, b, c, d)}
\end{align*}
$$&lt;/p>
&lt;p>Why is this the case?&lt;/p>
&lt;ul>
&lt;li>$\texttt{let\%bind}$ expects its function parameter to return a monad, which both $\texttt{let\%bind}$ and $\texttt{let\%map}$ do. This is why all except the last level must be $\texttt{let\%bind}$.&lt;/li>
&lt;li>It is natural to perform computations without monads. Since this usually occurs after &amp;ldquo;unwrapping&amp;rdquo; all the monads, the last level is usually a $\texttt{let\%map}$.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>Note that if the last level were a $\texttt{let\%bind}$, we would have to return a monad.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let\%bind a = a\_monad in}\newline
&amp;amp;\texttt{let\%bind b = b\_monad in}\newline
&amp;amp;\texttt{let\%bind c = c\_monad in}\newline
&amp;amp;\texttt{let\%bind d = d\_monad in}\newline
&amp;amp;\texttt{return (a, b, c, d)}
\end{align*}
$$&lt;/p>
&lt;/div>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;h3 id="option">Option&lt;/h3>
&lt;h4 id="definition-1">Definition&lt;/h4>
&lt;p>Options give optionality to the existence of an underlying value.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{type &amp;lsquo;a Option =}\newline
&amp;amp;\texttt{\quad | None}\newline
&amp;amp;\texttt{\quad | Some of &amp;lsquo;a}\newline
&amp;amp;\newline
&amp;amp;\texttt{let return a = Some a }\newline
&amp;amp;\texttt{let bind a\_opt f =}\newline
&amp;amp;\texttt{\qquad match a\_opt with}\newline
&amp;amp;\texttt{\qquad \qquad None -&amp;gt; None}\newline
&amp;amp;\texttt{\qquad \quad | Some a -&amp;gt; f a}
\end{align*}
$$&lt;/p>
&lt;h4 id="use">Use&lt;/h4>
&lt;p>Suppose we want to implement the $\texttt{option\_plus}$ function which operates on two parameters of type $\texttt{int Option}$.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let option\_plus (a\_opt : int Option) (b\_opt : int Option) : int Option =}\newline
&amp;amp;\texttt{\qquad let\%bind a = a\_opt in}\newline
&amp;amp;\texttt{\qquad let\%map b = b\_opt in}\newline
&amp;amp;\texttt{\qquad a + b}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>This is much more elegant than &amp;ldquo;if-statement spamming&amp;rdquo; (or in OCaml, &amp;ldquo;pattern match spamming&amp;rdquo;).&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let option\_plus (a\_opt : int Option) (b\_opt : int Option) : int Option =}\newline
&amp;amp;\texttt{\qquad match a\_opt with}\newline
&amp;amp;\texttt{\qquad \qquad None -&amp;gt; None}\newline
&amp;amp;\texttt{\qquad \quad | Some a -&amp;gt;}\newline
&amp;amp;\texttt{\qquad \qquad (match b\_opt with}\newline
&amp;amp;\texttt{\qquad \qquad \qquad None -&amp;gt; None}\newline
&amp;amp;\texttt{\qquad \quad \qquad | Some b -&amp;gt; a + b)}
\end{align*}
$$&lt;/p>
&lt;/div>
&lt;h3 id="result">Result&lt;/h3>
&lt;h4 id="definition-2">Definition&lt;/h4>
&lt;p>Results allow values to have a fail condition. They are like options except we can tag the $\texttt{None}$ case with information (i.e. error information).&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{type (&amp;lsquo;a, &amp;lsquo;b) Result =}\newline
&amp;amp;\texttt{\quad | Ok of &amp;lsquo;a}\newline
&amp;amp;\texttt{\quad | Error of &amp;lsquo;b}\newline
&amp;amp;\newline
&amp;amp;\texttt{let return a = Ok a }\newline
&amp;amp;\texttt{let bind a\_res f =}\newline
&amp;amp;\texttt{\qquad match a\_res with}\newline
&amp;amp;\texttt{\qquad \qquad Ok a -&amp;gt; f a}\newline
&amp;amp;\texttt{\qquad \quad | Error \_ as err -&amp;gt; err}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The $\texttt{Error \_ as err -&amp;gt; err}$ just assigns the entire result into $\texttt{err}$. Alternatively, we could have written $\texttt{Error e -&amp;gt; Error e}$.&lt;/p>
&lt;/div>
&lt;h4 id="use-1">Use&lt;/h4>
&lt;p>Suppose we have a function $\texttt{input: unit -&amp;gt; string}$ which reads from $\texttt{stdin}$.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The $\texttt{unit}$ type has only one possible value: $\texttt{()}$. It is useful for when we want a function that requires zero arguments.&lt;/p>
&lt;/div>
&lt;p>Suppose we have a function which attempts to convert a $\texttt{string}$ to an $\texttt{int}$ and stores the error as a $\texttt{string}$.&lt;/p>
&lt;p>$$\texttt{atoi: string -&amp;gt; (int, string) Result}$$&lt;/p>
&lt;p>Now, let&amp;rsquo;s write a function to add two user inputs.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let add\_user\_inputs (() : unit) : (int, string) Result =}\newline
&amp;amp;\texttt{\qquad let\%bind a = input () |&amp;gt; atoi in}\newline
&amp;amp;\texttt{\qquad let\%map b = input () |&amp;gt; atoi in}\newline
&amp;amp;\texttt{\qquad a + b}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$\texttt{input () |&amp;gt; atoi}$ is syntactic sugar for $\texttt{atoi (input ())}$&lt;/p>
&lt;/div>
&lt;h3 id="deferred">Deferred&lt;/h3>
&lt;h4 id="definition-3">Definition&lt;/h4>
&lt;p>Deferreds allow us to make asynchronous computation. The implementation is a bit more involved, since the idea is computation is queued to a scheduler within a deferred monad. For this reason, &lt;em>the following code is pseudocode&lt;/em>.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{type &amp;lsquo;a Deferred =}\newline
&amp;amp;\texttt{\quad | Determined of &amp;lsquo;a}\newline
&amp;amp;\texttt{\quad | Undetermined}\newline
&amp;amp;\newline
&amp;amp;\texttt{let return a = Determined a }\newline
&amp;amp;\texttt{let bind a\_def f = &amp;hellip;}\newline
&amp;amp;\texttt{(* f is queued on the scheduler. The return value of the bind}\newline
&amp;amp;\texttt{ * (call it x) resolves immediately to undetermined. Upon f&amp;rsquo;s}\newline
&amp;amp;\texttt{ * execution completion, x becomes a determined. Monadic chains}\newline
&amp;amp;\texttt{ * (bind to bind to &amp;hellip; to bind to map) continue asynchronously}\newline
&amp;amp;\texttt{ * on x.}\newline
&amp;amp;\texttt{ *}\newline
&amp;amp;\texttt{ * These deferred monadic chains are &amp;ldquo;upon&amp;rdquo; computations.}\newline
&amp;amp;\texttt{ *)}\newline
\end{align*}
$$&lt;/p>
&lt;h4 id="use-2">Use&lt;/h4>
&lt;p>Suppose we have a function write a function to crawl a webpage and click all links and print visited urls. The function halts once it has reached a given depth (all links on the first page result have depth $1$; all of their links have depth $2$; etc).&lt;/p>
&lt;p>Here are the functions we are given to use:&lt;/p>
&lt;ul>
&lt;li>$\texttt{print: string -&amp;gt; unit}$ outputs to $\texttt{stdout}$&lt;/li>
&lt;li>$\texttt{curl: string -&amp;gt; string Deferred}$ queries the web for an html page given its web address&lt;/li>
&lt;li>$\texttt{get\_links: string -&amp;gt; string List}$ grabs a list of all links on an html page&lt;/li>
&lt;li>$\texttt{List.map: &amp;lsquo;a List -&amp;gt; (&amp;lsquo;a -&amp;gt; &amp;lsquo;b) -&amp;gt; &amp;lsquo;b List}$ takes a list of items and performs a computation on all of its elements&lt;/li>
&lt;li>$\texttt{Deferred.all: &amp;lsquo;a Deferred List -&amp;gt; &amp;lsquo;a List Deferred}$ transforms a list of deferreds into a single deferred holding a list&lt;/li>
&lt;/ul>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Notice the $\texttt{List.map}$. Indeed there exists a list monad! We will not be covering it.&lt;/p>
&lt;/div>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let crawl (i : int) (url : string) : unit Deferred =}\newline
&amp;amp;\texttt{\qquad let () = print url in}\newline
&amp;amp;\texttt{\qquad if i = 0 then return () else}\newline
&amp;amp;\texttt{\qquad let j = i - 1 in}\newline
&amp;amp;\texttt{\qquad let\%bind html = curl url in}\newline
&amp;amp;\texttt{\qquad let links = get\_links html in}\newline
&amp;amp;\texttt{\qquad let crawls = List.map links (crawl j) in}\newline
&amp;amp;\texttt{\qquad let\%map (\_ : unit List) = Deferred.all crawls in}\newline
&amp;amp;\texttt{\qquad ()}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Note that $\texttt{crawl}$ is non-blocking. If we call it, it will immediately return a $\texttt{unit Deferred}$ and we can continue the program ($\texttt{crawl}$ is queued by the scheduler). If at any point, we want to block until $\texttt{crawl}$ completes, we can monadic bind on the $\texttt{unit Deferred}$ return value.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{let unit\_def = crawl 5 &amp;ldquo;https://www.wikipedia.org&amp;rdquo; in}\newline
&amp;amp;\texttt{(* &amp;hellip; do some stuff &amp;hellip; *)}\newline
&amp;amp;\texttt{let\%map () = unit\_def in ()}\newline
\end{align*}
$$&lt;/p>
&lt;/div></description></item><item><title>Dynamic Dispatch: Memory Organization</title><link>https://kiblitz.github.io/p/dynamic-dispatch/</link><pubDate>Fri, 14 Jul 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/dynamic-dispatch/</guid><description>&lt;img src="https://kiblitz.github.io/p/dynamic-dispatch/blocks.jpg" alt="Featured image of post Dynamic Dispatch: Memory Organization" />&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Suppose a class and its two children have the following structures.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{class Pet:}\newline
&amp;amp;\texttt{\qquad string name}\newline
&amp;amp;\texttt{\qquad int age}
&amp;amp;\newline
&amp;amp;\newline
&amp;amp;\texttt{class Cat extends Pet:}\newline
&amp;amp;\texttt{\qquad string catBreed}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{class Dog extends Pet:}\newline
&amp;amp;\texttt{\qquad string dogBreed}
\end{align*}
$$&lt;/p>
&lt;p>So maybe a person wants to keep track of their pets. Since both $\texttt{Cat}$ and $\texttt{Dog}$ are &lt;a class="link" href="https://kiblitz.github.io/p/subtyping/" >subtypes&lt;/a> of $\texttt{Pet}$, we can store them in a $\texttt{Pet}$ array.&lt;/p>
&lt;p>$$\texttt{Pet[] pets}$$&lt;/p>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Note that elements in $\texttt{pets}$ won&amp;rsquo;t know if they are a $\texttt{Cat}$ or $\texttt{Dog}$ so we can only access fields that belong to $\texttt{Pet}$ ($\texttt{name}$ and $\texttt{age}$).&lt;/p>
&lt;/div>
&lt;h2 id="single-inheritance">Single Inheritance&lt;/h2>
&lt;p>If a $\texttt{Pet}$ doesn&amp;rsquo;t know if it is a $\texttt{Cat}$ or a $\texttt{Dog}$, we need to make sure that the procedure for accessing $\texttt{name}$ and $\texttt{age}$ is the same in both of its children.&lt;/p>
&lt;h3 id="fields">Fields&lt;/h3>
&lt;p>What if we put the parent ($\texttt{Pet}$) fields at the top of the memory structure.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 552 137"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,16 L 72,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,16 L 200,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,16 L 328,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,48 L 72,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,48 L 200,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,48 L 328,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,80 L 72,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,80 L 200,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,80 L 328,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,112 L 200,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,112 L 328,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 L 0,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,48 L 0,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,16 L 72,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,48 L 72,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,16 L 104,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,48 L 104,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,80 L 104,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,16 L 200,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,48 L 200,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,80 L 200,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,16 L 232,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,48 L 232,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,80 L 232,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,16 L 328,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,48 L 328,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,80 L 328,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='24' y='4' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='32' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='32' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='40' y='4' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='40' y='36' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='40' y='68' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='48' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='120' y='100' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='128' y='100' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='136' y='36' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='136' y='100' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='144' y='4' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='144' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='144' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='144' y='100' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='152' y='4' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='152' y='36' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='152' y='68' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='152' y='100' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='160' y='4' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='160' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='160' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='160' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='168' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='168' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='176' y='100' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='184' y='100' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='248' y='100' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='256' y='100' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='264' y='36' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='264' y='100' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='272' y='4' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='272' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='272' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='272' y='100' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='280' y='4' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='280' y='36' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='280' y='68' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='280' y='100' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='288' y='4' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='288' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='288' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='288' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='296' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='296' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='304' y='100' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='312' y='100' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Strings are just pointers (*) since there is no bound on string length.&lt;/p>
&lt;/div>
&lt;p>Now, no matter what a $\texttt{Pet pet}$ actually is, $\texttt{pet+0x0}$ is going to be $\texttt{name}$, and $\texttt{pet+0x8}$ is going to be $\texttt{age}$.&lt;/p>
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>This is in our theoretical memory model, though the effect would be similar in your favorite programming language.&lt;/p>
&lt;/div>
&lt;h3 id="non-virtual-functions">Non-virtual Functions&lt;/h3>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Think of non-virtual functions as just normal class methods. We will discuss virtual functions afterwards.&lt;/p>
&lt;/div>
&lt;p>Now, let&amp;rsquo;s add a function to our class hierarchy.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{class Pet:}\newline
&amp;amp;\texttt{\qquad string name}\newline
&amp;amp;\texttt{\qquad int age}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{\qquad void noise():}\newline
&amp;amp;\texttt{\qquad\qquad print(&amp;ldquo;pet noises&amp;rdquo;)}
\end{align*}
$$&lt;/p>
&lt;p>Could we do the same thing?&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 552 265"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,16 L 72,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,16 L 200,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,16 L 328,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,48 L 72,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,48 L 200,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,48 L 328,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,80 L 72,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,80 L 200,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,80 L 328,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,112 L 72,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,112 L 200,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,112 L 328,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,144 L 200,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,144 L 328,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,208 L 64,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,240 L 64,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 L 0,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,48 L 0,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,80 L 0,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,208 L 0,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,208 L 64,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,16 L 72,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,48 L 72,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,80 L 72,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,16 L 104,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,48 L 104,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,80 L 104,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,112 L 104,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,16 L 200,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,48 L 200,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,80 L 200,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,112 L 200,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,16 L 232,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,48 L 232,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,80 L 232,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,112 L 232,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,16 L 328,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,48 L 328,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,80 L 328,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,112 L 328,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='100' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='16' y='196' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='16' y='228' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='24' y='4' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='24' y='100' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='24' y='196' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='24' y='228' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='32' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='32' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='32' y='100' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='32' y='196' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='32' y='228' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='40' y='4' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='40' y='36' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='40' y='68' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='40' y='100' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='40' y='196' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='40' y='228' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='48' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='48' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='48' y='196' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='48' y='228' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='56' y='100' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='120' y='132' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='128' y='132' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='136' y='36' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='136' y='100' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='136' y='132' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='144' y='4' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='144' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='144' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='144' y='100' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='144' y='132' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='152' y='4' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='152' y='36' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='152' y='68' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='152' y='100' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='152' y='132' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='160' y='4' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='160' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='160' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='160' y='100' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='160' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='168' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='168' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='168' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='176' y='100' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='176' y='132' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='184' y='132' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='248' y='132' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='256' y='132' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='264' y='36' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='264' y='100' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='264' y='132' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='272' y='4' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='272' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='272' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='272' y='100' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='272' y='132' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='280' y='4' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='280' y='36' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='280' y='68' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='280' y='100' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='280' y='132' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='288' y='4' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='288' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='288' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='288' y='100' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='288' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='296' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='296' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='296' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='304' y='100' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='304' y='132' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='312' y='132' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$\texttt{.data}$ just stores the function definition.&lt;/p>
&lt;/div>
&lt;p>While this is correct, we can optimize based on the observation that method definitions are shared between all objects of the same class.&lt;/p>
&lt;p>First, note that a method call $\texttt{pet.noise()}$ is syntactic sugar for $\texttt{Pet.noise(pet)}$ (object is passed as parameter). Since $\texttt{noise}$ is not specific to the object $\texttt{pet}$, it can be resolved at compile-time.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 552 233"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,16 L 72,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,16 L 200,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,16 L 328,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,48 L 72,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,48 L 200,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,48 L 328,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,80 L 72,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,80 L 200,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,80 L 328,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,112 L 200,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,112 L 328,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,176 L 64,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,208 L 64,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 L 0,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,48 L 0,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,176 L 0,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,176 L 64,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,16 L 72,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,48 L 72,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,16 L 104,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,48 L 104,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,80 L 104,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,16 L 200,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,48 L 200,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,80 L 200,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,16 L 232,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,48 L 232,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,80 L 232,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,16 L 328,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,48 L 328,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,80 L 328,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='164' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='16' y='196' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='24' y='4' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='24' y='164' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='24' y='196' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='32' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='32' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='32' y='164' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='32' y='196' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='40' y='4' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='40' y='36' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='40' y='68' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='40' y='164' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='40' y='196' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='48' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='48' y='164' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='48' y='196' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='120' y='100' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='128' y='100' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='136' y='36' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='136' y='100' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='144' y='4' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='144' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='144' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='144' y='100' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='152' y='4' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='152' y='36' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='152' y='68' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='152' y='100' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='160' y='4' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='160' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='160' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='160' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='168' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='168' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='176' y='100' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='184' y='100' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='248' y='100' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='256' y='100' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='264' y='36' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='264' y='100' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='272' y='4' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='272' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='272' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='272' y='100' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='280' y='4' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='280' y='36' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='280' y='68' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='280' y='100' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='288' y='4' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='288' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='288' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='288' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='296' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='296' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='304' y='100' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='312' y='100' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Everytime $\texttt{Pet.noise(pet)}$ is called, just replace it (at compile-time) with the known address of $\texttt{Pet.noise}$ (in our memory model: $\texttt{.data+0x0}$).&lt;/p>
&lt;hr>
&lt;p>For example:&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{Cat cat}\newline
&amp;amp;\texttt{Dog dog}\newline
&amp;amp;\texttt{cat.noise()}\newline
&amp;amp;\texttt{dog.noise()}\newline
\newline
&amp;amp;\implies\newline
\newline
&amp;amp;\texttt{Cat cat}\newline
&amp;amp;\texttt{Dog dog}\newline
&amp;amp;\texttt{(.data+0x0)(cat)}\newline
&amp;amp;\texttt{(.data+0x0)(dog)}
\end{align*}
$$&lt;/p>
&lt;/div>
&lt;p>We save space on every object holding a pointer to $\texttt{noise}$ ($\texttt{+0x8}$ size per object).&lt;/p>
&lt;h3 id="virtual-functions">Virtual Functions&lt;/h3>
&lt;h4 id="introduction-1">Introduction&lt;/h4>
&lt;p>The heart of inheritance is the concept of a virtual function. The idea is that an inherited method can take different definitions depending on the class hierarchy lineage.&lt;/p>
&lt;p>Let&amp;rsquo;s take our code from above and modify it so that $\texttt{noise}$ is a virtual function.&lt;/p>
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Other class data omitted.&lt;/p>
&lt;/div>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{class Pet:}\newline
&amp;amp;\texttt{\qquad void noise():}\newline
&amp;amp;\texttt{\qquad\qquad print(&amp;ldquo;pet noises&amp;rdquo;)}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{class Cat extends Pet:}\newline
&amp;amp;\texttt{\qquad void noise():}\newline
&amp;amp;\texttt{\qquad\qquad print(&amp;ldquo;meow&amp;rdquo;)}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{class Dog extends Pet:}\newline
&amp;amp;\texttt{\qquad void noise():}\newline
&amp;amp;\texttt{\qquad\qquad print(&amp;ldquo;bark&amp;rdquo;)}
\end{align*}
$$&lt;/p>
&lt;p>The children can override the definition of a virtual method (in this case, $\texttt{noise}$).&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Note that if the child does not provide a definition override, it keeps the parent&amp;rsquo;s definition (recursively).&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{class Fish extends Pet:}\newline
&amp;amp;\texttt{\qquad string color}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{Fish fish}\newline
&amp;amp;\texttt{fish.noise()\qquad\thickspace\thickspace// &amp;ldquo;pet noises&amp;rdquo;}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{class Betta extends Fish:}\newline
&amp;amp;\texttt{\qquad string bettaSpecies}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{Betta betta}\newline
&amp;amp;\texttt{betta.noise()\qquad// &amp;ldquo;pet noises&amp;rdquo;}
\end{align*}
$$&lt;/p>
&lt;/div>
&lt;p>The issue now is that we cannot know at compile-time which virtual function (in this case $\texttt{noise}$) to call.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{Pet[] pets = [Cat(), Dog()]}\newline
&amp;amp;\texttt{pets[0].noise()\qquad// Cat.noise() -&amp;gt; &amp;ldquo;meow&amp;rdquo;}\newline
&amp;amp;\texttt{pets[1].noise()\qquad// Dog.noise() -&amp;gt; &amp;ldquo;bark&amp;rdquo;}
\end{align*}
$$&lt;/p>
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>One (naive) solution is to again provide the function pointer as part of the object&amp;rsquo;s structure.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 552 329"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,16 L 104,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,16 L 240,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,16 L 376,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,48 L 104,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,48 L 240,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,48 L 376,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,80 L 104,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,80 L 240,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,80 L 376,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,112 L 104,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,112 L 240,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,112 L 376,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,144 L 240,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,144 L 376,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,208 L 96,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,240 L 96,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,272 L 96,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,304 L 96,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 L 0,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,48 L 0,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,80 L 0,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,208 L 0,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,240 L 0,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,272 L 0,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,208 L 96,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,240 L 96,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,272 L 96,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,16 L 104,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,48 L 104,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,80 L 104,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,16 L 136,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,48 L 136,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,80 L 136,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,112 L 136,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,16 L 240,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,48 L 240,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,80 L 240,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,112 L 240,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,16 L 272,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,48 L 272,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,80 L 272,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,112 L 272,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 376,16 L 376,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 376,48 L 376,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 376,80 L 376,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 376,112 L 376,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='100' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='16' y='228' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='16' y='260' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='16' y='292' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='24' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='24' y='228' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='24' y='260' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='24' y='292' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='32' y='100' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='32' y='196' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='32' y='228' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='32' y='260' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='32' y='292' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='40' y='4' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='40' y='36' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='40' y='100' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='40' y='196' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='40' y='228' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='40' y='260' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='40' y='292' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='48' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='48' y='100' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='48' y='196' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='48' y='228' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='48' y='260' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='48' y='292' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='56' y='4' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='56' y='68' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='56' y='100' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='56' y='196' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='56' y='228' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='56' y='260' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='56' y='292' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='64' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='64' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='64' y='100' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='64' y='196' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='64' y='228' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='64' y='260' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='64' y='292' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='72' y='100' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='72' y='228' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='72' y='260' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='72' y='292' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='80' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='80' y='228' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='80' y='260' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='80' y='292' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='88' y='100' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='152' y='100' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='160' y='100' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='160' y='132' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='168' y='100' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='168' y='132' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='176' y='4' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='176' y='36' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='176' y='100' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='176' y='132' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='184' y='4' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='184' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='184' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='184' y='100' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='184' y='132' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='192' y='4' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='192' y='36' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='192' y='68' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='192' y='100' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='192' y='132' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='200' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='200' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='200' y='100' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='200' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='208' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='208' y='100' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='208' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='216' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='216' y='132' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='224' y='100' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='224' y='132' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='288' y='100' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='296' y='100' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='296' y='132' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='304' y='100' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='304' y='132' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='312' y='4' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='312' y='36' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='312' y='100' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='312' y='132' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='320' y='4' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='320' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='320' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='320' y='100' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='320' y='132' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='328' y='4' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='328' y='36' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='328' y='68' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='328' y='100' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='328' y='132' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='336' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='336' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='336' y='100' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='336' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='344' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='344' y='100' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='344' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='352' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='352' y='132' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='360' y='100' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='360' y='132' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>But again, objects of the same type share the same set of virtual functions (every $\texttt{Cat}$ is going to have the same $\texttt{noise=cat+0x10}$ value).&lt;/p>
&lt;/div>
&lt;h4 id="vtable">Vtable&lt;/h4>
&lt;p>Enter the &lt;a class="link" href="https://en.wikipedia.org/wiki/Virtual_method_table" target="_blank" rel="noopener"
>virtual method table&lt;/a>. Every object in a class hierarchy (with virtual methods) now also contains a pointer (virtual pointer) to a table (virtual table) containing all of the virtual methods.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 552 425"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,16 L 112,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,16 L 256,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,16 L 400,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,48 L 112,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,48 L 256,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,48 L 400,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,80 L 112,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,80 L 256,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,80 L 400,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,112 L 112,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,112 L 256,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,112 L 400,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,144 L 256,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,144 L 400,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,208 L 104,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,208 L 240,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,208 L 384,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,240 L 104,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,240 L 240,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,240 L 384,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,304 L 96,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,336 L 96,336' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,368 L 96,368' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,400 L 96,400' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 L 0,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,48 L 0,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,80 L 0,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,208 L 0,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,304 L 0,336' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,336 L 0,368' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,368 L 0,400' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,304 L 96,336' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,336 L 96,368' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,368 L 96,400' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,208 L 104,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,16 L 112,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,48 L 112,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,80 L 112,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,208 L 136,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,16 L 144,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,48 L 144,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,80 L 144,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,112 L 144,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,208 L 240,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,16 L 256,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,48 L 256,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,80 L 256,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,112 L 256,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,208 L 280,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,16 L 288,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,48 L 288,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,80 L 288,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,112 L 288,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,208 L 384,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,16 L 400,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,48 L 400,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,80 L 400,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,112 L 400,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='36' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='16' y='196' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='16' y='228' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='16' y='324' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='16' y='356' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='16' y='388' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='24' y='196' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='24' y='228' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='24' y='324' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='24' y='356' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='24' y='388' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='32' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='32' y='196' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='32' y='228' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='32' y='292' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='32' y='324' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='32' y='356' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='32' y='388' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='40' y='4' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='40' y='36' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='40' y='68' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='40' y='196' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='40' y='228' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='40' y='292' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='40' y='324' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='40' y='356' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='40' y='388' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='48' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='48' y='100' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='48' y='196' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='48' y='228' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='48' y='292' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='48' y='324' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='48' y='356' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='48' y='388' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='56' y='4' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='56' y='68' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='56' y='100' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='56' y='196' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='56' y='228' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='56' y='292' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='56' y='324' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='56' y='356' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='56' y='388' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='64' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='64' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='64' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='64' y='196' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='64' y='228' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='64' y='292' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='64' y='324' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='64' y='356' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='64' y='388' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='72' y='68' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='72' y='196' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='72' y='228' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='72' y='324' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='72' y='356' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='72' y='388' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='80' y='36' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='80' y='196' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='80' y='228' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='80' y='324' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='80' y='356' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='80' y='388' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='88' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='88' y='196' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='88' y='228' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='96' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='152' y='196' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='152' y='228' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='160' y='36' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='160' y='196' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='160' y='228' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='168' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='168' y='132' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='168' y='196' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='168' y='228' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='176' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='176' y='132' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='176' y='196' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='176' y='228' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='184' y='36' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='184' y='68' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='184' y='132' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='184' y='196' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='184' y='228' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='192' y='4' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='192' y='36' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='192' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='192' y='100' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='192' y='132' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='192' y='196' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='192' y='228' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='200' y='4' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='200' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='200' y='68' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='200' y='100' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='200' y='132' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='200' y='196' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='200' y='228' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='208' y='4' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='208' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='208' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='208' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='208' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='208' y='196' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='208' y='228' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='216' y='36' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='216' y='68' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='216' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='216' y='196' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='216' y='228' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='224' y='36' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='224' y='132' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='224' y='196' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='224' y='228' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='232' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='232' y='132' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='240' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='296' y='196' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='296' y='228' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='304' y='36' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='304' y='196' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='304' y='228' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='312' y='36' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='312' y='132' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='312' y='196' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='312' y='228' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='320' y='36' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='320' y='132' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='320' y='196' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='320' y='228' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='328' y='36' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='328' y='68' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='328' y='132' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='328' y='196' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='328' y='228' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='336' y='4' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='336' y='36' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='336' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='336' y='100' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='336' y='132' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='336' y='196' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='336' y='228' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='344' y='4' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='344' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='344' y='68' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='344' y='100' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='344' y='132' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='344' y='196' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='344' y='228' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='352' y='4' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='352' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='352' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='352' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='352' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='352' y='196' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='352' y='228' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='360' y='36' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='360' y='68' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='360' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='360' y='196' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='360' y='228' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='368' y='36' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='368' y='132' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='368' y='196' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='368' y='228' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='376' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='376' y='132' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='384' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>In this case, there is more memory used than in our naive approach. But for every additional virtual function, under the naive approach every object increases in size linearly.&lt;/p>
&lt;p>With vtables, only the appropriate vtable sizes increase (and it is expected that there are significantly less vtables than object instances).&lt;/p>
&lt;/div>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{Pet[] pets = [Cat(), Dog()]}\newline
&amp;amp;\texttt{pets[0].noise()}\newline
&amp;amp;\texttt{pets[1].noise()}\newline
&amp;amp;\texttt{/* }\newline
&amp;amp;\texttt{ * vptr = pets[\textit{x}]+0x0}\newline
&amp;amp;\texttt{ * vtable = \&amp;amp;vptr}\newline
&amp;amp;\texttt{ * noise = vtable+0x0}\newline
&amp;amp;\texttt{ */}
\end{align*}
$$&lt;/p>
&lt;p>This also works with inheritance lineages. Suppose that $\texttt{Pet}$ is a child class of $\texttt{Thing}$.&lt;/p>
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Other class data omitted.&lt;/p>
&lt;/div>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{class Thing:}\newline
&amp;amp;\texttt{\qquad string class():}\newline
&amp;amp;\texttt{\qquad \qquad return &amp;ldquo;Thing&amp;rdquo;}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{class Pet extends Thing:}\newline
&amp;amp;\texttt{\qquad string class():}\newline
&amp;amp;\texttt{\qquad \qquad return &amp;ldquo;Pet&amp;rdquo;}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{class Dog extends Pet:}\newline
&amp;amp;\texttt{\qquad string class():}\newline
&amp;amp;\texttt{\qquad \qquad return &amp;ldquo;Dog&amp;rdquo;}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{class Cat extends Pet:}\newline
&amp;amp;\texttt{\qquad string class():}\newline
&amp;amp;\texttt{\qquad \qquad return &amp;ldquo;Cat&amp;rdquo;}
\end{align*}
$$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 552 761"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,32 L 128,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,64 L 128,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,112 L 112,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,112 L 256,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,112 L 400,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,144 L 112,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,144 L 256,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,144 L 400,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,176 L 112,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,176 L 256,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,176 L 400,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,208 L 112,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,208 L 256,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,208 L 400,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,240 L 256,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,240 L 400,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,304 L 120,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,336 L 120,336' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,384 L 104,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,384 L 240,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,384 L 384,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,416 L 104,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,416 L 240,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,416 L 384,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,448 L 104,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,448 L 240,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,448 L 384,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,512 L 112,512' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,544 L 112,544' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,576 L 112,576' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,608 L 112,608' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,640 L 112,640' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,672 L 112,672' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,704 L 112,704' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,736 L 112,736' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,32 L 0,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,112 L 0,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,144 L 0,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,176 L 0,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,304 L 0,336' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,384 L 0,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,416 L 0,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,512 L 0,544' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,544 L 0,576' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,576 L 0,608' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,608 L 0,640' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,640 L 0,672' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,672 L 0,704' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,704 L 0,736' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,384 L 104,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,416 L 104,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,112 L 112,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,144 L 112,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,176 L 112,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,512 L 112,544' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,544 L 112,576' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,576 L 112,608' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,608 L 112,640' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,640 L 112,672' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,672 L 112,704' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,704 L 112,736' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,304 L 120,336' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,32 L 128,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,384 L 136,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,416 L 136,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,112 L 144,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,144 L 144,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,176 L 144,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,208 L 144,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,384 L 240,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,416 L 240,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,112 L 256,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,144 L 256,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,176 L 256,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,208 L 256,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,384 L 280,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,416 L 280,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,112 L 288,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,144 L 288,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,176 L 288,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,208 L 288,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,384 L 384,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,416 L 384,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,112 L 400,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,144 L 400,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,176 L 400,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,208 L 400,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='52' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='16' y='132' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='16' y='292' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='16' y='324' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='16' y='372' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='16' y='404' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='16' y='436' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='16' y='532' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='24' y='52' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='24' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='24' y='292' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='24' y='324' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='24' y='372' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='24' y='404' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='24' y='436' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='24' y='532' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='24' y='564' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='24' y='596' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='24' y='628' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='24' y='660' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='24' y='692' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='24' y='724' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='32' y='52' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='32' y='132' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='32' y='292' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='32' y='324' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='32' y='372' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='32' y='404' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='32' y='436' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='32' y='500' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='32' y='532' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='32' y='564' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='32' y='596' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='32' y='628' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='32' y='660' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='32' y='692' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='32' y='724' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='40' y='52' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='40' y='100' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='40' y='132' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='40' y='164' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='40' y='292' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='40' y='324' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='40' y='372' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='40' y='404' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='40' y='436' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='40' y='500' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='40' y='532' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='40' y='564' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='40' y='596' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='40' y='628' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='40' y='660' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='40' y='692' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='40' y='724' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='48' y='20' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='48' y='52' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='48' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='48' y='132' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='48' y='164' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='48' y='196' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='48' y='292' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='48' y='324' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='48' y='372' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='48' y='404' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='48' y='436' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='48' y='500' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='48' y='532' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='48' y='564' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='48' y='596' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='48' y='628' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='48' y='660' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='48' y='692' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='48' y='724' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='56' y='20' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='56' y='52' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='56' y='100' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='56' y='132' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='56' y='164' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='56' y='196' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='56' y='292' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='56' y='324' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='56' y='372' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='56' y='404' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='56' y='436' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='56' y='500' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='56' y='532' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='56' y='564' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='56' y='596' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='56' y='628' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='56' y='660' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='56' y='692' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='56' y='724' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='64' y='52' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='64' y='132' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='64' y='164' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='64' y='196' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='64' y='292' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='64' y='324' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='64' y='372' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='64' y='404' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='64' y='436' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='64' y='500' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='64' y='532' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='64' y='564' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='64' y='596' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='64' y='628' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='64' y='660' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='64' y='692' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='64' y='724' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='72' y='20' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='72' y='52' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='72' y='132' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='72' y='164' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='72' y='292' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='72' y='324' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='72' y='372' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='72' y='404' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='72' y='436' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='72' y='532' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='72' y='564' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='72' y='596' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='72' y='628' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='72' y='660' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='72' y='692' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='72' y='724' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='80' y='20' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='80' y='52' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='80' y='132' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='80' y='292' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='80' y='324' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='80' y='372' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='80' y='404' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='80' y='436' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='80' y='532' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='80' y='564' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='80' y='596' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='80' y='628' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='80' y='660' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='80' y='692' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='80' y='724' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='88' y='52' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='88' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='88' y='292' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='88' y='324' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='88' y='372' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='88' y='404' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='88' y='436' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='88' y='532' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='88' y='564' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='88' y='596' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='88' y='628' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='88' y='660' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='88' y='692' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='88' y='724' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='96' y='52' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='96' y='132' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='96' y='292' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='96' y='324' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='96' y='532' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='104' y='52' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='104' y='292' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='104' y='324' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='112' y='52' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='152' y='372' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='152' y='404' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='152' y='436' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='160' y='132' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='160' y='372' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='160' y='404' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='160' y='436' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='168' y='132' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='168' y='228' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='168' y='372' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='168' y='404' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='168' y='436' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='176' y='132' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='176' y='228' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='176' y='372' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='176' y='404' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='176' y='436' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='184' y='132' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='184' y='164' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='184' y='228' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='184' y='372' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='184' y='404' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='184' y='436' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='192' y='100' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='192' y='132' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='192' y='164' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='192' y='196' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='192' y='228' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='192' y='372' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='192' y='404' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='192' y='436' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='200' y='100' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='200' y='132' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='200' y='164' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='200' y='196' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='200' y='228' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='200' y='372' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='200' y='404' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='200' y='436' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='208' y='100' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='208' y='132' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='208' y='164' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='208' y='196' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='208' y='228' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='208' y='372' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='208' y='404' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='208' y='436' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='216' y='132' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='216' y='164' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='216' y='228' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='216' y='372' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='216' y='404' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='216' y='436' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='224' y='132' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='224' y='228' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='224' y='372' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='224' y='404' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='224' y='436' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='232' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='232' y='228' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='240' y='132' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='296' y='372' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='296' y='404' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='296' y='436' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='304' y='132' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='304' y='372' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='304' y='404' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='304' y='436' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='312' y='132' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='312' y='228' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='312' y='372' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='312' y='404' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='312' y='436' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='320' y='132' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='320' y='228' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='320' y='372' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='320' y='404' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='320' y='436' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='328' y='132' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='328' y='164' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='328' y='228' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='328' y='372' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='328' y='404' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='328' y='436' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='336' y='100' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='336' y='132' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='336' y='164' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='336' y='196' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='336' y='228' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='336' y='372' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='336' y='404' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='336' y='436' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='344' y='100' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='344' y='132' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='344' y='164' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='344' y='196' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='344' y='228' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='344' y='372' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='344' y='404' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='344' y='436' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='352' y='100' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='352' y='132' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='352' y='164' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='352' y='196' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='352' y='228' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='352' y='372' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='352' y='404' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='352' y='436' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='360' y='132' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='360' y='164' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='360' y='228' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='360' y='372' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='360' y='404' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='360' y='436' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='368' y='132' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='368' y='228' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='368' y='372' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='368' y='404' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='368' y='436' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='376' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='376' y='228' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='384' y='132' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The only constraint is that &lt;em>parent virtual functions should be represented in memory before child virtual functions&lt;/em>. Doing so keeps an ordering across a lineage. In this case, the $\texttt{class}$ virtual function will always be at $\texttt{vtable+0x0}$ for any class that has that function.&lt;/p>
&lt;/div>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>If a class doesn&amp;rsquo;t have that virtual function, the type checker would catch the error at compile time (i.e. $\texttt{Thing.noise()}$).&lt;/p>
&lt;/div>
&lt;h2 id="multiple-inheritance">Multiple Inheritance&lt;/h2>
&lt;h3 id="introduction-2">Introduction&lt;/h3>
&lt;p>New example.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{class Printable:}\newline
&amp;amp;\texttt{\qquad string output}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{\qquad void print():}\newline
&amp;amp;\texttt{\qquad \qquad print(output)}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{class Stringable:}\newline
&amp;amp;\texttt{\qquad string value}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{\qquad string toString():}\newline
&amp;amp;\texttt{\qquad \qquad return value}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{class Person extends Printable, Stringable:}\newline
&amp;amp;\texttt{\qquad string name}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{\qquad void print():}\newline
&amp;amp;\texttt{\qquad \qquad print(output)}\newline
&amp;amp;\texttt{\qquad \qquad print(value)}\newline
&amp;amp;\texttt{\qquad \qquad print(name)}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{\qquad string toString():}\newline
&amp;amp;\texttt{\qquad \qquad return output + value + name}
\end{align*}
$$&lt;/p>
&lt;p>Ok, so now we can have two parents. How can we possibly represent this in memory?&lt;/p>
&lt;h3 id="the-problem">The Problem&lt;/h3>
&lt;p>What ordering can we keep?&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 552 297"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,16 L 160,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,16 L 360,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,16 L 528,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,48 L 160,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,48 L 360,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,48 L 528,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,80 L 160,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,80 L 360,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,80 L 528,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,112 L 528,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,144 L 528,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,208 L 152,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,208 L 360,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,208 L 536,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,240 L 152,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,240 L 360,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,240 L 536,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,272 L 536,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 L 0,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,48 L 0,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,208 L 0,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,208 L 152,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,16 L 160,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,48 L 160,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,208 L 184,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,16 L 192,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,48 L 192,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,16 L 360,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,48 L 360,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,208 L 360,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,16 L 392,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,48 L 392,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,80 L 392,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,112 L 392,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,208 L 392,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,240 L 392,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,16 L 528,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,48 L 528,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,80 L 528,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,112 L 528,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 536,208 L 536,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 536,240 L 536,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='36' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='16' y='196' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='24' y='196' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='24' y='228' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='32' y='36' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='32' y='196' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='32' y='228' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='40' y='36' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='40' y='196' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='40' y='228' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='48' y='196' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='48' y='228' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='56' y='4' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='56' y='68' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='56' y='196' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='56' y='228' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='64' y='4' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='64' y='36' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='64' y='68' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='64' y='196' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='64' y='228' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='72' y='4' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='72' y='68' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='72' y='196' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='72' y='228' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='80' y='4' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='80' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='80' y='68' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='80' y='196' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='80' y='228' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='88' y='4' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='88' y='36' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='88' y='68' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='88' y='196' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='88' y='228' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='96' y='4' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='96' y='36' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='96' y='68' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='96' y='196' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='96' y='228' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='104' y='4' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='104' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='104' y='68' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='104' y='196' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='104' y='228' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='112' y='4' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='112' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='112' y='196' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='112' y='228' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='120' y='36' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='120' y='196' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='120' y='228' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='128' y='36' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='128' y='196' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='128' y='228' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='136' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='136' y='196' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='136' y='228' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='144' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='200' y='228' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='208' y='36' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='208' y='196' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='208' y='228' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='216' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='216' y='196' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='216' y='228' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='224' y='36' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='224' y='196' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='224' y='228' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='232' y='36' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='232' y='196' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='232' y='228' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='240' y='4' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='240' y='36' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='240' y='196' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='240' y='228' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='248' y='4' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='248' y='36' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='248' y='196' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='248' y='228' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='256' y='4' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='256' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='256' y='68' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='256' y='196' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='256' y='228' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='264' y='4' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='264' y='36' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='264' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='264' y='196' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='264' y='228' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='272' y='4' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='272' y='36' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='272' y='68' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='272' y='196' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='272' y='228' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='280' y='4' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='280' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='280' y='68' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='280' y='196' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='280' y='228' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='288' y='4' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='288' y='36' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='288' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='288' y='196' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='288' y='228' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='296' y='4' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='296' y='36' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='296' y='68' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='296' y='196' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='296' y='228' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='304' y='4' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='304' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='304' y='196' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='304' y='228' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='312' y='4' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='312' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='312' y='196' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='312' y='228' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='320' y='36' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='320' y='196' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='320' y='228' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='328' y='36' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='328' y='196' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='328' y='228' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='336' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='336' y='196' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='336' y='228' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='344' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='344' y='228' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='408' y='36' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='408' y='260' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='416' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='416' y='196' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='416' y='260' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='424' y='36' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='424' y='196' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='424' y='228' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='424' y='260' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='432' y='36' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='432' y='196' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='432' y='228' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='432' y='260' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='440' y='4' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='440' y='36' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='440' y='68' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='440' y='100' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='440' y='196' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='440' y='228' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='440' y='260' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='448' y='4' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='448' y='36' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='448' y='68' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='448' y='100' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='448' y='132' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='448' y='196' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='448' y='228' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='448' y='260' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='456' y='4' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='456' y='36' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='456' y='68' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='456' y='100' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='456' y='132' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='456' y='196' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='456' y='228' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='456' y='260' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='464' y='4' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='464' y='36' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='464' y='68' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='464' y='100' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='464' y='132' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='464' y='196' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='464' y='228' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='464' y='260' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='472' y='4' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='472' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='472' y='68' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='472' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='472' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='472' y='196' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='472' y='228' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='472' y='260' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='480' y='4' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='480' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='480' y='68' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='480' y='100' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='480' y='132' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='480' y='196' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='480' y='228' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='480' y='260' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='488' y='36' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='488' y='68' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='488' y='196' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='488' y='228' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='488' y='260' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='496' y='36' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='496' y='196' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='496' y='228' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='496' y='260' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='504' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='504' y='196' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='504' y='228' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='504' y='260' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='512' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='512' y='196' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='512' y='228' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='512' y='260' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='520' y='260' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>If we put $\texttt{print}$ first in the $\texttt{Person}$ vtable, $\texttt{toString}$ calls and $\texttt{value}$ accesses fail.&lt;/p>
&lt;div class="box box-shortcode warning" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#warning-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{Stringable[] stringables = [Stringable(), Person()]}\newline
&amp;amp;\texttt{Stringable[0].toString()}\newline
&amp;amp;\texttt{Stringable[1].toString()}\newline
&amp;amp;\texttt{/* }\newline
&amp;amp;\texttt{ * vptr = stringables[\textit{x}]+0x0}\newline
&amp;amp;\texttt{ * vtable = \&amp;amp;vptr}\newline
&amp;amp;\texttt{ * toString = vtable+???}\newline
&amp;amp;\texttt{ * // 0x0 in Stringable.vtable; 0x8 in Person.vtable}\newline
&amp;amp;\texttt{ */}\newline
&amp;amp;\newline
&amp;amp;\texttt{Stringable[0].value}\newline
&amp;amp;\texttt{Stringable[1].value}\newline
&amp;amp;\texttt{/* }\newline
&amp;amp;\texttt{ * value = stringables[\textit{x}]+???}\newline
&amp;amp;\texttt{ * // 0x0 in Stringable layout; 0x8 in Person layout}\newline
&amp;amp;\texttt{ */}
\end{align*}
$$&lt;/p>
&lt;/div>
&lt;h3 id="the-solution">The Solution&lt;/h3>
&lt;h4 id="part-1-contiguous-layout">Part 1: Contiguous Layout&lt;/h4>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 552 505"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,16 L 160,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,16 L 360,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,48 L 160,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,48 L 360,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,80 L 160,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,80 L 360,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 56,128 L 112,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,128 L 352,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,160 L 352,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,192 L 112,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,192 L 352,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,224 L 352,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,256 L 352,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,288 L 352,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,352 L 152,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,352 L 360,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,384 L 152,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,384 L 360,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,416 L 224,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,416 L 384,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,448 L 224,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,448 L 384,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,480 L 384,480' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 L 0,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,48 L 0,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,352 L 0,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,128 L 128,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,160 L 128,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,192 L 128,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,224 L 128,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,256 L 128,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,352 L 152,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,16 L 160,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,48 L 160,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,352 L 184,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,16 L 192,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,48 L 192,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,416 L 240,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,448 L 240,480' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,128 L 352,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,160 L 352,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,192 L 352,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,224 L 352,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,256 L 352,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,16 L 360,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,48 L 360,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,352 L 360,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,416 L 384,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,448 L 384,480' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='120.000000,128.000000 108.000000,122.400002 108.000000,133.600006' fill='currentColor' transform='rotate(0.000000, 112.000000, 128.000000)'>&lt;/polygon>
&lt;polygon points='120.000000,192.000000 108.000000,186.399994 108.000000,197.600006' fill='currentColor' transform='rotate(0.000000, 112.000000, 192.000000)'>&lt;/polygon>
&lt;polygon points='232.000000,416.000000 220.000000,410.399994 220.000000,421.600006' fill='currentColor' transform='rotate(0.000000, 224.000000, 416.000000)'>&lt;/polygon>
&lt;polygon points='232.000000,448.000000 220.000000,442.399994 220.000000,453.600006' fill='currentColor' transform='rotate(0.000000, 224.000000, 448.000000)'>&lt;/polygon>
&lt;text text-anchor='middle' x='0' y='132' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='0' y='196' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='0' y='420' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='0' y='452' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='8' y='132' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='8' y='196' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='8' y='420' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='8' y='452' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='16' y='36' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='16' y='132' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='16' y='196' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='16' y='340' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='16' y='420' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='16' y='452' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='24' y='132' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='24' y='196' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='24' y='340' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='24' y='372' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='24' y='420' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='24' y='452' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='32' y='36' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='32' y='132' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='32' y='196' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='32' y='340' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='32' y='372' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='32' y='420' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='32' y='452' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='40' y='36' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='40' y='132' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='40' y='196' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='40' y='340' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='40' y='372' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='40' y='420' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='40' y='452' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='48' y='196' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='48' y='340' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='48' y='372' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='48' y='420' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='48' y='452' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='56' y='4' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='56' y='68' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='56' y='196' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='56' y='340' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='56' y='372' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='56' y='420' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='56' y='452' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='64' y='4' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='64' y='36' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='64' y='68' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='64' y='196' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='64' y='340' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='64' y='372' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='64' y='420' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='64' y='452' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='72' y='4' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='72' y='68' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='72' y='196' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='72' y='340' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='72' y='372' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='72' y='420' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='72' y='452' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='80' y='4' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='80' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='80' y='68' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='80' y='340' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='80' y='372' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='80' y='420' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='80' y='452' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='88' y='4' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='88' y='36' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='88' y='68' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='88' y='340' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='88' y='372' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='88' y='420' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='88' y='452' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='96' y='4' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='96' y='36' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='96' y='68' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='96' y='340' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='96' y='372' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='96' y='420' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='96' y='452' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='104' y='4' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='104' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='104' y='68' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='104' y='340' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='104' y='372' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='104' y='420' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='104' y='452' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='112' y='4' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='112' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='112' y='340' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='112' y='372' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='112' y='420' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='112' y='452' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='120' y='36' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='120' y='340' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='120' y='372' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='120' y='420' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='120' y='452' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='128' y='36' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='128' y='340' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='128' y='372' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='128' y='420' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='128' y='452' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='136' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='136' y='340' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='136' y='372' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='136' y='420' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='136' y='452' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='144' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='144' y='212' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='144' y='420' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='144' y='452' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='152' y='148' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='152' y='212' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='152' y='420' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='152' y='452' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='160' y='148' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='160' y='212' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='160' y='420' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='160' y='452' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='168' y='148' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='168' y='212' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='168' y='420' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='168' y='452' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='176' y='148' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='176' y='212' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='176' y='420' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='176' y='452' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='184' y='148' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='184' y='212' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='184' y='452' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='192' y='148' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='192' y='212' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='200' y='148' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='200' y='212' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='200' y='372' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='208' y='36' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='208' y='148' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='208' y='212' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='208' y='340' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='208' y='372' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='216' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='216' y='148' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='216' y='180' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='216' y='212' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='216' y='340' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='216' y='372' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='224' y='36' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='224' y='148' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='224' y='180' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='224' y='212' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='224' y='244' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='224' y='276' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='224' y='340' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='224' y='372' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='232' y='36' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='232' y='148' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='232' y='180' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='232' y='212' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='232' y='244' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='232' y='276' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='232' y='340' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='232' y='372' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='240' y='4' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='240' y='36' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='240' y='148' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='240' y='180' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='240' y='212' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='240' y='244' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='240' y='276' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='240' y='340' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='240' y='372' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='248' y='4' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='248' y='36' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='248' y='148' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='248' y='180' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='248' y='212' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='248' y='244' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='248' y='276' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='248' y='340' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='248' y='372' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='256' y='4' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='256' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='256' y='68' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='256' y='148' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='256' y='180' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='256' y='212' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='256' y='244' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='256' y='276' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='256' y='340' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='256' y='372' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='256' y='468' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='264' y='4' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='264' y='36' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='264' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='264' y='148' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='264' y='180' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='264' y='212' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='264' y='244' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='264' y='340' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='264' y='372' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='264' y='468' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='272' y='4' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='272' y='36' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='272' y='68' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='272' y='148' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='272' y='212' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='272' y='340' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='272' y='372' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='272' y='436' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='272' y='468' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='280' y='4' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='280' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='280' y='68' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='280' y='148' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='280' y='212' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='280' y='340' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='280' y='372' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='280' y='436' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='280' y='468' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='288' y='4' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='288' y='36' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='288' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='288' y='148' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='288' y='212' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='288' y='340' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='288' y='372' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='288' y='436' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='288' y='468' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='296' y='4' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='296' y='36' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='296' y='68' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='296' y='148' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='296' y='212' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='296' y='340' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='296' y='372' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='296' y='436' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='296' y='468' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='304' y='4' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='304' y='36' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='304' y='148' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='304' y='212' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='304' y='340' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='304' y='372' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='304' y='436' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='304' y='468' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='312' y='4' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='312' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='312' y='148' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='312' y='212' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='312' y='340' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='312' y='372' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='312' y='436' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='312' y='468' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='320' y='36' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='320' y='148' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='320' y='212' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='320' y='340' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='320' y='372' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='320' y='436' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='320' y='468' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='328' y='36' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='328' y='148' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='328' y='212' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='328' y='340' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='328' y='372' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='328' y='436' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='328' y='468' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='336' y='36' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='336' y='148' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='336' y='212' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='336' y='340' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='336' y='372' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='336' y='436' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='336' y='468' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='344' y='36' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='344' y='372' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='344' y='436' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='344' y='468' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='352' y='436' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='352' y='468' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='360' y='436' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='360' y='468' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='368' y='468' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;blockquote>
&lt;p>The key idea is this: whenever we pass a $\texttt{Person}$ where $\texttt{Stringable}$ is expected, it is replaced at compile-time with the $\texttt{stringable}$ address $\texttt{person+0x10}$.&lt;/p>
&lt;/blockquote>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$$\begin{align*}
\texttt{\&amp;amp;person}&amp;amp;\neq\texttt{\&amp;amp;cast&amp;lt;Stringable&amp;gt;(person)}\newline
\texttt{\&amp;amp;person+0x10}&amp;amp;=\texttt{\&amp;amp;cast&amp;lt;Stringable&amp;gt;(person)}
\end{align*}
$$&lt;/p>
&lt;/div>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 552 201"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 88,0 L 112,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,0 L 352,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,32 L 352,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,64 L 352,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,96 L 352,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,144 L 224,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,144 L 384,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,176 L 384,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,0 L 128,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,32 L 128,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,64 L 128,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,144 L 240,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,0 L 352,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,32 L 352,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,64 L 352,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,144 L 384,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='120.000000,0.000000 108.000000,-5.600000 108.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 112.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='232.000000,144.000000 220.000000,138.399994 220.000000,149.600006' fill='currentColor' transform='rotate(0.000000, 224.000000, 144.000000)'>&lt;/polygon>
&lt;text text-anchor='middle' x='0' y='4' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='0' y='148' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='8' y='4' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='8' y='148' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='16' y='4' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='16' y='148' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='24' y='4' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='24' y='148' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='32' y='148' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='40' y='4' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='40' y='148' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='48' y='148' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='56' y='4' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='56' y='148' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='64' y='4' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='64' y='148' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='72' y='4' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='72' y='148' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='80' y='148' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='88' y='148' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='96' y='148' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='104' y='148' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='112' y='148' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='120' y='148' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='128' y='148' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='136' y='148' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='144' y='20' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='144' y='148' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='152' y='20' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='152' y='148' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='160' y='20' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='160' y='148' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='168' y='20' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='168' y='148' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='176' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='176' y='148' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='184' y='20' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='184' y='148' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='200' y='20' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='208' y='20' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='216' y='20' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='224' y='20' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='224' y='52' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='224' y='84' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='232' y='20' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='232' y='52' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='232' y='84' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='240' y='20' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='240' y='52' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='240' y='84' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='248' y='20' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='248' y='52' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='248' y='84' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='256' y='20' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='256' y='52' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='256' y='84' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='256' y='164' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='264' y='20' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='264' y='52' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='264' y='164' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='272' y='20' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='272' y='164' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='280' y='20' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='280' y='164' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='288' y='20' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='288' y='164' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='296' y='20' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='296' y='164' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='304' y='20' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='304' y='164' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='312' y='20' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='312' y='164' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='320' y='20' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='320' y='164' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='328' y='20' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='328' y='164' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='336' y='20' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='336' y='164' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='344' y='164' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='352' y='164' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='360' y='164' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='368' y='164' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{Person person = Person()}\newline
&amp;amp;\texttt{Stringable[] stringables = [Stringable(), person] // person+0x10}\newline
&amp;amp;\texttt{Stringable[0].toString()}\newline
&amp;amp;\texttt{Stringable[1].toString()}\newline
&amp;amp;\texttt{/* }\newline
&amp;amp;\texttt{ * vptr = stringables[\textit{x}]+0x0}\newline
&amp;amp;\texttt{ * vtable = \&amp;amp;vptr}\newline
&amp;amp;\texttt{ * toString = vtable+0x0}\newline
&amp;amp;\texttt{ */}\newline
\newline
&amp;amp;\texttt{Stringable[0].value}\newline
&amp;amp;\texttt{Stringable[1].value}\newline
&amp;amp;\texttt{/* }\newline
&amp;amp;\texttt{ * value = stringables[\textit{x}]+0x8}\newline
&amp;amp;\texttt{ */}
\end{align*}
$$&lt;/p>
&lt;p>Relative memory location is consistent!&lt;/p>
&lt;p>One problem: how does $\texttt{Person.toString}$ access $\texttt{output}$ (a field derived from $\texttt{Printable}$)?&lt;/p>
&lt;div class="box box-shortcode warning" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#warning-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$
\texttt{string Person.toString():}\newline
\texttt{\qquad return output + value + name}\newline
\texttt{\qquad // output is at person+0x8}\newline
\texttt{\qquad // output is lost when using person+0x10}\newline
$&lt;/p>
&lt;/div>
&lt;h4 id="part-2-top-offset">Part 2: Top Offset&lt;/h4>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 552 473"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 56,0 L 112,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,0 L 352,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,0 L 376,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,32 L 352,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,64 L 112,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,64 L 352,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,64 L 376,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,96 L 352,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,128 L 352,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,160 L 352,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,224 L 152,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,224 L 360,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,256 L 152,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,256 L 360,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,288 L 152,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,288 L 360,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,320 L 224,320' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,320 L 384,320' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,352 L 384,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,384 L 224,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,384 L 384,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,416 L 384,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,448 L 384,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,224 L 0,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,256 L 0,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,0 L 128,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,32 L 128,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,64 L 128,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,96 L 128,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,128 L 128,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,224 L 152,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,256 L 152,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,224 L 184,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,256 L 184,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,320 L 240,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,352 L 240,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,384 L 240,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,416 L 240,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,0 L 352,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,32 L 352,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,64 L 352,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,96 L 352,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,128 L 352,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,224 L 360,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,256 L 360,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 376,0 L 376,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,320 L 384,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,352 L 384,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,384 L 384,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,416 L 384,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='120.000000,0.000000 108.000000,-5.600000 108.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 112.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='120.000000,64.000000 108.000000,58.400002 108.000000,69.599998' fill='currentColor' transform='rotate(0.000000, 112.000000, 64.000000)'>&lt;/polygon>
&lt;polygon points='232.000000,320.000000 220.000000,314.399994 220.000000,325.600006' fill='currentColor' transform='rotate(0.000000, 224.000000, 320.000000)'>&lt;/polygon>
&lt;polygon points='232.000000,384.000000 220.000000,378.399994 220.000000,389.600006' fill='currentColor' transform='rotate(0.000000, 224.000000, 384.000000)'>&lt;/polygon>
&lt;polygon points='368.000000,0.000000 356.000000,-5.600000 356.000000,5.600000' fill='currentColor' transform='rotate(180.000000, 360.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='368.000000,64.000000 356.000000,58.400002 356.000000,69.599998' fill='currentColor' transform='rotate(180.000000, 360.000000, 64.000000)'>&lt;/polygon>
&lt;text text-anchor='middle' x='0' y='4' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='0' y='68' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='0' y='324' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='0' y='388' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='8' y='4' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='8' y='68' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='8' y='324' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='8' y='388' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='16' y='4' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='16' y='68' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='16' y='212' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='16' y='324' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='16' y='388' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='24' y='4' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='24' y='68' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='24' y='212' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='24' y='276' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='24' y='324' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='24' y='388' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='32' y='68' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='32' y='212' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='32' y='276' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='32' y='324' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='32' y='388' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='40' y='4' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='40' y='68' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='40' y='212' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='40' y='276' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='40' y='324' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='40' y='388' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='48' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='48' y='212' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='48' y='276' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='48' y='324' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='48' y='388' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='56' y='68' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='56' y='212' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='56' y='276' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='56' y='324' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='56' y='388' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='64' y='68' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='64' y='212' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='64' y='276' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='64' y='324' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='64' y='388' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='72' y='68' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='72' y='212' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='72' y='244' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='72' y='276' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='72' y='324' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='72' y='388' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='80' y='212' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='80' y='244' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='80' y='276' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='80' y='324' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='80' y='388' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='88' y='212' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='88' y='244' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='88' y='276' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='88' y='324' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='88' y='388' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='96' y='212' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='96' y='276' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='96' y='324' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='96' y='388' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='104' y='212' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='104' y='276' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='104' y='324' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='104' y='388' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='112' y='212' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='112' y='276' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='112' y='324' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='112' y='388' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='120' y='212' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='120' y='276' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='120' y='324' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='120' y='388' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='128' y='212' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='128' y='276' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='128' y='324' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='128' y='388' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='136' y='212' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='136' y='276' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='136' y='324' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='136' y='388' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='144' y='84' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='144' y='324' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='144' y='388' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='152' y='20' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='152' y='84' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='152' y='324' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='152' y='388' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='160' y='20' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='160' y='84' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='160' y='324' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='160' y='388' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='168' y='20' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='168' y='84' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='168' y='324' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='168' y='388' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='176' y='20' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='176' y='84' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='176' y='324' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='176' y='388' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='184' y='20' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='184' y='84' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='184' y='388' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='192' y='84' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='200' y='20' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='200' y='84' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='200' y='276' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='208' y='20' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='208' y='84' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='208' y='212' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='208' y='276' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='216' y='20' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='216' y='52' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='216' y='84' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='216' y='212' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='216' y='276' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='224' y='20' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='224' y='52' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='224' y='84' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='224' y='116' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='224' y='148' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='224' y='212' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='224' y='276' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='232' y='20' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='232' y='52' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='232' y='84' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='232' y='116' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='232' y='148' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='232' y='212' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='232' y='276' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='240' y='20' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='240' y='52' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='240' y='84' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='240' y='116' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='240' y='148' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='240' y='212' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='240' y='276' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='248' y='20' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='248' y='52' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='248' y='84' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='248' y='116' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='248' y='148' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='248' y='212' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='248' y='276' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='256' y='20' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='256' y='52' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='256' y='84' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='256' y='116' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='256' y='148' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='256' y='212' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='256' y='276' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='256' y='436' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='264' y='20' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='264' y='52' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='264' y='84' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='264' y='116' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='264' y='212' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='264' y='244' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='264' y='276' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='264' y='436' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='272' y='20' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='272' y='84' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='272' y='212' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='272' y='244' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='272' y='276' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='272' y='372' fill='currentColor' style='font-size:1em'>P&lt;/text>
&lt;text text-anchor='middle' x='272' y='436' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='280' y='20' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='280' y='84' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='280' y='212' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='280' y='244' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='280' y='276' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='280' y='372' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='280' y='436' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='288' y='20' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='288' y='84' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='288' y='212' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='288' y='276' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='288' y='372' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='288' y='436' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='296' y='20' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='296' y='84' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='296' y='212' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='296' y='276' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='296' y='372' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='296' y='404' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='296' y='436' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='304' y='20' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='304' y='84' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='304' y='212' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='304' y='276' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='304' y='340' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='304' y='372' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='304' y='404' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='304' y='436' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='312' y='20' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='312' y='84' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='312' y='212' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='312' y='276' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='312' y='340' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='312' y='372' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='312' y='404' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='312' y='436' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='320' y='20' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='320' y='84' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='320' y='212' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='320' y='276' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='320' y='340' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='320' y='372' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='320' y='404' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='320' y='436' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='328' y='20' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='328' y='84' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='328' y='212' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='328' y='276' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='328' y='372' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='328' y='404' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='328' y='436' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='336' y='20' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='336' y='84' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='336' y='212' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='336' y='276' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='336' y='372' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='336' y='436' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='344' y='276' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='344' y='372' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='344' y='436' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='352' y='372' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='352' y='436' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='360' y='372' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='360' y='436' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='368' y='436' fill='currentColor' style='font-size:1em'>g&lt;/text>
&lt;text text-anchor='middle' x='384' y='36' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='392' y='36' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='400' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='408' y='36' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>We&amp;rsquo;ve added two new entries to the $\texttt{Person.vtable}$: the top offsets.&lt;/p>
&lt;blockquote>
&lt;p>Recall that $\texttt{person.toString()}$ is syntactic sugar for $\texttt{Person.toString(person)}$. So now, when we call functions in the vtable, instead of passing the object address, we pass the object address &lt;em>plus the top offset&lt;/em> (which gives a pointer to the original object). This is called &lt;strong>this pointer adjustment&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;p>$$\begin{align*}
&amp;amp;\texttt{Person person = Person()}\newline
&amp;amp;\texttt{Stringable[] stringables = [Stringable(), person] // person+0x10}\newline
&amp;amp;\texttt{Stringable[0].toString()}\newline
&amp;amp;\texttt{Stringable[1].toString()}\newline
&amp;amp;\texttt{/* }\newline
&amp;amp;\texttt{ * vptr = stringables[\textit{x}]+0x0}\newline
&amp;amp;\texttt{ * vtable = \&amp;amp;vptr}\newline
&amp;amp;\texttt{ * toString = vtable+0x8}\newline
&amp;amp;\texttt{ * topOffset = *(vtable+0x0)}\newline
&amp;amp;\texttt{ * this = stringables[\textit{x}]+topOffset}\newline
&amp;amp;\texttt{ * toString(this)}\newline
&amp;amp;\texttt{ */}
\end{align*}$$&lt;/p>
&lt;p>Now, $\texttt{output}$ is at $\texttt{this+0x8}$.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Observe that this works with $\texttt{Printable}$.&lt;/p>
&lt;p>$$\texttt{\&amp;amp;person}=\texttt{\&amp;amp;cast&amp;lt;Printable&amp;gt;(person)}$$&lt;/p>
&lt;p>The $\texttt{Person.Printable}$ top offset is $\texttt{0x0}$, so the &lt;strong>this pointer adjustment&lt;/strong> has no effect.&lt;/p>
&lt;/div>
&lt;div class="box box-shortcode tip" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#tip-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>In general, if $\texttt{Child extends A, B, C, D}$:&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 552 857"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 48,0 L 72,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,0 L 232,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 L 256,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,0 L 280,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,0 L 304,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,0 L 328,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,32 L 232,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,80 L 72,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,80 L 232,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,80 L 256,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,112 L 232,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,160 L 72,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,160 L 232,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,160 L 280,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,192 L 232,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,240 L 72,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,240 L 232,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,240 L 304,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,272 L 232,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,320 L 72,320' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,320 L 232,320' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,320 L 328,320' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,352 L 232,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,400 L 232,400' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,432 L 144,432' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,432 L 320,432' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,464 L 320,464' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,512 L 144,512' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,512 L 320,512' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,544 L 320,544' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,592 L 144,592' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,592 L 320,592' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,624 L 320,624' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,672 L 144,672' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,672 L 320,672' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,704 L 320,704' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,752 L 144,752' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,752 L 320,752' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,784 L 320,784' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,832 L 320,832' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,0 L 88,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,32 L 88,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,80 L 88,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,112 L 88,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,160 L 88,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,192 L 88,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,240 L 88,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,272 L 88,320' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,320 L 88,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,352 L 88,400' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,432 L 160,464' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,464 L 160,512' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,512 L 160,544' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,544 L 160,592' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,592 L 160,624' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,624 L 160,672' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,672 L 160,704' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,704 L 160,752' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,752 L 160,784' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,784 L 160,832' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,0 L 232,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,32 L 232,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,80 L 232,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,112 L 232,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,160 L 232,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,192 L 232,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,240 L 232,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,272 L 232,320' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,320 L 232,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,352 L 232,400' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,16 L 256,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,64 L 256,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,16 L 280,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,144 L 280,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,16 L 304,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,224 L 304,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,432 L 320,464' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,464 L 320,512' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,512 L 320,544' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,544 L 320,592' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,592 L 320,624' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,624 L 320,672' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,672 L 320,704' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,704 L 320,752' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,752 L 320,784' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,784 L 320,832' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,16 L 328,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,304 L 328,320' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='80.000000,0.000000 68.000000,-5.600000 68.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 72.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='80.000000,80.000000 68.000000,74.400002 68.000000,85.599998' fill='currentColor' transform='rotate(0.000000, 72.000000, 80.000000)'>&lt;/polygon>
&lt;polygon points='80.000000,160.000000 68.000000,154.399994 68.000000,165.600006' fill='currentColor' transform='rotate(0.000000, 72.000000, 160.000000)'>&lt;/polygon>
&lt;polygon points='80.000000,240.000000 68.000000,234.399994 68.000000,245.600006' fill='currentColor' transform='rotate(0.000000, 72.000000, 240.000000)'>&lt;/polygon>
&lt;polygon points='80.000000,320.000000 68.000000,314.399994 68.000000,325.600006' fill='currentColor' transform='rotate(0.000000, 72.000000, 320.000000)'>&lt;/polygon>
&lt;polygon points='152.000000,432.000000 140.000000,426.399994 140.000000,437.600006' fill='currentColor' transform='rotate(0.000000, 144.000000, 432.000000)'>&lt;/polygon>
&lt;polygon points='152.000000,512.000000 140.000000,506.399994 140.000000,517.599976' fill='currentColor' transform='rotate(0.000000, 144.000000, 512.000000)'>&lt;/polygon>
&lt;polygon points='152.000000,592.000000 140.000000,586.400024 140.000000,597.599976' fill='currentColor' transform='rotate(0.000000, 144.000000, 592.000000)'>&lt;/polygon>
&lt;polygon points='152.000000,672.000000 140.000000,666.400024 140.000000,677.599976' fill='currentColor' transform='rotate(0.000000, 144.000000, 672.000000)'>&lt;/polygon>
&lt;polygon points='152.000000,752.000000 140.000000,746.400024 140.000000,757.599976' fill='currentColor' transform='rotate(0.000000, 144.000000, 752.000000)'>&lt;/polygon>
&lt;polygon points='248.000000,0.000000 236.000000,-5.600000 236.000000,5.600000' fill='currentColor' transform='rotate(180.000000, 240.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='248.000000,80.000000 236.000000,74.400002 236.000000,85.599998' fill='currentColor' transform='rotate(180.000000, 240.000000, 80.000000)'>&lt;/polygon>
&lt;polygon points='248.000000,160.000000 236.000000,154.399994 236.000000,165.600006' fill='currentColor' transform='rotate(180.000000, 240.000000, 160.000000)'>&lt;/polygon>
&lt;polygon points='248.000000,240.000000 236.000000,234.399994 236.000000,245.600006' fill='currentColor' transform='rotate(180.000000, 240.000000, 240.000000)'>&lt;/polygon>
&lt;polygon points='248.000000,320.000000 236.000000,314.399994 236.000000,325.600006' fill='currentColor' transform='rotate(180.000000, 240.000000, 320.000000)'>&lt;/polygon>
&lt;path d='M 256,8 L 256,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='272.000000,16.000000 260.000000,10.400000 260.000000,21.600000' fill='currentColor' transform='rotate(270.000000, 256.000000, 16.000000)'>&lt;/polygon>
&lt;path d='M 256,64 L 256,72' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='272.000000,64.000000 260.000000,58.400002 260.000000,69.599998' fill='currentColor' transform='rotate(90.000000, 256.000000, 64.000000)'>&lt;/polygon>
&lt;path d='M 280,8 L 280,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='296.000000,16.000000 284.000000,10.400000 284.000000,21.600000' fill='currentColor' transform='rotate(270.000000, 280.000000, 16.000000)'>&lt;/polygon>
&lt;path d='M 280,144 L 280,152' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='296.000000,144.000000 284.000000,138.399994 284.000000,149.600006' fill='currentColor' transform='rotate(90.000000, 280.000000, 144.000000)'>&lt;/polygon>
&lt;path d='M 304,8 L 304,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='320.000000,16.000000 308.000000,10.400000 308.000000,21.600000' fill='currentColor' transform='rotate(270.000000, 304.000000, 16.000000)'>&lt;/polygon>
&lt;path d='M 304,224 L 304,232' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='320.000000,224.000000 308.000000,218.399994 308.000000,229.600006' fill='currentColor' transform='rotate(90.000000, 304.000000, 224.000000)'>&lt;/polygon>
&lt;path d='M 328,8 L 328,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='344.000000,16.000000 332.000000,10.400000 332.000000,21.600000' fill='currentColor' transform='rotate(270.000000, 328.000000, 16.000000)'>&lt;/polygon>
&lt;path d='M 328,304 L 328,312' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='344.000000,304.000000 332.000000,298.399994 332.000000,309.600006' fill='currentColor' transform='rotate(90.000000, 328.000000, 304.000000)'>&lt;/polygon>
&lt;text text-anchor='middle' x='0' y='4' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='0' y='84' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='0' y='164' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='0' y='244' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='0' y='324' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='0' y='436' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='0' y='516' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='0' y='596' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='0' y='676' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='0' y='756' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='8' y='4' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='8' y='436' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='8' y='516' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='8' y='596' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='8' y='676' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='8' y='756' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='16' y='4' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='16' y='436' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='16' y='516' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='16' y='596' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='16' y='676' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='16' y='756' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='24' y='4' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='24' y='436' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='24' y='516' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='24' y='596' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='24' y='676' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='24' y='756' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='32' y='436' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='32' y='516' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='32' y='596' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='32' y='676' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='32' y='756' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='40' y='436' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='40' y='516' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='40' y='596' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='40' y='676' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='40' y='756' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='48' y='436' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='48' y='516' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='48' y='596' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='48' y='676' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='48' y='756' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='56' y='436' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='56' y='516' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='56' y='596' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='56' y='676' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='56' y='756' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='64' y='436' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='64' y='516' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='64' y='596' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='64' y='676' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='64' y='756' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='72' y='436' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='72' y='516' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='72' y='596' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='72' y='676' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='72' y='756' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='80' y='436' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='80' y='516' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='80' y='596' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='80' y='676' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='80' y='756' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='88' y='436' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='88' y='516' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='88' y='596' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='88' y='676' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='88' y='756' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='96' y='516' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='96' y='596' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='96' y='676' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='96' y='756' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='104' y='100' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='104' y='180' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='104' y='260' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='104' y='340' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='104' y='516' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='104' y='596' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='104' y='676' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='104' y='756' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='112' y='20' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='112' y='100' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='112' y='180' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='112' y='260' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='112' y='340' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='120' y='20' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='120' y='100' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='120' y='132' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='120' y='180' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='120' y='212' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='120' y='260' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='120' y='292' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='120' y='340' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='120' y='372' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='128' y='20' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='128' y='52' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='128' y='100' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='128' y='132' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='128' y='180' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='128' y='212' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='128' y='260' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='128' y='292' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='128' y='340' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='128' y='372' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='136' y='20' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='136' y='52' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='136' y='100' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='136' y='132' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='136' y='180' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='136' y='212' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='136' y='260' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='136' y='292' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='136' y='340' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='136' y='372' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='144' y='20' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='144' y='52' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='144' y='100' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='144' y='132' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='144' y='180' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='144' y='212' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='144' y='260' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='144' y='292' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='144' y='340' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='144' y='372' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='152' y='20' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='152' y='52' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='152' y='100' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='152' y='132' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='152' y='180' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='152' y='212' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='152' y='260' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='152' y='292' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='152' y='340' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='152' y='372' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='160' y='20' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='160' y='52' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='160' y='68' fill='currentColor' style='font-size:1em'>…&lt;/text>
&lt;text text-anchor='middle' x='160' y='100' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='160' y='132' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='160' y='148' fill='currentColor' style='font-size:1em'>…&lt;/text>
&lt;text text-anchor='middle' x='160' y='180' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='160' y='212' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='160' y='228' fill='currentColor' style='font-size:1em'>…&lt;/text>
&lt;text text-anchor='middle' x='160' y='260' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='160' y='292' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='160' y='308' fill='currentColor' style='font-size:1em'>…&lt;/text>
&lt;text text-anchor='middle' x='160' y='340' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='160' y='372' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='160' y='388' fill='currentColor' style='font-size:1em'>…&lt;/text>
&lt;text text-anchor='middle' x='168' y='20' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='168' y='52' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='168' y='100' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='168' y='132' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='168' y='180' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='168' y='212' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='168' y='260' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='168' y='292' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='168' y='340' fill='currentColor' style='font-size:1em'>v&lt;/text>
&lt;text text-anchor='middle' x='168' y='372' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='176' y='20' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='176' y='52' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='176' y='100' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='176' y='132' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='176' y='180' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='176' y='212' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='176' y='260' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='176' y='292' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='176' y='340' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='176' y='372' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='176' y='564' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='176' y='644' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='176' y='724' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='176' y='804' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='184' y='20' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='184' y='52' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='184' y='100' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='184' y='132' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='184' y='180' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='184' y='212' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='184' y='260' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='184' y='292' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='184' y='340' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='184' y='372' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='184' y='484' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='184' y='564' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='184' y='644' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='184' y='724' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='184' y='804' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='192' y='52' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='192' y='100' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='192' y='132' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='192' y='180' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='192' y='212' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='192' y='260' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='192' y='292' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='192' y='340' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='192' y='372' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='192' y='484' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='192' y='564' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='192' y='644' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='192' y='724' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='192' y='804' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='200' y='20' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='200' y='52' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='200' y='100' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='200' y='132' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='200' y='180' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='200' y='212' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='200' y='260' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='200' y='292' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='200' y='340' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='200' y='372' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='200' y='484' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='200' y='564' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='200' y='644' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='200' y='724' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='200' y='804' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='208' y='20' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='208' y='100' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='208' y='132' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='208' y='180' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='208' y='212' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='208' y='260' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='208' y='292' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='208' y='340' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='208' y='372' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='208' y='484' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='208' y='564' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='208' y='644' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='208' y='724' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='208' y='804' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='216' y='100' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='216' y='180' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='216' y='260' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='216' y='340' fill='currentColor' style='font-size:1em'>*&lt;/text>
&lt;text text-anchor='middle' x='216' y='484' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='216' y='564' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='216' y='644' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='216' y='724' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='216' y='804' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='224' y='484' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='224' y='564' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='224' y='644' fill='currentColor' style='font-size:1em'>B&lt;/text>
&lt;text text-anchor='middle' x='224' y='724' fill='currentColor' style='font-size:1em'>C&lt;/text>
&lt;text text-anchor='middle' x='224' y='804' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='232' y='452' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='232' y='484' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='232' y='532' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='232' y='564' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='232' y='612' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='232' y='644' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='232' y='692' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='232' y='724' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='232' y='772' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='232' y='804' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='240' y='452' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='240' y='484' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='240' y='500' fill='currentColor' style='font-size:1em'>…&lt;/text>
&lt;text text-anchor='middle' x='240' y='532' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='240' y='564' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='240' y='580' fill='currentColor' style='font-size:1em'>…&lt;/text>
&lt;text text-anchor='middle' x='240' y='612' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='240' y='644' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='240' y='660' fill='currentColor' style='font-size:1em'>…&lt;/text>
&lt;text text-anchor='middle' x='240' y='692' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='240' y='724' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='240' y='740' fill='currentColor' style='font-size:1em'>…&lt;/text>
&lt;text text-anchor='middle' x='240' y='772' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='240' y='804' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='240' y='820' fill='currentColor' style='font-size:1em'>…&lt;/text>
&lt;text text-anchor='middle' x='248' y='452' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='248' y='484' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='248' y='564' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='248' y='644' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='248' y='724' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='248' y='804' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='256' y='484' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='256' y='564' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='256' y='644' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='256' y='724' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='256' y='804' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='264' y='36' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='264' y='484' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='264' y='564' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='264' y='644' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='264' y='724' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='264' y='804' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='272' y='484' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='272' y='564' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='272' y='644' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='272' y='724' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='272' y='804' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='280' y='484' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='280' y='564' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='280' y='644' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='280' y='724' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='280' y='804' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='288' y='84' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='288' y='484' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='288' y='564' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='288' y='644' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='288' y='724' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='288' y='804' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='296' y='484' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='296' y='564' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='296' y='644' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='296' y='724' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='296' y='804' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='304' y='564' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='304' y='644' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='304' y='724' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='304' y='804' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='312' y='116' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='336' y='164' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;/div></description></item><item><title>Type Checking: Subtyping</title><link>https://kiblitz.github.io/p/subtyping/</link><pubDate>Sun, 09 Jul 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/subtyping/</guid><description>&lt;img src="https://kiblitz.github.io/p/subtyping/purple.jpg" alt="Featured image of post Type Checking: Subtyping" />&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>At the very least when it comes to types, something of type $\texttt{A}$ can be used whenever something of type $\texttt{A}$ is expected.&lt;/p>
&lt;p>$\texttt{int a = 5}\newline\texttt{float b = 5.0}$&lt;/p>
&lt;p>Is there any leeway for flexibility? Specifically, does there exist a notion of type substitutability?&lt;/p>
&lt;hr>
&lt;p>$\texttt{float b = 5}$&lt;/p>
&lt;p>This makes sense because an $\texttt{int}$ is a subset of a $\texttt{float}$. In other words, a $\texttt{float}$ can do anything an $\texttt{int}$ can do.&lt;/p>
&lt;p>$\cancel{\texttt{int b = 5.0}}$&lt;/p>
&lt;p>This won&amp;rsquo;t work. An $\texttt{int}$ cannot do everything a $\texttt{float}$ can do (cannot represent all of its values). A quick way to break this is: $$\texttt{int b = 5.5}$$&lt;/p>
&lt;h2 id="definition">Definition&lt;/h2>
&lt;p>$S &amp;lt;: T$ means that $S$ is a subtype of $T$.&lt;/p>
&lt;p>This means that anything of type $S$ can be used whenever type $T$ is expected.&lt;/p>
&lt;p>So in the above example:
$$\texttt{int}&amp;lt;:\texttt{float}$$&lt;/p>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode tip" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#tip-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>You can think of it as $S$ is &lt;em>more&lt;/em> restrictive &lt;strong>(to typecheck)&lt;/strong> than $T$ since if you want to do something with $T$, you should also be able to do it with $S$.&lt;/p>
&lt;/div>
&lt;h2 id="structures">Structures&lt;/h2>
&lt;h3 id="width-subtyping">Width Subtyping&lt;/h3>
&lt;h4 id="class-hierarchy">Class Hierarchy&lt;/h4>
&lt;p>Suppose a class lineage has the following structures.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{class Animal:}\newline
&amp;amp;\texttt{\qquad string name}\newline
&amp;amp;\texttt{\qquad int age}\newline
&amp;amp;\texttt{\qquad void}\rightarrow\texttt{void makeNoise}\newline
&amp;amp;\newline
&amp;amp;\texttt{class Mammal extends Animal:}\newline
&amp;amp;\texttt{\qquad string furColor}\newline
&amp;amp;\newline
&amp;amp;\texttt{class Human extends Mammal:}\newline
&amp;amp;\texttt{\qquad string occupation}\newline
&amp;amp;\texttt{\qquad int netWorth}\newline
&amp;amp;\texttt{\qquad void}\rightarrow\texttt{int doTaxes}
\end{align*}
$$&lt;/p>
&lt;p>By definition of class hierarchy, a child has every characteristic its parent has. For example, $\texttt{Human}$ has a $\texttt{furColor}$, and transitively, since $\texttt{Mammal}$ has a $\texttt{name}$ (among other things), so does $\texttt{Human}$.&lt;/p>
&lt;p>Since children have everything their parents have (and thus can do anything the parents can do):
$$\texttt{Human} &amp;lt;: \texttt{Mammal}$$
$$\texttt{Mammal} &amp;lt;: \texttt{Animal}$$
$$- \textit{and transitively } -$$
$$\texttt{Human} &amp;lt;: \texttt{Animal}$$&lt;/p>
&lt;p>Generally:&lt;/p>
&lt;blockquote>
&lt;p>$$\texttt{Child} &amp;lt;: \texttt{Parent}$$&lt;/p>
&lt;/blockquote>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>This is called &lt;strong>width subtyping&lt;/strong> since supertypes (opposite of subtypes) contain a subset of fields (along the width of the class definition).&lt;/p>
&lt;/div>
&lt;h4 id="unrelated-structures">Unrelated structures&lt;/h4>
&lt;p>The notion of width subtyping can be extended to datatypes without hierarchical relationships.&lt;/p>
&lt;p>For example, suppose there are two unrelated datatypes with the following definitions.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{struct Named:}\newline
&amp;amp;\texttt{\qquad string name}\newline
&amp;amp;\newline
&amp;amp;\texttt{struct User:}\newline
&amp;amp;\texttt{\qquad string name}\newline
&amp;amp;\texttt{\qquad string age}
\end{align*}
$$&lt;/p>
&lt;p>They have no explicit relationship. However, it sort of makes sense that whenever a program expects a $\texttt{Named}$ entity that we can pass it a $\texttt{User}$ (since anything a $\texttt{Named}$ has, a $\texttt{User}$ also has).&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Example:&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{func rename(Named entity, string newName):}\newline
&amp;amp;\texttt{\qquad entity.name = newName}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{User user = }\lbrace\texttt{name: &amp;ldquo;glee&amp;rdquo;, age: 1000}\rbrace\newline
&amp;amp;\texttt{rename(user, &amp;ldquo;not glee&amp;rdquo;)}
\end{align*}
$$&lt;/p>
&lt;/div>
&lt;p>This can get fairly messy to type check in various type systems.&lt;/p>
&lt;ul>
&lt;li>C++ has &lt;a class="link" href="https://en.wikipedia.org/wiki/Template_metaprogramming" target="_blank" rel="noopener"
>template metaprogramming&lt;/a> (&lt;a class="link" href="https://en.wikipedia.org/wiki/Undecidable_problem" target="_blank" rel="noopener"
>undecideable&lt;/a> and thus limited by recursion depth)&lt;/li>
&lt;li>Python uses &lt;a class="link" href="https://en.wikipedia.org/wiki/Duck_typing" target="_blank" rel="noopener"
>duck typing&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="depth-subtyping">Depth Subtyping&lt;/h3>
&lt;h4 id="definition-1">Definition&lt;/h4>
&lt;p>Instead of subtyping at the top level, could we subtype at the field level (and thus, their fields recursively)?&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{class LivingSpace:}\newline
&amp;amp;\texttt{\qquad Animal resident}\newline
&amp;amp;\newline
&amp;amp;\texttt{class Studio:}\newline
&amp;amp;\texttt{\qquad Human resident}
&amp;amp;\end{align*}
$$&lt;/p>
&lt;p>Does $\texttt{Studio} &amp;lt;: \texttt{LivingSpace}$?&lt;/p>
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Notice that these cannot have hierarchical relationships.&lt;/p>
&lt;/div>
&lt;p>It might make sense logically that if our program requires a $\texttt{LivingSpace}$ that we may provide it with a $\texttt{Studio}$ since the latter can do anything the former can do (in this case, provide $\texttt{resident.name}$).&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{func owner(LivingSpace home)} \rightarrow \texttt{string:}\newline
&amp;amp;\texttt{\qquad return home.resident.name}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{Studio studio = }\lbrace\texttt{resident: }\lbrace- \textit{some human} -\rbrace\rbrace\newline
&amp;amp;\texttt{print(owner(studio))}
\end{align*}
$$&lt;/p>
&lt;h4 id="caveat">Caveat&lt;/h4>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{func reassignResident(LivingSpace home, Animal newResident):}\newline
&amp;amp;\texttt{\qquad home.resident = newResident}\newline
&amp;amp;\text{}\newline
&amp;amp;\texttt{Studio studio = }\lbrace\texttt{resident: }\lbrace- \textit{some human} -\rbrace\rbrace\newline
&amp;amp;\texttt{reassignResident(studio, }\lbrace- \textit{some animal } -\rbrace)
\end{align*}
$$&lt;/p>
&lt;p>Ah, so here&amp;rsquo;s where it breaks down. We want to assign our subtyped field. But the true underlying structure requires more!&lt;/p>
&lt;p>$\texttt{reassignResident}$ is under the impression that an $\texttt{Animal}$ is enough to fill up a $\texttt{LivingSpace}$, which is logically true. But if we pass $\texttt{reassignResident}$ a $\texttt{Studio}$, it should really expect a $\texttt{Human}$ instead of an $\texttt{Animal}$.&lt;/p>
&lt;blockquote>
&lt;p>It turns out that the breakdown occurs because of &lt;a class="link" href="https://en.wikipedia.org/wiki/Aliasing_%28computing%29#:~:text=In%20computing%2C%20aliasing%20describes%20a,symbolic%20names%20in%20the%20program." target="_blank" rel="noopener"
>aliasing&lt;/a>. Thus, &lt;strong>depth subtyping&lt;/strong> works with &lt;em>immutable structures&lt;/em> (records).&lt;/p>
&lt;/blockquote>
&lt;h2 id="functions">Functions&lt;/h2>
&lt;h3 id="introduction-1">Introduction&lt;/h3>
&lt;p>Functions are values. So how do we typecheck function assignment? We&amp;rsquo;ll reuse some types from above.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{Mammal} \rightarrow \texttt{Mammal someFunction}=\ldots\newline
&amp;amp;\texttt{Mammal input = }\lbrace\ldots\rbrace\newline
&amp;amp;\texttt{Mammal output = someFunction(input)}
\end{align*}
$$&lt;/p>
&lt;p>The question is: what types can we assign to $\texttt{someFunction}$?&lt;/p>
&lt;h3 id="outputs">Outputs&lt;/h3>
&lt;p>Let&amp;rsquo;s trial and error, and try to reason the solution out.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{Mammal} \rightarrow \texttt{Human functionValue}=\ldots\newline
&amp;amp;\texttt{Mammal} \rightarrow \texttt{Mammal someFunction = functionValue}
\end{align*}
$$&lt;/p>
&lt;p>$\texttt{functionValue}$ returns a $\texttt{Human}$. Executions of $\texttt{someFunction}$ expect a return value that can do everything a $\texttt{Mammal}$ can do, which a $\texttt{Human}$ satisfies. This works.&lt;/p>
&lt;p>$$\texttt{actualOutput} &amp;lt;: \texttt{expectedOutput}$$&lt;/p>
&lt;hr>
&lt;p>For sake of clarity, let&amp;rsquo;s try it the other way.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{Mammal} \rightarrow \texttt{Animal functionValue}=\ldots\newline
&amp;amp;\cancel{\texttt{Mammal} \rightarrow \texttt{Mammal someFunction = functionValue}}
\end{align*}
$$&lt;/p>
&lt;p>Clearly, an execution to $\texttt{someFunction}$ which expects a $\texttt{Mammal}$ return type will miss out on the $\texttt{furColor}$ attribute.&lt;/p>
&lt;h3 id="inputs">Inputs&lt;/h3>
&lt;p>Again, let&amp;rsquo;s trial and error.&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{Human} \rightarrow \texttt{Mammal functionValue}=\ldots\newline
&amp;amp;\cancel{\texttt{Mammal} \rightarrow \texttt{Mammal someFunction = functionValue}}
\end{align*}
$$&lt;/p>
&lt;p>Clearly, whatever we provide as input must be able to do whatever $\texttt{someFunction}$ requires of it. If we provide $\texttt{Mammal}$, $\texttt{functionValue}$ expects a $\texttt{Human}$ which might use attributes like $\texttt{occupation}$ which aren&amp;rsquo;t present in $\texttt{Mammal}$.&lt;/p>
&lt;hr>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{Animal} \rightarrow \texttt{Mammal functionValue}=\ldots\newline
&amp;amp;\texttt{Mammal} \rightarrow \texttt{Mammal someFunction = functionValue}
\end{align*}
$$&lt;/p>
&lt;p>Providing $\texttt{someFunction}$ with an input that can do at least what $\texttt{Mammal}$ can do will allow it to safely be used as input to its value, $\texttt{functionValue}$.&lt;/p>
&lt;p>$$\texttt{expectedInput} &amp;lt;: \texttt{actualInput}$$&lt;/p>
&lt;h3 id="putting-it-all-together">Putting it All Together&lt;/h3>
&lt;p>It&amp;rsquo;s a little counterintuitive, but the inputs and outputs of a function subtype have opposite directionality (as we saw above).&lt;/p>
&lt;p>$$
\begin{align*}
&amp;amp;\texttt{Animal} \rightarrow \texttt{Human functionValue}=\ldots\newline
&amp;amp;\texttt{Mammal} \rightarrow \texttt{Mammal someFunction = functionValue}
\end{align*}
$$&lt;/p>
&lt;blockquote>
&lt;p>$$\begin{align*}
\texttt{I}&amp;amp;\texttt{&amp;rsquo;} &amp;lt;:\texttt{I}\newline
&amp;amp;\texttt{O} &amp;lt;:\texttt{O&amp;rsquo;}\newline
&amp;amp;\implies\newline
\texttt{I}\rightarrow\medspace&amp;amp;\texttt{O} &amp;lt;: \texttt{I&amp;rsquo;}\rightarrow\texttt{O&amp;rsquo;}
\end{align*}$$&lt;/p>
&lt;/blockquote></description></item><item><title>V. Universal and Perfect Hashing</title><link>https://kiblitz.github.io/p/451-universal-and-perfect-hashing/</link><pubDate>Thu, 22 Jun 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/451-universal-and-perfect-hashing/</guid><description>&lt;img src="https://kiblitz.github.io/p/451-universal-and-perfect-hashing/waterfall_bridge_cave.jpg" alt="Featured image of post V. Universal and Perfect Hashing" />&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>A prevalent usecase of hashing is in storing sets or mappings for a subset of the input space &amp;mdash; hash tables. An optimal hash table uniformly distributes elements among its buckets.&lt;/p>
&lt;h2 id="universal-hashing">Universal Hashing&lt;/h2>
&lt;h3 id="definition">Definition&lt;/h3>
&lt;blockquote>
&lt;p>A randomized algorithm $H$ for constructing hash functions $h:U\rightarrow\lbrace 0,1,&amp;hellip;,M-1\rbrace$ is &lt;em>&lt;strong>universal&lt;/strong>&lt;/em> if $\forall x \neq y \text{ s.t. } x, y\in U$, we have $$\mathbb{P} [h(x)=h(y)|\thinspace h \leftarrow H]\leq\frac{1}{M}$$&lt;/p>
&lt;/blockquote>
&lt;h3 id="construction">Construction&lt;/h3>
&lt;h4 id="random-matrix">Random Matrix&lt;/h4>
&lt;p>Suppose keys are $u$-bits long and $M=2^m$. Define $A$ to be a $m$-by-$u$ matrix filled with $0$ and $1$ randomly.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 217"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 24,0 L 96,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,0 L 200,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,32 L 200,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,32 L 240,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,32 L 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,128 L 200,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,128 L 288,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,192 L 240,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,32 L 0,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,96 L 0,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,32 L 24,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,32 L 200,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,32 L 224,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,32 L 240,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,32 L 272,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,32 L 288,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='8.000000,32.000000 -4.000000,26.400000 -4.000000,37.599998' fill='currentColor' transform='rotate(270.000000, 0.000000, 32.000000)'>&lt;/polygon>
&lt;polygon points='8.000000,128.000000 -4.000000,122.400002 -4.000000,133.600006' fill='currentColor' transform='rotate(90.000000, 0.000000, 128.000000)'>&lt;/polygon>
&lt;polygon points='32.000000,0.000000 20.000000,-5.600000 20.000000,5.600000' fill='currentColor' transform='rotate(180.000000, 24.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='208.000000,0.000000 196.000000,-5.600000 196.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 200.000000, 0.000000)'>&lt;/polygon>
&lt;text text-anchor='middle' x='0' y='84' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='112' y='4' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='112' y='84' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='232' y='116' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='256' y='100' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='304' y='84' fill='currentColor' style='font-size:1em'>h&lt;/text>
&lt;text text-anchor='middle' x='312' y='84' fill='currentColor' style='font-size:1em'>(&lt;/text>
&lt;text text-anchor='middle' x='320' y='84' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='328' y='84' fill='currentColor' style='font-size:1em'>)&lt;/text>
&lt;text text-anchor='middle' x='344' y='84' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='360' y='84' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='368' y='84' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Claim&lt;/strong>&lt;/dt>
&lt;dd>$H=\lbrace h\rbrace$ is universal&lt;/dd>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>Consider an arbitrary pair of distinct keys $x, y$. Suppose they differ in the $i$th bit. WLOG, $x_i=0$ and $y_i=1$.&lt;/dd>
&lt;dd>
&lt;p>Observe that regardless of the elements in the $i$th column of $A$, $h(x)=Ax$ since $x_i=0$.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>However, each of the $2^m$ possibilities for the $i$th column of $A$ yield distinct $h(y)=Ay$.
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>A bit flip in the $i$th column of $A$ at row $j$ flips $Ay$ at the $j$th bit&lt;/p>
&lt;/div>
&lt;/p>
&lt;/dd>
&lt;dd>$$\mathbb{P} [Ax=Ay]=\frac{1}{2^m}$$&lt;/dd>
&lt;/dl>
&lt;/blockquote>
&lt;p>This is unfortunately quite space inefficient.&lt;/p>
&lt;h4 id="random-vector">Random Vector&lt;/h4>
&lt;p>View the key $x$ as a vector of integers $\langle x_1, x_2, &amp;hellip;, x_k \rangle$ where $0\leq x_i &amp;lt; M$ and $M$ is prime.&lt;/p>
&lt;p>Define a $k$-length vector $r_1, r_2, &amp;hellip;, r_k$ filled with random values where $0\leq r_i &amp;lt; M$.&lt;/p>
&lt;p>$$h(x)=r\cdot x\mod M$$&lt;/p>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Claim&lt;/strong>&lt;/dt>
&lt;dd>$H=\lbrace h\rbrace$ is universal&lt;/dd>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>Consider an arbitrary pair of distinct keys $x, y$. Suppose they differ in the $i$th number $x_i \neq y_i$.&lt;/dd>
&lt;dd>
&lt;p>Consider the dot product defined by $h$ excluding the $i$th expression. Specifically,&lt;/p>
&lt;/dd>
&lt;dd>$$h&amp;rsquo;(x)=\sum_{j\neq i}r_jx_j$$
Thus,&lt;/dd>
&lt;dd>$$h(x)=h&amp;rsquo;(x)+r_ix_i$$
Collision between $x, y$ occurs precisely when $h&amp;rsquo;(x) + r_ix_i = h&amp;rsquo;(y) + r_iy_i\mod M$.&lt;/dd>
&lt;dd>$$r_i(x_i-y_i)=h&amp;rsquo;(y)-h&amp;rsquo;(x)\mod M$$&lt;/dd>
&lt;dd>Note that because of $M$&amp;rsquo;s primality, every integer has a multiplicative inverse. Thus, $r_i$ is unique.&lt;/dd>
&lt;dd>$$\mathbb{P} [h(x)=h(y)]=\frac{1}{M}$$&lt;/dd>
&lt;/dl>
&lt;/blockquote>
&lt;h2 id="perfect-hashing">Perfect Hashing&lt;/h2>
&lt;h3 id="definition-1">Definition&lt;/h3>
&lt;blockquote>
&lt;p>A hash function is &lt;em>&lt;strong>perfect&lt;/strong>&lt;/em> for a set $S, |S|=N$ if all lookups involve $\mathcal{O}(1)$ work.&lt;/p>
&lt;/blockquote>
&lt;h3 id="construction-1">Construction&lt;/h3>
&lt;h4 id="try-1-----quadratic-space">Try 1 &amp;mdash; Quadratic Space&lt;/h4>
&lt;p>Let $H$ be universal and $M=N^2$.&lt;/p>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Claim&lt;/strong>&lt;/dt>
&lt;dd>$\mathbb{P}[\exists\text{ collision in $S$}]&amp;lt; \frac{1}{2}$&lt;/dd>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>There are $N\choose 2$ pairs $(x, y)$ in $S$. Each pair has at most $\frac{1}{M}=\frac{1}{N^2}$ collision probability by definition of universality.&lt;/dd>
&lt;dd>$\mathbb{P}[\exists\text{ collision in $S$}]\leq \frac{N \choose 2}{N^2}&amp;lt;\frac{1}{2}$&lt;/dd>
&lt;/dl>
&lt;/blockquote>
&lt;h4 id="try-2-----linear-space">Try 2 &amp;mdash; Linear Space&lt;/h4>
&lt;p>Let $H$ be universal and $M=N$. Hash into the first layer with $N$ buckets. Each bucket maps to a secondary layer each with $C_i^2$ slots, where $C_i$ represents the number of elements that collide in the $i$th bucket of the first layer.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 528 393"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,0 L 240,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,0 L 512,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,32 L 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,32 L 128,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,32 L 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,32 L 256,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,32 L 320,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,32 L 384,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,32 L 448,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,32 L 512,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,96 L 32,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,96 L 64,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,96 L 96,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,96 L 128,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,96 L 160,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,96 L 192,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,96 L 224,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,96 L 256,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,96 L 320,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,96 L 352,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,96 L 384,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,96 L 416,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,96 L 448,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,96 L 480,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,96 L 512,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,112 L 336,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,128 L 144,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,128 L 256,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,128 L 384,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,144 L 512,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,160 L 96,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,176 L 192,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,176 L 256,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,176 L 320,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,176 L 384,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,208 L 512,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,224 L 96,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,240 L 192,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,240 L 256,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,240 L 320,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,240 L 384,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,256 L 400,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,256 L 512,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,272 L 96,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,272 L 160,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,272 L 224,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,272 L 288,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,288 L 440,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,304 L 24,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 344,304 L 408,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,320 L 512,320' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,336 L 96,336' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,336 L 160,336' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,336 L 224,336' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,336 L 288,336' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 344,368 L 408,368' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,32 L 0,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,160 L 0,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,64 L 32,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,96 L 32,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,160 L 32,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,272 L 32,336' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,32 L 64,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,128 L 64,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,64 L 96,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,160 L 96,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,272 L 96,336' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,144 L 112,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,32 L 128,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,176 L 128,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,64 L 160,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,96 L 160,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,272 L 160,336' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,32 L 192,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,176 L 192,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,64 L 224,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,96 L 224,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,272 L 224,336' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,32 L 256,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,128 L 256,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,160 L 256,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,176 L 256,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,272 L 288,336' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,32 L 320,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,176 L 320,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 344,304 L 344,368' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,64 L 352,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 376,272 L 376,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,32 L 384,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,176 L 384,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,144 L 400,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,256 L 400,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 408,304 L 408,368' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,64 L 416,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,96 L 416,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,32 L 448,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,144 L 448,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,256 L 448,320' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,64 L 480,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,96 L 480,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 512,32 L 512,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 512,144 L 512,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 512,256 L 512,320' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='8.000000,0.000000 -4.000000,-5.600000 -4.000000,5.600000' fill='currentColor' transform='rotate(180.000000, 0.000000, 0.000000)'>&lt;/polygon>
&lt;polygon points='32.000000,304.000000 20.000000,298.399994 20.000000,309.600006' fill='currentColor' transform='rotate(0.000000, 24.000000, 304.000000)'>&lt;/polygon>
&lt;path d='M 64,144 L 64,152' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='80.000000,144.000000 68.000000,138.399994 68.000000,149.600006' fill='currentColor' transform='rotate(90.000000, 64.000000, 144.000000)'>&lt;/polygon>
&lt;path d='M 112,256 L 112,264' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='128.000000,256.000000 116.000000,250.399994 116.000000,261.600006' fill='currentColor' transform='rotate(90.000000, 112.000000, 256.000000)'>&lt;/polygon>
&lt;path d='M 256,160 L 256,168' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='272.000000,160.000000 260.000000,154.399994 260.000000,165.600006' fill='currentColor' transform='rotate(90.000000, 256.000000, 160.000000)'>&lt;/polygon>
&lt;path d='M 376,288 L 376,296' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='392.000000,288.000000 380.000000,282.399994 380.000000,293.600006' fill='currentColor' transform='rotate(90.000000, 376.000000, 288.000000)'>&lt;/polygon>
&lt;polygon points='448.000000,288.000000 436.000000,282.399994 436.000000,293.600006' fill='currentColor' transform='rotate(0.000000, 440.000000, 288.000000)'>&lt;/polygon>
&lt;path d='M 480,128 L 480,136' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='496.000000,128.000000 484.000000,122.400002 484.000000,133.600006' fill='currentColor' transform='rotate(90.000000, 480.000000, 128.000000)'>&lt;/polygon>
&lt;polygon points='520.000000,0.000000 508.000000,-5.600000 508.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 512.000000, 0.000000)'>&lt;/polygon>
&lt;path d='M 80,112 A 16,16 0 0,0 64,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,96 A 16,16 0 0,1 80,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,112 A 16,16 0 0,0 256,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,96 A 16,16 0 0,1 336,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,128 A 16,16 0 0,0 112,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,112 A 16,16 0 0,1 144,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,112 A 16,16 0 0,0 240,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,128 A 16,16 0 0,1 400,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,144 A 16,16 0 0,0 0,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,128 A 16,16 0 0,1 16,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,256 A 16,16 0 0,0 376,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,240 A 16,16 0 0,1 400,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,272 A 16,16 0 0,0 416,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,288 A 16,16 0 0,0 16,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='32' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='96' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='160' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='224' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='288' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='352' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='416' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='480' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='256' y='4' fill='currentColor' style='font-size:1em'>N&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Theorem&lt;/strong>&lt;/dt>
&lt;dd>$\mathbb{P}[\sum_iC_i^2 &amp;gt; 4N]&amp;lt;\frac{1}{2}$&lt;/dd>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>Let $I_{xy}$ be an indicator that $x,y$ collide. Observe that within any secondary layer with $C_i$ elements ($C_i^2$ slots), for any two elements $x, y$, $I_{xy}=1$ (including $I_{xx}$, this amounts to $C_i^2$).&lt;/dd>
&lt;dd>$$\begin{align*}\mathbb{E}[\sum_iC_i^2]&amp;amp;=\mathbb{E}[\sum_x\sum_yI_{xy}]\newline&amp;amp;=N+\sum_x\sum_{y\neq x}\mathbb{E}[C_{xy}]\newline&amp;amp;\leq N+\frac{N(N-1)}{M}\newline&amp;amp;=N+\frac{N(N-1)}{N}\newline&amp;amp;&amp;lt;2N\end{align*}$$&lt;/dd>
&lt;dd>By &lt;a class="link" href="https://en.wikipedia.org/wiki/Markov%27s_inequality" target="_blank" rel="noopener"
>Markov&amp;rsquo;s Inequality&lt;/a>, the problem statement is proven.
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$$\mathbb{P}[X\geq a]\leq\frac{\mathbb{E}[X]}{a}$$&lt;/p>
&lt;/div>
&lt;/dd>
&lt;/dl>
&lt;/blockquote></description></item><item><title>IV. Splay Trees</title><link>https://kiblitz.github.io/p/451-splay-trees/</link><pubDate>Tue, 20 Jun 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/451-splay-trees/</guid><description>&lt;img src="https://kiblitz.github.io/p/451-splay-trees/waterfall_forest.jpg" alt="Featured image of post IV. Splay Trees" />&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;h3 id="motivation">Motivation&lt;/h3>
&lt;p>Suppose you want to keep an ordered mapping of keys to values. If the contents are dynamic, a self-balancing tree (i.e. AVL, red-black, etc.) is desirable to allow for logarithmic modification and access operations.&lt;/p>
&lt;p>What if repeated access are expected? Specifically, if a value is queried several times and is located at a leaf, then each operation has $\mathcal{O}(\log n)$ time complexity. But we already know the value after the first query. We should be caching accesses.&lt;/p>
&lt;h3 id="splay-tree">Splay Tree&lt;/h3>
&lt;p>The splay tree is a self-balancing binary tree with the property that accesses are cached through its internal structure.&lt;/p>
&lt;p>Operations on a splay tree are approximately the same as those of other self-balancing trees: $\mathcal{O}(\log n)$ amortized.&lt;/p>
&lt;p>At a high level, any operation on a node $N$ restructures the tree so that $N$ becomes the new root. Thus, repeated queries have $\mathcal{O}(1)$ time complexity.&lt;/p>
&lt;h2 id="definition">Definition&lt;/h2>
&lt;h3 id="rotations">Rotations&lt;/h3>
&lt;p>There are three splay steps for moving $N$ to the root (in these cases, $x$ upwards). Each is constructed using rotations. Each of these three have a mirror version. &lt;strong>Zig&lt;/strong> is specifically for when $x$ is the child of the root node.&lt;/p>
&lt;h4 id="zig">Zig&lt;/h4>
&lt;p>When $y$ is the root.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 89"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 8,48 L 24,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,16 L 112,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='8' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='24' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='96' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='112' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='0' y='68' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;text text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='64' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='88' y='4' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='120' y='68' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;h4 id="zig-zag">Zig-zag&lt;/h4>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 121"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,48 L 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,80 L 120,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,48 L 136,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,64 L 240,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 L 32,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,32 L 256,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='104' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='120' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='136' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='224' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='240' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='256' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='0' y='52' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;text text-anchor='middle' x='40' y='4' fill='currentColor' style='font-size:1em'>z&lt;/text>
&lt;text text-anchor='middle' x='40' y='100' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='56' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='64' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='72' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='80' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='96' y='100' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;text text-anchor='middle' x='136' y='52' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='144' y='4' fill='currentColor' style='font-size:1em'>z&lt;/text>
&lt;text text-anchor='middle' x='168' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='176' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='184' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='192' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='216' y='84' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;text text-anchor='middle' x='240' y='20' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='264' y='84' fill='currentColor' style='font-size:1em'>z&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;h4 id="zig-zig">Zig-zig&lt;/h4>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 121"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 8,80 L 24,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,48 L 40,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,64 L 136,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,32 L 152,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,16 L 248,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 248,48 L 264,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='8' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='24' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='40' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='120' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='136' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='152' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='232' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='248' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='264' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='0' y='100' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='8' y='52' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;text text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'>z&lt;/text>
&lt;text text-anchor='middle' x='64' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='72' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='80' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='88' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='112' y='84' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='136' y='20' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;text text-anchor='middle' x='160' y='84' fill='currentColor' style='font-size:1em'>z&lt;/text>
&lt;text text-anchor='middle' x='184' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='192' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='200' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='208' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='224' y='4' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='264' y='52' fill='currentColor' style='font-size:1em'>y&lt;/text>
&lt;text text-anchor='middle' x='272' y='100' fill='currentColor' style='font-size:1em'>z&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 392 25"
>
&lt;g transform='translate(8,16)'>
&lt;text text-anchor='middle' x='8' y='4' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='16' y='4' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='24' y='4' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>The arrows above signify &lt;em>&lt;strong>rotations&lt;/strong>&lt;/em>.&lt;/p>
&lt;hr>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 25"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,0 L 32,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='40.000000,0.000000 28.000000,-5.600000 28.000000,5.600000' fill='currentColor' transform='rotate(0.000000, 32.000000, 0.000000)'>&lt;/polygon>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>The arrows below signify &lt;em>&lt;strong>splay steps&lt;/strong>&lt;/em>.&lt;/p>
&lt;hr>
&lt;p>Rotations make up splay steps, but for analysis purposes we only care about splay steps.&lt;/p>&lt;/p>
&lt;/div>
&lt;h3 id="access">Access&lt;/h3>
&lt;p>Whenever we want to access (i.e. find the mapped value of) $N$, we traverse to $N$ and then splay it to the root.&lt;/p>
&lt;h3 id="examples">Examples&lt;/h3>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 217"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,192 L 32,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,160 L 48,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,128 L 64,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,96 L 80,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,64 L 96,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,32 L 112,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='192' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='160' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='64' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='80' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='96' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='112' cy='0' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='0' y='196' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='16' y='164' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='32' y='132' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='48' y='100' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='64' y='68' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='80' y='36' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='96' y='4' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>$\texttt{splay}(0)$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 217"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,96 L 32,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,96 L 152,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,96 L 264,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,128 L 88,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,96 L 104,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,64 L 120,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,32 L 136,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,80 L 208,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,48 L 224,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,144 L 208,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,128 L 320,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,96 L 336,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,128 L 88,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,160 L 104,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,144 L 208,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,80 L 208,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,112 L 224,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,128 L 320,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,96 L 336,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,32 L 336,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,64 L 352,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='40.000000,96.000000 28.000000,90.400002 28.000000,101.599998' fill='currentColor' transform='rotate(0.000000, 32.000000, 96.000000)'>&lt;/polygon>
&lt;polygon points='160.000000,96.000000 148.000000,90.400002 148.000000,101.599998' fill='currentColor' transform='rotate(0.000000, 152.000000, 96.000000)'>&lt;/polygon>
&lt;polygon points='272.000000,96.000000 260.000000,90.400002 260.000000,101.599998' fill='currentColor' transform='rotate(0.000000, 264.000000, 96.000000)'>&lt;/polygon>
&lt;circle cx='72' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='88' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='88' cy='160' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='104' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='104' cy='192' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='120' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='136' cy='0' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='192' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='192' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='208' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='208' cy='112' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='208' cy='176' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='224' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='224' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='304' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='320' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='320' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='320' cy='160' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='336' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='336' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='352' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='56' y='132' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='72' y='100' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='72' y='164' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='88' y='68' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='88' y='196' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='104' y='36' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='120' y='4' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='176' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='176' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='192' y='52' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='192' y='116' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='208' y='20' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='224' y='180' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='240' y='148' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='288' y='132' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='304' y='36' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='304' y='100' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='320' y='68' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='336' y='164' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='352' y='132' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='368' y='100' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>$\texttt{splay}(3)$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 169"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,80 L 32,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,80 L 128,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,112 L 168,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,80 L 104,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,112 L 120,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,0 L 168,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,80 L 184,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='40.000000,80.000000 28.000000,74.400002 28.000000,85.599998' fill='currentColor' transform='rotate(0.000000, 32.000000, 80.000000)'>&lt;/polygon>
&lt;circle cx='88' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='104' cy='112' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='120' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='128' cy='0' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='152' cy='112' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='168' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='184' cy='112' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='72' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='88' y='116' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='104' y='148' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='112' y='4' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='136' y='116' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='152' y='84' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='200' y='116' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;h2 id="analysis">Analysis&lt;/h2>
&lt;h3 id="setup">Setup&lt;/h3>
&lt;h4 id="weights">Weights&lt;/h4>
&lt;p>Purely for the purposes of analysis, assign each node $x$ with weight $w(x)&amp;gt;0$.&lt;/p>
&lt;h4 id="sizes">Sizes&lt;/h4>
&lt;p>Let $T(x)$ denote the subtree rooted at node $x$.
$$s(x)=\sum_{y\in T(x)} w(y)$$&lt;/p>
&lt;h4 id="rank">Rank&lt;/h4>
&lt;p>$$r(x)=\lfloor\log_2(s(x))\rfloor$$
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Observe that in a rotation between nodes $x,y$, the sizes (and thus ranks) of &lt;em>&lt;strong>only&lt;/strong>&lt;/em> $x,y$ change. Thus, splay steps only alter the ranks of the nodes they involve.&lt;/p>
&lt;/div>
&lt;/p>
&lt;h4 id="potential">Potential&lt;/h4>
&lt;p>Let $T$ denote the entire tree state.
$$\Phi(T)=\sum_{x\in T}r(x)$$&lt;/p>
&lt;h4 id="example">Example&lt;/h4>
&lt;p>Let $w(\cdot)=1$. Sizes $s(x)$ on left and ranks $r(x)$ on right.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 185"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 40,128 L 56,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 56,96 L 72,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,64 L 88,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,32 L 104,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,128 L 88,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 264,128 L 280,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,96 L 296,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 296,64 L 312,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 312,32 L 328,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 296,128 L 312,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,128 L 88,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,64 L 88,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,32 L 104,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 296,128 L 312,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 296,64 L 312,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 312,32 L 328,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='40' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='56' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='72' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='72' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='88' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='88' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='88' cy='160' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='104' cy='0' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='104' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='264' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='280' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='296' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='296' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='312' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='312' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='312' cy='160' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='328' cy='0' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='328' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='24' y='132' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='40' y='100' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='56' y='68' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='88' y='4' fill='currentColor' style='font-size:1em'>9&lt;/text>
&lt;text text-anchor='middle' x='88' y='132' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='104' y='100' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='104' y='164' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='120' y='68' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='248' y='132' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='264' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='280' y='68' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='296' y='36' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='312' y='4' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='312' y='132' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='328' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='328' y='164' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='344' y='68' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>$$\Phi(T)=11$$
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Observe that when $w(\cdot)=1$, $\Phi(T)=\mathcal{O}(n)$ when $T$ is balanced, and $\Phi(T)=\mathcal{O}(n\log n)$ when $T$ is most unbalanced (long chain)&lt;/p>
&lt;/div>
&lt;/p>
&lt;h3 id="access-lemma">Access Lemma&lt;/h3>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Lemma&lt;/strong>&lt;/dt>
&lt;dd>The amortized time cost for splaying node $x$ on tree $T$ with root $t$ is at most the following (regardless of $w$):&lt;/dd>
&lt;dd>$$3(r(t)-r(x))+1$$&lt;/dd>
&lt;/dl>
&lt;p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Recall:
$$ac_i = c_i + \Phi(S_i)-\Phi(S_{i-1})$$&lt;/p>
&lt;/div>
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>This is a very tedious and dense proof. You&amp;rsquo;ll be fine if you take my word for it that the lemma is true.&lt;/p>
&lt;/div>
&lt;/p>
&lt;dl>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>Observe that if two siblings have the same rank $r$, then their sizes are at least $2^r$. Thus, their parent has size at least $2\cdot 2^r=2^{r+1}$. Thus, the parent node has rank at least $r+1$.&lt;/dd>
&lt;dd>
&lt;p>Conversely, observe that if a node $x$ and its parent have the same rank $r$, then the sibling of $x$ must have rank less than $r$.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>Call this observation the &lt;strong>Rank Rule&lt;/strong>.&lt;/p>
&lt;/dd>
&lt;dd>&lt;hr>
&lt;/dd>
&lt;dd>Call $T_i$ the tree state after splay step $i$, where $T_0=T$. Let $r_i(n)$ be the rank of node $n$ in $T_i$.&lt;/dd>
&lt;dd>
&lt;p>We define $ac_i&amp;rsquo;=c_i&amp;rsquo;+\Phi(T_i)-\Phi(T_{i-1})$, $c_i&amp;rsquo;$ is the cost of the $i$th splay step and $ac_i&amp;rsquo;$ is the amortized cost of the $i$th splay step. Observe that a splay with $k$ splay steps is consistent with global $ac$:
$$\begin{align*}ac&amp;amp;=\sum_iac_i&amp;rsquo;\newline&amp;amp;=\sum_ic_i&amp;rsquo;+(\Phi(T_k)-\Phi(T_{k-1}))+&amp;hellip;+(\Phi(T_1)-\Phi(T))\newline&amp;amp;=c+\Phi(T_k)-\Phi(T)\end{align*}$$&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>For readibility purposes, if $i$ is fixed at a proof step, we will refer to $i$ as $\text{curr}$ and $i-1$ as $\text{prev}$.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>We will show that if splay step $i$ is a zig step moving node $a$ upwards to $b$: $$ac_\text{curr}&amp;rsquo;\leq 3(r_\text{prev}(b)-r_\text{prev}(a))+1$$ We will also show that if splay step $i$ is either a zig-zag or zig-zig step: $$ac_\text{curr}&amp;rsquo;\leq 3(r_\text{prev}(b)-r_\text{prev}(a))$$&lt;/p>
&lt;/dd>
&lt;dd>Since the zig step can occur at most once, we would be able to prove the problem statement.&lt;/dd>
&lt;dd>$$ac=\sum_iac_i&amp;rsquo;\leq 1 + \underbrace{3(r(t) -r(x))}_{\text{telescopes}}$$&lt;/dd>
&lt;dd>
&lt;p>&lt;strong>Zig&lt;/strong>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 89"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 8,48 L 24,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,16 L 112,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='8' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='24' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='96' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='112' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='0' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='64' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='72' y='36' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='88' y='4' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='120' y='68' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>&lt;/p>
&lt;/div>
&lt;/p>
&lt;/dd>
&lt;dd>This can only occur if $b$ is the root. Since the rank on the root is constant (sum of all weights is constant): $$r_\text{curr}(a)=r_\text{prev}(b)$$&lt;/dd>
&lt;dd>
&lt;p>Since the rank of a child is at most that of its parent: $$r_\text{curr}(b)\leq r_\text{curr}(a)=r_\text{prev}(b)$$&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>The root node still has rank $r_\text{prev}(b)$ (no change) and its child at most increases from $r_\text{prev}(a)$ to $r_\text{prev}(b)$.&lt;/p>
&lt;/dd>
&lt;dd>$$\Phi(T_\text{curr})-\Phi(T_\text{prev})\leq r_\text{prev}(b)-r_\text{prev}(a)$$&lt;/dd>
&lt;dd>$$ac \leq 1 + r_\text{prev}(b)-r_\text{prev}(a)\leq 3(r_\text{prev}(b)-r_\text{prev}(a))+1$$&lt;/dd>
&lt;dd>
&lt;p>&lt;strong>Zig-zag&lt;/strong>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 121"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,48 L 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,80 L 120,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,48 L 136,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,64 L 240,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 L 32,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,32 L 256,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='104' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='120' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='136' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='224' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='240' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='256' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='0' y='52' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='40' y='4' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='40' y='100' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='56' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='64' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='72' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='80' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='96' y='100' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='136' y='52' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='144' y='4' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='168' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='176' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='184' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='192' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='216' y='84' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='240' y='20' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='264' y='84' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>&lt;/p>
&lt;/div>
&lt;/p>
&lt;/dd>
&lt;dd>&lt;strong>Case $r_\text{prev}(a)=r_\text{prev}(b)$&lt;/strong>&lt;/dd>
&lt;dd>
&lt;p>Since the rank of a node is lower bounded by the rank of its child, $r_\text{prev}(c)=r_\text{prev}(a)=r_\text{prev}(b)$.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>Recall that since the sum of the weights of the subtree are the same, $r_\text{prev}(b)=r_\text{curr}(a)$. By the &lt;strong>Rank Rule&lt;/strong>: $$r_\text{curr}(c)&amp;lt;r_\text{curr}(a) \text{ OR } r_\text{curr}(b)&amp;lt;r_\text{curr}(a)$$ Since $r(\cdot)$ is integral, $$r_\text{curr}(c)\leq r_\text{curr}(a) - 1 \text{ OR } r_\text{curr}(b)\leq r_\text{curr}(a) - 1$$&lt;/p>
&lt;/dd>
&lt;dd>Thus,&lt;/dd>
&lt;dd>$$\begin{align*}\Phi(T_\text{curr})-\Phi(T_\text{prev})&amp;amp;= (r_\text{curr}(a) + r_\text{curr}(b) + r_\text{curr}(c))-(r_\text{prev}(a) + r_\text{prev}(b) + r_\text{prev}(c))\newline &amp;amp;\leq r_\text{curr}(a) + (r_\text{curr}(a) + r_\text{curr}(a) - 1)-(r_\text{curr}(a) + r_\text{curr}(a) + r_\text{curr}(a))\newline &amp;amp;= -1\end{align*}$$&lt;/dd>
&lt;dd>$$ac \leq 1 - 1 =0 \leq 3(r_\text{prev}(b)-r_\text{prev}(a))$$&lt;/dd>
&lt;dd>&lt;hr>
&lt;/dd>
&lt;dd>&lt;strong>Case $r_\text{prev}(a)&amp;lt;r_\text{prev}(b)$&lt;/strong>&lt;/dd>
&lt;dd>
&lt;p>Since $r(\cdot)$ is integral and $r_\text{prev}(a)&amp;lt;r_\text{prev}(b)$,&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>$$r_\text{prev}(a)+1\leq r_\text{prev}(b)$$&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>As before, $r_\text{prev}(b)=r_\text{curr}(a)$, and all node ranks are upper bounded by those of their parents.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>$$\begin{align*}\Phi(T_\text{curr})-\Phi(T_\text{prev})&amp;amp;= (r_\text{curr}(a) + r_\text{curr}(b) + r_\text{curr}(c))-(r_\text{prev}(a) + r_\text{prev}(b) + r_\text{prev}(c))\newline &amp;amp;\leq r_\text{prev}(b) + r_\text{prev}(b) + r_\text{prev}(b)-(r_\text{prev}(a) + (r_\text{prev}(a)+1) + r_\text{prev}(a))\newline &amp;amp;= 3(r_\text{prev}(b)-r_\text{prev}(a))-1\end{align*}$$&lt;/p>
&lt;/dd>
&lt;dd>$$ac \leq 1 + 3(r_\text{prev}(b)-r_\text{prev}(a))- 1 = 3(r_\text{prev}(b)-r_\text{prev}(a))$$&lt;/dd>
&lt;dd>&lt;strong>Zig-zig&lt;/strong>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 121"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 8,80 L 24,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,48 L 40,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,64 L 136,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,32 L 152,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,16 L 248,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 248,48 L 264,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='8' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='24' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='40' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='120' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='136' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='152' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='232' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='248' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='264' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='0' y='100' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='8' y='52' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='64' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='72' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='80' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='88' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='112' y='84' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='136' y='20' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='160' y='84' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='184' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='192' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='200' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='208' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='224' y='4' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='264' y='52' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='272' y='100' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>&lt;/p>
&lt;/div>
&lt;/dd>
&lt;dd>&lt;strong>Case $r_\text{prev}(a)=r_\text{prev}(b)$&lt;/strong>&lt;/dd>
&lt;dd>
&lt;p>Since the rank of a node is lower bounded by the rank of its child, $r_\text{prev}(c)=r_\text{prev}(a)=r_\text{prev}(b)$.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>As before, $r_\text{prev}(b)=r_\text{curr}(a)$, and all node ranks are upper bounded by those of their parents.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>Let $r_\text{inter}(\cdot)$ indicate node ranks in the intermediate rotation (rooted at $c$). Observe that $r_\text{prev}(a)=r_\text{inter}(a)$ and $r_\text{inter}(b)=r_\text{curr}(b)$ since their children remain the same. By the &lt;strong>Rank Rule&lt;/strong>, $r_\text{inter}(b) &amp;lt; r_\text{inter}(c)=r_\text{inter}(a)$. Because $r(\cdot)$ is integral, $$r_\text{curr}(b)\leq r_\text{curr}(a)-1$$&lt;/p>
&lt;/dd>
&lt;dd>Thus,&lt;/dd>
&lt;dd>
&lt;p>$$\begin{align*}\Phi(T_\text{curr})-\Phi(T_\text{prev})&amp;amp;= (r_\text{curr}(a) + r_\text{curr}(b) + r_\text{curr}(c))-(r_\text{prev}(a) + r_\text{prev}(b) + r_\text{prev}(c))\newline &amp;amp;\leq r_\text{curr}(a) + (r_\text{curr}(a)-1) + r_\text{curr}(a) - (r_\text{curr}(a) + r_\text{curr}(a) + r_\text{curr}(a))\newline &amp;amp;= -1\end{align*}$$&lt;/p>
&lt;/dd>
&lt;dd>$$ac \leq 1 - 1 =0 \leq 3(r_\text{prev}(b)-r_\text{prev}(a))$$&lt;/dd>
&lt;dd>&lt;hr>
&lt;/dd>
&lt;dd>&lt;strong>Case $r_\text{prev}(a)&amp;lt;r_\text{prev}(b)$&lt;/strong>&lt;/dd>
&lt;dd>
&lt;p>Since $r(\cdot)$ is integral and $r_\text{prev}(a)&amp;lt;r_\text{prev}(b)$,&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>$$r_\text{prev}(a)+1\leq r_\text{prev}(b)$$&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>As before, $r_\text{prev}(b)=r_\text{curr}(a)$, and all node ranks are upper bounded by those of their parents.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>$$\begin{align*}\Phi(T_\text{curr})-\Phi(T_\text{prev})&amp;amp;= (r_\text{curr}(a) + r_\text{curr}(b) + r_\text{curr}(c))-(r_\text{prev}(a) + r_\text{prev}(b) + r_\text{prev}(c))\newline &amp;amp;\leq r_\text{prev}(b) + r_\text{prev}(b) + r_\text{prev}(b)-(r_\text{prev}(a) + (r_\text{prev}(a)+1) + r_\text{prev}(a))\newline &amp;amp;= 3(r_\text{prev}(b)-r_\text{prev}(a))-1\end{align*}$$&lt;/p>
&lt;/dd>
&lt;dd>$$ac \leq 1 + 3(r_\text{prev}(b)-r_\text{prev}(a))- 1 = 3(r_\text{prev}(b)-r_\text{prev}(a))$$&lt;/dd>
&lt;/dl>
&lt;/blockquote>
&lt;h3 id="balance-theorem">Balance Theorem&lt;/h3>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Theorem&lt;/strong>&lt;/dt>
&lt;dd>A sequence of $k$ splays in a tree of $n$ nodes has time complexity $$\mathcal{O}(k\log n + n\log n)$$&lt;/dd>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>Set $w(\cdot)=1$. By the &lt;strong>Access Lemma&lt;/strong>,&lt;/dd>
&lt;dd>$$\begin{align*}ac_i &amp;amp;= c_i + \Phi(T_i)-\Phi(T_{i-1}) \newline&amp;amp;\leq 3(r(t)-r(x) + 1\newline&amp;amp;\leq 3(\log_2(n)-0)+1\newline&amp;amp;\leq 3\log_2(n)+1\end{align*}$$&lt;/dd>
&lt;dd>Thus,&lt;/dd>
&lt;dd>$$\sum_i ac_i = \sum_i c_i + \Phi(T_m)-\Phi(T_{0}) \leq k (3\log_2 n + 1)$$&lt;/dd>
&lt;dd>Since $\log(\cdot)&amp;gt;0$ and $r(t)\leq\log_2 n$, $$0\leq \Phi(T)\leq n\log_2 n$$&lt;/dd>
&lt;dd>Thus,&lt;/dd>
&lt;dd>$$\begin{align*}\sum_i c_i -n \log_2 n &amp;amp;\leq k (3\log_2 n + 1)\newline\sum_i c_i &amp;amp;\leq n \log_2 n + k (3\log_2 n + 1)\newline&amp;amp;\in\mathcal{O}(k\log n + n\log n)\end{align*}$$&lt;/dd>
&lt;/dl>
&lt;/blockquote>
&lt;h2 id="operations">Operations&lt;/h2>
&lt;h3 id="access-1">Access&lt;/h3>
&lt;p>As we mentioned before, access searches for a node $x$ then splays it if found. Since binary search has time complexity $\mathcal{O}(\log n)$, the work is dominated by the splaying.&lt;/p>
&lt;h3 id="insert">Insert&lt;/h3>
&lt;p>First, traverse $T$ as if to search for the node $x$. Once we reach a node $n$ and cannot traverse further (i.e. $\texttt{insert}(3)$ but the $2$ node has no right child), splay $n$.&lt;/p>
&lt;p>Now, we can insert $x$ appropriately into $T$.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 121"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,64 L 32,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,80 L 160,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,48 L 176,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 296,48 L 312,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,32 L 48,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,16 L 192,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 312,16 L 328,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,48 L 344,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='144' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='160' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='176' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='192' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='296' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='312' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='328' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='344' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='8' y='84' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='32' y='20' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='56' y='84' fill='currentColor' style='font-size:1em'>R&lt;/text>
&lt;text text-anchor='middle' x='80' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='88' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='96' y='52' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='104' y='52' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='136' y='100' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='144' y='52' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='176' y='4' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='200' y='68' fill='currentColor' style='font-size:1em'>R&lt;/text>
&lt;text text-anchor='middle' x='240' y='52' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='248' y='52' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='288' y='68' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='312' y='4' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='344' y='52' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='352' y='100' fill='currentColor' style='font-size:1em'>R&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>Again, the search and insertion ($\mathcal{O}(1)$) is dominated by the splaying.&lt;/p>
&lt;h3 id="delete">Delete&lt;/h3>
&lt;p>First, splay the node we want to delete $x$. Now consider its children subtrees $L,R$. After removing $x$, splay the right-most node in $L$. Clearly, this new $L&amp;rsquo;$ has no right child. Set $R$ to be its new right child.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 384 89"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,48 L 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,48 L 144,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,48 L 176,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 264,64 L 272,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,48 L 288,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 L 48,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,32 L 152,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,32 L 184,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,48 L 280,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,16 L 304,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='144' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='176' cy='32' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='272' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='288' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='304' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='8' y='68' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'>x&lt;/text>
&lt;text text-anchor='middle' x='56' y='68' fill='currentColor' style='font-size:1em'>R&lt;/text>
&lt;text text-anchor='middle' x='80' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='88' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='96' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='104' y='36' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='144' y='20' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='176' y='20' fill='currentColor' style='font-size:1em'>R&lt;/text>
&lt;text text-anchor='middle' x='216' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='224' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='232' y='36' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='240' y='36' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='288' y='4' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='296' y='4' fill='currentColor' style='font-size:1em'>'&lt;/text>
&lt;text text-anchor='middle' x='312' y='68' fill='currentColor' style='font-size:1em'>R&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>As before, the search is dominated by the two splaying operations.&lt;/p>
&lt;h2 id="above-and-beyond">Above and Beyond&lt;/h2>
&lt;h3 id="static-optimality">Static Optimality&lt;/h3>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Theorem&lt;/strong>&lt;/dt>
&lt;dd>Let T be any static search tree with $n$ nodes. Let $t$ be the cost of searching for all nodes in a sequence of $s$ accesses (sum of depths of all nodes). The cost of splaying that sequence of requests, starting with any initial splay tree is $\mathcal{O}(n^2+t)$.&lt;/dd>
&lt;/dl>
&lt;/blockquote>
&lt;p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Can be proved with $w(x)=\text{number of times $x$ is accessed)}$&lt;/p>
&lt;/div>
For a static tree $T$, $n$ is constant. This is powerful since essentially, splay trees perform only a constant sum ($n^2$) of work worse than the most optimal tree for $s$.&lt;/p>
&lt;h3 id="sequential-access">Sequential Access&lt;/h3>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Theorem&lt;/strong>&lt;/dt>
&lt;dd>The cost of accessing each of the $n$ nodes in a tree in in-order order is $\mathcal{O}(n)$&lt;/dd>
&lt;/dl>
&lt;/blockquote></description></item><item><title>Last Coin</title><link>https://kiblitz.github.io/p/last-coin/</link><pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/last-coin/</guid><description>&lt;img src="https://kiblitz.github.io/p/last-coin/coin.jpeg" alt="Featured image of post Last Coin" />&lt;h2 id="problem">Problem&lt;/h2>
&lt;blockquote>
&lt;p>You and your friend come accross an adversary $\mathcal{E}$ who challenges you to a game.&lt;/p>
&lt;p>One of you will privately visit $\mathcal{E}$ at his grand table. WLOG, let&amp;rsquo;s say it was you. There are $n$ coins that can fit in $n$ empty slots. One-by-one, $\mathcal{E}$ will point at an empty slot and you must place a coin positioned either heads or tails on that slot. This goes on until $n-1$ slots have been filled.&lt;/p>
&lt;p>At this point, $\mathcal{E}$ will fill the last slot $L$ with a coin oriented at their discretion. Now, your friend will come to the grand table. It is their job to figure out which slot is $L$ without consulting you. Specifically, they must select a set of $K$ slots for which they can guarantee one of these slots is $L$.&lt;/p>
&lt;p>What strategy will you and your friend employ to minimize $K$?&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 624 249"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 240,48 L 272,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,80 L 272,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,48 L 240,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,48 L 272,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,0 0,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,1 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,0 48,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,1 80,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,0 96,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,1 128,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,0 A 16,16 0 0,0 144,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,0 A 16,16 0 0,1 176,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 A 16,16 0 0,0 192,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 A 16,16 0 0,1 224,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,0 A 16,16 0 0,0 240,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,0 A 16,16 0 0,1 272,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,0 A 16,16 0 0,0 288,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,0 A 16,16 0 0,1 320,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,0 A 16,16 0 0,0 336,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,0 A 16,16 0 0,1 368,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,0 A 16,16 0 0,0 384,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,0 A 16,16 0 0,1 416,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,0 A 16,16 0 0,0 432,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,0 A 16,16 0 0,1 464,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,0 A 16,16 0 0,0 480,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,0 A 16,16 0 0,1 512,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,0 A 16,16 0 0,0 528,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,0 A 16,16 0 0,1 560,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,0 A 16,16 0 0,0 576,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,0 A 16,16 0 0,1 608,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 A 16,16 0 0,0 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 A 16,16 0 0,1 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,16 A 16,16 0 0,0 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,16 A 16,16 0 0,1 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,16 A 16,16 0 0,0 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,16 A 16,16 0 0,1 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,16 A 16,16 0 0,0 160,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,16 A 16,16 0 0,1 160,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,16 A 16,16 0 0,0 208,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,16 A 16,16 0 0,1 208,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,16 A 16,16 0 0,0 256,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,16 A 16,16 0 0,1 256,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,16 A 16,16 0 0,0 304,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,16 A 16,16 0 0,1 304,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,16 A 16,16 0 0,0 352,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,16 A 16,16 0 0,1 352,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,16 A 16,16 0 0,0 400,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,16 A 16,16 0 0,1 400,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,16 A 16,16 0 0,0 448,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,16 A 16,16 0 0,1 448,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,16 A 16,16 0 0,0 496,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 512,16 A 16,16 0 0,1 496,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,16 A 16,16 0 0,0 544,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,16 A 16,16 0 0,1 544,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 576,16 A 16,16 0 0,0 592,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 608,16 A 16,16 0 0,1 592,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 A 16,16 0 0,0 0,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 A 16,16 0 0,1 32,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,48 A 16,16 0 0,0 48,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,48 A 16,16 0 0,1 80,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,48 A 16,16 0 0,0 96,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,48 A 16,16 0 0,1 128,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,48 A 16,16 0 0,0 144,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,48 A 16,16 0 0,1 176,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,48 A 16,16 0 0,0 192,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,48 A 16,16 0 0,1 224,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,48 A 16,16 0 0,0 288,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,48 A 16,16 0 0,1 320,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,48 A 16,16 0 0,0 336,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,48 A 16,16 0 0,1 368,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,48 A 16,16 0 0,0 384,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,48 A 16,16 0 0,1 416,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,48 A 16,16 0 0,0 432,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,48 A 16,16 0 0,1 464,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,48 A 16,16 0 0,0 480,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,48 A 16,16 0 0,1 512,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,48 A 16,16 0 0,0 528,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,48 A 16,16 0 0,1 560,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,48 A 16,16 0 0,0 576,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,48 A 16,16 0 0,1 608,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,64 A 16,16 0 0,0 16,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,64 A 16,16 0 0,1 16,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,64 A 16,16 0 0,0 64,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,64 A 16,16 0 0,1 64,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,64 A 16,16 0 0,0 112,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,64 A 16,16 0 0,1 112,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,64 A 16,16 0 0,0 160,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,64 A 16,16 0 0,1 160,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,64 A 16,16 0 0,0 208,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,64 A 16,16 0 0,1 208,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,64 A 16,16 0 0,0 304,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,64 A 16,16 0 0,1 304,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,64 A 16,16 0 0,0 352,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,64 A 16,16 0 0,1 352,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,64 A 16,16 0 0,0 400,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,64 A 16,16 0 0,1 400,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,64 A 16,16 0 0,0 448,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,64 A 16,16 0 0,1 448,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,64 A 16,16 0 0,0 496,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 512,64 A 16,16 0 0,1 496,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,64 A 16,16 0 0,0 544,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,64 A 16,16 0 0,1 544,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 576,64 A 16,16 0 0,0 592,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 608,64 A 16,16 0 0,1 592,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,96 A 16,16 0 0,0 0,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,96 A 16,16 0 0,1 32,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,96 A 16,16 0 0,0 48,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,96 A 16,16 0 0,1 80,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,96 A 16,16 0 0,0 96,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,96 A 16,16 0 0,1 128,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,96 A 16,16 0 0,0 144,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,96 A 16,16 0 0,1 176,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,96 A 16,16 0 0,0 192,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,96 A 16,16 0 0,1 224,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,96 A 16,16 0 0,0 240,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,96 A 16,16 0 0,1 272,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,96 A 16,16 0 0,0 288,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,96 A 16,16 0 0,1 320,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,96 A 16,16 0 0,0 336,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,96 A 16,16 0 0,1 368,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,96 A 16,16 0 0,0 384,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,96 A 16,16 0 0,1 416,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,96 A 16,16 0 0,0 432,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,96 A 16,16 0 0,1 464,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,96 A 16,16 0 0,0 480,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,96 A 16,16 0 0,1 512,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,96 A 16,16 0 0,0 528,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,96 A 16,16 0 0,1 560,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,96 A 16,16 0 0,0 576,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,96 A 16,16 0 0,1 608,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,112 A 16,16 0 0,0 16,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,112 A 16,16 0 0,1 16,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,112 A 16,16 0 0,0 64,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,112 A 16,16 0 0,1 64,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,112 A 16,16 0 0,0 112,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,112 A 16,16 0 0,1 112,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,112 A 16,16 0 0,0 160,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,112 A 16,16 0 0,1 160,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,112 A 16,16 0 0,0 208,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,112 A 16,16 0 0,1 208,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,112 A 16,16 0 0,0 256,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,112 A 16,16 0 0,1 256,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,112 A 16,16 0 0,0 304,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,112 A 16,16 0 0,1 304,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,112 A 16,16 0 0,0 352,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,112 A 16,16 0 0,1 352,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,112 A 16,16 0 0,0 400,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,112 A 16,16 0 0,1 400,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,112 A 16,16 0 0,0 448,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,112 A 16,16 0 0,1 448,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,112 A 16,16 0 0,0 496,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 512,112 A 16,16 0 0,1 496,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,112 A 16,16 0 0,0 544,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,112 A 16,16 0 0,1 544,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 576,112 A 16,16 0 0,0 592,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 608,112 A 16,16 0 0,1 592,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,144 A 16,16 0 0,0 0,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,144 A 16,16 0 0,1 32,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,144 A 16,16 0 0,0 48,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,144 A 16,16 0 0,1 80,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,144 A 16,16 0 0,0 96,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,144 A 16,16 0 0,1 128,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,144 A 16,16 0 0,0 144,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,144 A 16,16 0 0,1 176,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,144 A 16,16 0 0,0 192,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,144 A 16,16 0 0,1 224,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,144 A 16,16 0 0,0 240,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,144 A 16,16 0 0,1 272,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,144 A 16,16 0 0,0 288,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,144 A 16,16 0 0,1 320,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,144 A 16,16 0 0,0 336,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,144 A 16,16 0 0,1 368,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,144 A 16,16 0 0,0 384,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,144 A 16,16 0 0,1 416,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,144 A 16,16 0 0,0 432,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,144 A 16,16 0 0,1 464,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,144 A 16,16 0 0,0 480,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,144 A 16,16 0 0,1 512,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,144 A 16,16 0 0,0 528,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,144 A 16,16 0 0,1 560,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,144 A 16,16 0 0,0 576,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,144 A 16,16 0 0,1 608,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,160 A 16,16 0 0,0 16,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,160 A 16,16 0 0,1 16,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,160 A 16,16 0 0,0 64,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,160 A 16,16 0 0,1 64,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,160 A 16,16 0 0,0 112,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,160 A 16,16 0 0,1 112,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,160 A 16,16 0 0,0 160,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,160 A 16,16 0 0,1 160,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,160 A 16,16 0 0,0 208,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,160 A 16,16 0 0,1 208,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,160 A 16,16 0 0,0 256,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,160 A 16,16 0 0,1 256,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,160 A 16,16 0 0,0 304,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,160 A 16,16 0 0,1 304,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,160 A 16,16 0 0,0 352,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,160 A 16,16 0 0,1 352,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,160 A 16,16 0 0,0 400,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,160 A 16,16 0 0,1 400,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,160 A 16,16 0 0,0 448,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,160 A 16,16 0 0,1 448,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,160 A 16,16 0 0,0 496,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 512,160 A 16,16 0 0,1 496,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,160 A 16,16 0 0,0 544,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,160 A 16,16 0 0,1 544,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 576,160 A 16,16 0 0,0 592,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 608,160 A 16,16 0 0,1 592,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,192 A 16,16 0 0,0 0,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,192 A 16,16 0 0,1 32,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,192 A 16,16 0 0,0 48,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,192 A 16,16 0 0,1 80,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,192 A 16,16 0 0,0 96,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,192 A 16,16 0 0,1 128,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,192 A 16,16 0 0,0 144,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,192 A 16,16 0 0,1 176,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,192 A 16,16 0 0,0 192,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,192 A 16,16 0 0,1 224,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,192 A 16,16 0 0,0 240,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,192 A 16,16 0 0,1 272,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,192 A 16,16 0 0,0 288,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,192 A 16,16 0 0,1 320,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,192 A 16,16 0 0,0 336,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,192 A 16,16 0 0,1 368,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,192 A 16,16 0 0,0 384,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,192 A 16,16 0 0,1 416,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,192 A 16,16 0 0,0 432,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,192 A 16,16 0 0,1 464,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,192 A 16,16 0 0,0 480,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,192 A 16,16 0 0,1 512,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,192 A 16,16 0 0,0 528,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,192 A 16,16 0 0,1 560,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,192 A 16,16 0 0,0 576,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,192 A 16,16 0 0,1 608,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,208 A 16,16 0 0,0 16,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,208 A 16,16 0 0,1 16,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,208 A 16,16 0 0,0 64,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,208 A 16,16 0 0,1 64,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,208 A 16,16 0 0,0 112,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,208 A 16,16 0 0,1 112,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,208 A 16,16 0 0,0 160,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,208 A 16,16 0 0,1 160,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,208 A 16,16 0 0,0 208,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,208 A 16,16 0 0,1 208,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,208 A 16,16 0 0,0 256,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,208 A 16,16 0 0,1 256,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,208 A 16,16 0 0,0 304,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,208 A 16,16 0 0,1 304,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,208 A 16,16 0 0,0 352,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,208 A 16,16 0 0,1 352,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,208 A 16,16 0 0,0 400,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,208 A 16,16 0 0,1 400,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,208 A 16,16 0 0,0 448,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,208 A 16,16 0 0,1 448,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,208 A 16,16 0 0,0 496,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 512,208 A 16,16 0 0,1 496,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,208 A 16,16 0 0,0 544,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,208 A 16,16 0 0,1 544,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 576,208 A 16,16 0 0,0 592,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 608,208 A 16,16 0 0,1 592,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='16' y='68' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='16' y='116' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='16' y='164' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='16' y='212' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='64' y='68' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='64' y='116' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='64' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='64' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='112' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='112' y='68' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='112' y='116' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='112' y='164' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='112' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='160' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='160' y='68' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='160' y='116' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='160' y='164' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='160' y='212' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='208' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='208' y='68' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='208' y='116' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='208' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='208' y='212' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='256' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='256' y='68' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='256' y='116' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='256' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='256' y='212' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='304' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='304' y='68' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='304' y='116' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='304' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='304' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='352' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='352' y='68' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='352' y='116' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='352' y='164' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='352' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='400' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='400' y='68' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='400' y='116' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='400' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='400' y='212' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='448' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='448' y='68' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='448' y='116' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='448' y='164' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='448' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='496' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='496' y='68' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='496' y='116' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='496' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='496' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='544' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='544' y='68' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='544' y='116' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='544' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='544' y='212' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='592' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='592' y='68' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='592' y='116' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='592' y='164' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='592' y='212' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;/blockquote>
&lt;h2 id="some-ideas">Some Ideas&lt;/h2>
&lt;p>What if we could signal to our friend what the last slot is like an airport runway?&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 616 249"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 96,96 L 128,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,128 L 128,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,96 L 96,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,96 L 128,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,0 0,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,1 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,0 48,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,1 80,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,0 96,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,1 128,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,0 A 16,16 0 0,0 144,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,0 A 16,16 0 0,1 176,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 A 16,16 0 0,0 192,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 A 16,16 0 0,1 224,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 A 16,16 0 0,0 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 A 16,16 0 0,1 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,16 A 16,16 0 0,0 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,16 A 16,16 0 0,1 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,16 A 16,16 0 0,0 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,16 A 16,16 0 0,1 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,16 A 16,16 0 0,0 160,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,16 A 16,16 0 0,1 160,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,16 A 16,16 0 0,0 208,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,16 A 16,16 0 0,1 208,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 A 16,16 0 0,0 0,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 A 16,16 0 0,1 32,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,48 A 16,16 0 0,0 48,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,48 A 16,16 0 0,1 80,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,48 A 16,16 0 0,0 96,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,48 A 16,16 0 0,1 128,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,48 A 16,16 0 0,0 144,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,48 A 16,16 0 0,1 176,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,48 A 16,16 0 0,0 192,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,48 A 16,16 0 0,1 224,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,64 A 16,16 0 0,0 16,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,64 A 16,16 0 0,1 16,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,64 A 16,16 0 0,0 64,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,64 A 16,16 0 0,1 64,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,64 A 16,16 0 0,0 112,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,64 A 16,16 0 0,1 112,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,64 A 16,16 0 0,0 160,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,64 A 16,16 0 0,1 160,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,64 A 16,16 0 0,0 208,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,64 A 16,16 0 0,1 208,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,96 A 16,16 0 0,0 0,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,96 A 16,16 0 0,1 32,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,96 A 16,16 0 0,0 48,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,96 A 16,16 0 0,1 80,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,96 A 16,16 0 0,0 144,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,96 A 16,16 0 0,1 176,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,96 A 16,16 0 0,0 192,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,96 A 16,16 0 0,1 224,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,112 A 16,16 0 0,0 16,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,112 A 16,16 0 0,1 16,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,112 A 16,16 0 0,0 64,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,112 A 16,16 0 0,1 64,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,112 A 16,16 0 0,0 160,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,112 A 16,16 0 0,1 160,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,112 A 16,16 0 0,0 208,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,112 A 16,16 0 0,1 208,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,144 A 16,16 0 0,0 0,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,144 A 16,16 0 0,1 32,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,144 A 16,16 0 0,0 48,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,144 A 16,16 0 0,1 80,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,144 A 16,16 0 0,0 96,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,144 A 16,16 0 0,1 128,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,144 A 16,16 0 0,0 144,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,144 A 16,16 0 0,1 176,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,144 A 16,16 0 0,0 192,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,144 A 16,16 0 0,1 224,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,160 A 16,16 0 0,0 16,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,160 A 16,16 0 0,1 16,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,160 A 16,16 0 0,0 64,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,160 A 16,16 0 0,1 64,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,160 A 16,16 0 0,0 112,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,160 A 16,16 0 0,1 112,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,160 A 16,16 0 0,0 160,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,160 A 16,16 0 0,1 160,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,160 A 16,16 0 0,0 208,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,160 A 16,16 0 0,1 208,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,192 A 16,16 0 0,0 0,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,192 A 16,16 0 0,1 32,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,192 A 16,16 0 0,0 48,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,192 A 16,16 0 0,1 80,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,192 A 16,16 0 0,0 96,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,192 A 16,16 0 0,1 128,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,192 A 16,16 0 0,0 144,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,192 A 16,16 0 0,1 176,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,192 A 16,16 0 0,0 192,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,192 A 16,16 0 0,1 224,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,208 A 16,16 0 0,0 16,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,208 A 16,16 0 0,1 16,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,208 A 16,16 0 0,0 64,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,208 A 16,16 0 0,1 64,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,208 A 16,16 0 0,0 112,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,208 A 16,16 0 0,1 112,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,208 A 16,16 0 0,0 160,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,208 A 16,16 0 0,1 160,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,208 A 16,16 0 0,0 208,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,208 A 16,16 0 0,1 208,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='16' y='68' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='16' y='116' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='16' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='16' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='64' y='68' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='64' y='116' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='64' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='64' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='112' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='112' y='68' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='112' y='116' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='112' y='164' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='112' y='212' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='160' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='160' y='68' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='160' y='116' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='160' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='160' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='208' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='208' y='68' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='208' y='116' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='208' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='208' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>The issue is, we don&amp;rsquo;t know what $L$ is ahead of time. Specifically, the last slots chosen by $\mathcal{E}$ could all be disconnected from each other so we couldn&amp;rsquo;t coordinate the signal.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 616 249"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 48,0 L 80,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,32 L 80,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,48 L 224,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,80 L 224,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,96 L 80,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,128 L 80,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,144 L 176,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,176 L 176,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,192 L 32,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,224 L 32,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,192 L 0,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,192 L 32,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,0 L 48,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,96 L 48,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,0 L 80,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,96 L 80,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,144 L 144,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,144 L 176,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,48 L 192,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,48 L 224,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,0 0,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,1 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,0 96,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,1 128,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,0 A 16,16 0 0,0 144,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,0 A 16,16 0 0,1 176,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 A 16,16 0 0,0 192,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 A 16,16 0 0,1 224,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 A 16,16 0 0,0 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 A 16,16 0 0,1 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,16 A 16,16 0 0,0 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,16 A 16,16 0 0,1 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,16 A 16,16 0 0,0 160,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,16 A 16,16 0 0,1 160,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,16 A 16,16 0 0,0 208,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,16 A 16,16 0 0,1 208,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 A 16,16 0 0,0 0,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 A 16,16 0 0,1 32,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,48 A 16,16 0 0,0 48,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,48 A 16,16 0 0,1 80,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,48 A 16,16 0 0,0 96,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,48 A 16,16 0 0,1 128,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,48 A 16,16 0 0,0 144,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,48 A 16,16 0 0,1 176,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,64 A 16,16 0 0,0 16,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,64 A 16,16 0 0,1 16,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,64 A 16,16 0 0,0 64,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,64 A 16,16 0 0,1 64,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,64 A 16,16 0 0,0 112,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,64 A 16,16 0 0,1 112,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,64 A 16,16 0 0,0 160,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,64 A 16,16 0 0,1 160,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,96 A 16,16 0 0,0 0,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,96 A 16,16 0 0,1 32,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,96 A 16,16 0 0,0 96,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,96 A 16,16 0 0,1 128,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,96 A 16,16 0 0,0 144,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,96 A 16,16 0 0,1 176,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,96 A 16,16 0 0,0 192,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,96 A 16,16 0 0,1 224,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,112 A 16,16 0 0,0 16,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,112 A 16,16 0 0,1 16,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,112 A 16,16 0 0,0 112,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,112 A 16,16 0 0,1 112,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,112 A 16,16 0 0,0 160,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,112 A 16,16 0 0,1 160,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,112 A 16,16 0 0,0 208,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,112 A 16,16 0 0,1 208,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,144 A 16,16 0 0,0 0,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,144 A 16,16 0 0,1 32,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,144 A 16,16 0 0,0 48,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,144 A 16,16 0 0,1 80,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,144 A 16,16 0 0,0 96,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,144 A 16,16 0 0,1 128,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,144 A 16,16 0 0,0 192,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,144 A 16,16 0 0,1 224,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,160 A 16,16 0 0,0 16,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,160 A 16,16 0 0,1 16,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,160 A 16,16 0 0,0 64,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,160 A 16,16 0 0,1 64,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,160 A 16,16 0 0,0 112,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,160 A 16,16 0 0,1 112,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,160 A 16,16 0 0,0 208,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,160 A 16,16 0 0,1 208,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,192 A 16,16 0 0,0 48,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,192 A 16,16 0 0,1 80,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,192 A 16,16 0 0,0 96,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,192 A 16,16 0 0,1 128,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,192 A 16,16 0 0,0 144,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,192 A 16,16 0 0,1 176,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,192 A 16,16 0 0,0 192,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,192 A 16,16 0 0,1 224,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,208 A 16,16 0 0,0 64,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,208 A 16,16 0 0,1 64,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,208 A 16,16 0 0,0 112,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,208 A 16,16 0 0,1 112,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,208 A 16,16 0 0,0 160,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,208 A 16,16 0 0,1 160,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,208 A 16,16 0 0,0 208,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,208 A 16,16 0 0,1 208,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='16' y='68' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='16' y='116' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='16' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='64' y='68' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='64' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='64' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='112' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='112' y='68' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='112' y='116' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='112' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='112' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='160' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='160' y='68' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='160' y='116' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='160' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='208' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='208' y='116' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='208' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='208' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Spoilers ahead&lt;/p>
&lt;/div>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>The trick is to force $\mathcal{E}$ into a position where either final board state yields information.&lt;/p>
&lt;h3 id="the-right-direction">The Right Direction&lt;/h3>
&lt;p>What if we designate the first $\frac{n}{2}$ slots to be for heads, and the rest to be for tails?&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 616 249"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 96,96 L 128,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,128 L 128,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,96 L 96,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,96 L 128,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,0 0,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,1 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,0 48,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,1 80,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,0 96,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,1 128,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,0 A 16,16 0 0,0 144,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,0 A 16,16 0 0,1 176,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 A 16,16 0 0,0 192,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 A 16,16 0 0,1 224,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 A 16,16 0 0,0 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 A 16,16 0 0,1 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,16 A 16,16 0 0,0 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,16 A 16,16 0 0,1 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,16 A 16,16 0 0,0 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,16 A 16,16 0 0,1 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,16 A 16,16 0 0,0 160,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,16 A 16,16 0 0,1 160,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,16 A 16,16 0 0,0 208,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,16 A 16,16 0 0,1 208,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 A 16,16 0 0,0 0,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 A 16,16 0 0,1 32,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,48 A 16,16 0 0,0 48,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,48 A 16,16 0 0,1 80,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,48 A 16,16 0 0,0 96,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,48 A 16,16 0 0,1 128,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,48 A 16,16 0 0,0 144,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,48 A 16,16 0 0,1 176,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,48 A 16,16 0 0,0 192,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,48 A 16,16 0 0,1 224,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,64 A 16,16 0 0,0 16,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,64 A 16,16 0 0,1 16,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,64 A 16,16 0 0,0 64,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,64 A 16,16 0 0,1 64,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,64 A 16,16 0 0,0 112,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,64 A 16,16 0 0,1 112,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,64 A 16,16 0 0,0 160,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,64 A 16,16 0 0,1 160,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,64 A 16,16 0 0,0 208,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,64 A 16,16 0 0,1 208,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,96 A 16,16 0 0,0 0,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,96 A 16,16 0 0,1 32,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,96 A 16,16 0 0,0 48,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,96 A 16,16 0 0,1 80,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,96 A 16,16 0 0,0 144,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,96 A 16,16 0 0,1 176,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,96 A 16,16 0 0,0 192,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,96 A 16,16 0 0,1 224,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,112 A 16,16 0 0,0 16,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,112 A 16,16 0 0,1 16,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,112 A 16,16 0 0,0 64,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,112 A 16,16 0 0,1 64,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,112 A 16,16 0 0,0 160,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,112 A 16,16 0 0,1 160,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,112 A 16,16 0 0,0 208,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,112 A 16,16 0 0,1 208,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,144 A 16,16 0 0,0 0,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,144 A 16,16 0 0,1 32,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,144 A 16,16 0 0,0 48,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,144 A 16,16 0 0,1 80,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,144 A 16,16 0 0,0 96,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,144 A 16,16 0 0,1 128,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,144 A 16,16 0 0,0 144,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,144 A 16,16 0 0,1 176,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,144 A 16,16 0 0,0 192,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,144 A 16,16 0 0,1 224,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,160 A 16,16 0 0,0 16,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,160 A 16,16 0 0,1 16,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,160 A 16,16 0 0,0 64,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,160 A 16,16 0 0,1 64,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,160 A 16,16 0 0,0 112,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,160 A 16,16 0 0,1 112,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,160 A 16,16 0 0,0 160,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,160 A 16,16 0 0,1 160,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,160 A 16,16 0 0,0 208,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,160 A 16,16 0 0,1 208,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,192 A 16,16 0 0,0 0,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,192 A 16,16 0 0,1 32,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,192 A 16,16 0 0,0 48,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,192 A 16,16 0 0,1 80,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,192 A 16,16 0 0,0 96,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,192 A 16,16 0 0,1 128,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,192 A 16,16 0 0,0 144,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,192 A 16,16 0 0,1 176,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,192 A 16,16 0 0,0 192,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,192 A 16,16 0 0,1 224,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,208 A 16,16 0 0,0 16,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,208 A 16,16 0 0,1 16,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,208 A 16,16 0 0,0 64,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,208 A 16,16 0 0,1 64,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,208 A 16,16 0 0,0 112,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,208 A 16,16 0 0,1 112,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,208 A 16,16 0 0,0 160,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,208 A 16,16 0 0,1 160,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,208 A 16,16 0 0,0 208,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,208 A 16,16 0 0,1 208,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='16' y='68' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='16' y='116' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='16' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='16' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='64' y='68' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='64' y='116' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='64' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='64' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='112' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='112' y='68' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='112' y='116' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='112' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='112' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='160' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='160' y='68' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='160' y='116' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='160' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='160' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='208' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='208' y='68' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='208' y='116' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='208' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='208' y='212' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>Whichever is the majority, we know that $L$ must be among them (in the case where $n$ is even, if we picked more heads and the final board state was split, then we know $L$ must be tails).&lt;/p>
&lt;p>Thus, $K$ has approximately (rounded up) $\frac{n}{2}$ coins.&lt;/p>
&lt;h3 id="grouping">Grouping&lt;/h3>
&lt;h4 id="pairs">Pairs&lt;/h4>
&lt;p>Here&amp;rsquo;s an idea. Make pairs of coin slots. The first chosen slot in a pair will be heads, the second tails. When $\mathcal{E}$ picks the last orientation, one of two cases occurs.&lt;/p>
&lt;ul>
&lt;li>$\mathcal{E}$ chooses heads. Then, one pair will have two heads so we know that it was one of these two slots.&lt;/li>
&lt;/ul>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 608 57"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 256,0 L 288,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,32 L 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,0 L 104,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,0 L 232,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,0 L 256,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 L 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,0 L 360,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 488,0 L 488,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,0 0,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,1 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,0 48,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,1 80,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,0 A 16,16 0 0,0 128,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,0 A 16,16 0 0,1 160,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,0 176,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,1 208,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,0 A 16,16 0 0,0 304,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,0 A 16,16 0 0,1 336,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,0 A 16,16 0 0,0 384,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,0 A 16,16 0 0,1 416,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,0 A 16,16 0 0,0 432,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,0 A 16,16 0 0,1 464,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,0 A 16,16 0 0,0 512,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,0 A 16,16 0 0,1 544,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 576,0 A 16,16 0 0,0 560,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 576,0 A 16,16 0 0,1 592,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 A 16,16 0 0,0 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 A 16,16 0 0,1 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,16 A 16,16 0 0,0 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,16 A 16,16 0 0,1 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,16 A 16,16 0 0,0 144,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,16 A 16,16 0 0,1 144,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,16 A 16,16 0 0,0 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,16 A 16,16 0 0,1 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,16 A 16,16 0 0,0 320,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,16 A 16,16 0 0,1 320,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,16 A 16,16 0 0,0 400,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,16 A 16,16 0 0,1 400,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,16 A 16,16 0 0,0 448,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,16 A 16,16 0 0,1 448,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 512,16 A 16,16 0 0,0 528,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,16 A 16,16 0 0,1 528,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,16 A 16,16 0 0,0 576,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,16 A 16,16 0 0,1 576,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='144' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='272' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='320' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='400' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='448' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='528' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='576' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;ul>
&lt;li>$\mathcal{E}$ chooses tails. Then, all pairs will have one coin of each orientation, so we know it was one of the tails.&lt;/li>
&lt;/ul>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 608 57"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 256,0 L 288,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,32 L 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,0 L 104,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,0 L 232,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,0 L 256,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 L 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,0 L 360,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 488,0 L 488,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,0 0,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,1 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,0 48,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,1 80,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,0 A 16,16 0 0,0 128,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,0 A 16,16 0 0,1 160,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,0 176,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,1 208,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,0 A 16,16 0 0,0 304,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,0 A 16,16 0 0,1 336,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,0 A 16,16 0 0,0 384,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,0 A 16,16 0 0,1 416,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,0 A 16,16 0 0,0 432,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,0 A 16,16 0 0,1 464,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,0 A 16,16 0 0,0 512,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,0 A 16,16 0 0,1 544,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 576,0 A 16,16 0 0,0 560,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 576,0 A 16,16 0 0,1 592,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 A 16,16 0 0,0 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 A 16,16 0 0,1 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,16 A 16,16 0 0,0 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,16 A 16,16 0 0,1 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,16 A 16,16 0 0,0 144,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,16 A 16,16 0 0,1 144,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,16 A 16,16 0 0,0 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,16 A 16,16 0 0,1 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,16 A 16,16 0 0,0 320,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,16 A 16,16 0 0,1 320,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,16 A 16,16 0 0,0 400,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,16 A 16,16 0 0,1 400,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,16 A 16,16 0 0,0 448,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,16 A 16,16 0 0,1 448,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 512,16 A 16,16 0 0,0 528,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,16 A 16,16 0 0,1 528,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,16 A 16,16 0 0,0 576,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,16 A 16,16 0 0,1 576,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='144' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='272' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='320' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='400' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='448' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='528' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='576' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>In the worst case (when all groups are similar), $K$ has $\frac{n}{2}$ coins.&lt;/p>
&lt;h4 id="triples">Triples&lt;/h4>
&lt;p>Make triples of coin slots. The first two chosen slots in a triple will be heads, the last tails. When $\mathcal{E}$ picks the last orientation, one of two cases occurs.&lt;/p>
&lt;ul>
&lt;li>$\mathcal{E}$ chooses heads. Then, one triple will have all heads so we know that it was one of these slots.&lt;/li>
&lt;/ul>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 608 57"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 224,0 L 256,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,32 L 256,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,0 L 152,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,0 L 224,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,0 L 256,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,0 L 328,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,0 0,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,1 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,0 48,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,1 80,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,0 96,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,1 128,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,0 176,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,1 208,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 A 16,16 0 0,0 272,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 A 16,16 0 0,1 304,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,0 A 16,16 0 0,0 352,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,0 A 16,16 0 0,1 384,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,0 A 16,16 0 0,0 400,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,0 A 16,16 0 0,1 432,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,0 A 16,16 0 0,0 448,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,0 A 16,16 0 0,1 480,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 A 16,16 0 0,0 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 A 16,16 0 0,1 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,16 A 16,16 0 0,0 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,16 A 16,16 0 0,1 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,16 A 16,16 0 0,0 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,16 A 16,16 0 0,1 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,16 A 16,16 0 0,0 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,16 A 16,16 0 0,1 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,16 A 16,16 0 0,0 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,16 A 16,16 0 0,1 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,16 A 16,16 0 0,0 368,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,16 A 16,16 0 0,1 368,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,16 A 16,16 0 0,0 416,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,16 A 16,16 0 0,1 416,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,16 A 16,16 0 0,0 464,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,16 A 16,16 0 0,1 464,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='112' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='240' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='288' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='368' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='416' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='464' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;ul>
&lt;li>$\mathcal{E}$ chooses tails. Then, all triples will have one coin oriented at tails, so we know it was one of the tails.&lt;/li>
&lt;/ul>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 608 57"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 224,0 L 256,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,32 L 256,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,0 L 152,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,0 L 224,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,0 L 256,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,0 L 328,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,0 0,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,1 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,0 48,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,1 80,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,0 96,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,1 128,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,0 176,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,1 208,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 A 16,16 0 0,0 272,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 A 16,16 0 0,1 304,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,0 A 16,16 0 0,0 352,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,0 A 16,16 0 0,1 384,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,0 A 16,16 0 0,0 400,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,0 A 16,16 0 0,1 432,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,0 A 16,16 0 0,0 448,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,0 A 16,16 0 0,1 480,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 A 16,16 0 0,0 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 A 16,16 0 0,1 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,16 A 16,16 0 0,0 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,16 A 16,16 0 0,1 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,16 A 16,16 0 0,0 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,16 A 16,16 0 0,1 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,16 A 16,16 0 0,0 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,16 A 16,16 0 0,1 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,16 A 16,16 0 0,0 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,16 A 16,16 0 0,1 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,16 A 16,16 0 0,0 368,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,16 A 16,16 0 0,1 368,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,16 A 16,16 0 0,0 416,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,16 A 16,16 0 0,1 416,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,16 A 16,16 0 0,0 464,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,16 A 16,16 0 0,1 464,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='112' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='240' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='288' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='368' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='416' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='464' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>In the worst case (when all groups are similar), $K$ has $\frac{n}{3}$ coins.&lt;/p>
&lt;h4 id="generalizing">Generalizing&lt;/h4>
&lt;p>We can keep increasing group sizes at the cost of number of groups. At what group size/count is $K$ optimal?&lt;/p>
&lt;p>Once the group size surpasses the number of groups, the worst case scenario will be when one group differs from the rest (last coin within a group is heads).&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 608 57"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 120,0 L 152,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,32 L 152,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,0 L 0,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,0 L 120,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,0 L 152,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,0 L 560,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 40,0 A 16,16 0 0,0 24,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 40,0 A 16,16 0 0,1 56,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,0 A 16,16 0 0,0 72,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,0 A 16,16 0 0,1 104,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,0 A 16,16 0 0,0 168,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,0 A 16,16 0 0,1 200,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,0 A 16,16 0 0,0 216,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,0 A 16,16 0 0,1 248,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,0 A 16,16 0 0,0 264,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,0 A 16,16 0 0,1 296,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,0 A 16,16 0 0,0 312,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,0 A 16,16 0 0,1 344,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 376,0 A 16,16 0 0,0 360,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 376,0 A 16,16 0 0,1 392,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 424,0 A 16,16 0 0,0 408,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 424,0 A 16,16 0 0,1 440,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 472,0 A 16,16 0 0,0 456,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 472,0 A 16,16 0 0,1 488,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 520,0 A 16,16 0 0,0 504,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 520,0 A 16,16 0 0,1 536,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,16 A 16,16 0 0,0 40,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 56,16 A 16,16 0 0,1 40,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 72,16 A 16,16 0 0,0 88,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,16 A 16,16 0 0,1 88,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,16 A 16,16 0 0,0 184,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,16 A 16,16 0 0,1 184,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,16 A 16,16 0 0,0 232,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 248,16 A 16,16 0 0,1 232,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 264,16 A 16,16 0 0,0 280,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 296,16 A 16,16 0 0,1 280,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 312,16 A 16,16 0 0,0 328,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 344,16 A 16,16 0 0,1 328,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,16 A 16,16 0 0,0 376,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,16 A 16,16 0 0,1 376,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 408,16 A 16,16 0 0,0 424,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 440,16 A 16,16 0 0,1 424,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 456,16 A 16,16 0 0,0 472,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 488,16 A 16,16 0 0,1 472,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 504,16 A 16,16 0 0,0 520,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 536,16 A 16,16 0 0,1 520,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='40' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='88' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='136' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='184' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='232' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='280' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='328' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='376' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='424' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='472' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='520' y='20' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>$\min(\text{size, count})$ is maximized when $\text{size}=\text{count}$. Since $\text{size}*\text{count}=n$, our group sizes are optimally set to $\sqrt{n}$ (specifically, $\lceil\sqrt n\rceil$). Thus, $K$ is minimized to $\lceil\sqrt n\rceil$ coins.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Ceiling since if $n$ is not a perfect square, we should create groups as if it were a perfect square and blank out the nonexistent coins afterwards&lt;/p>
&lt;/div>
&lt;h2 id="extension">Extension&lt;/h2>
&lt;h3 id="problem-1">Problem&lt;/h3>
&lt;p>Suppose we play the same game, except instead of coins we play with $m$-sided dice. How does the strategy change, and how does $K$ change?&lt;/p>
&lt;p>Obviously if $m=1$, then vacuously $K$ must have all $n$ dice.&lt;/p>
&lt;p>$m=2$ is just the original problem.&lt;/p>
&lt;p>If $m&amp;gt;2$, one strategy is to use the same strategy as in $m=2$, and only utilize $2$ values of the dice. This means that optimal $K$ has at most $\lceil\sqrt{n}\rceil$ dice. With one extra value, we can do better.&lt;/p>
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Spoilers ahead&lt;/p>
&lt;/div>
&lt;h3 id="3-sided-dice">3-sided Dice&lt;/h3>
&lt;h4 id="the-right-direction-1">The Right Direction&lt;/h4>
&lt;p>We need to approach this $m$-dimensionally. Intuitively, $K$ should optimally have $\sqrt[m]{n}$, since extra orientations should correlate with axes to work with. But let&amp;rsquo;s start with a concrete example: $n=27$ and $m=3$.&lt;/p>
&lt;p>Again, we want the last dice to shrink the &amp;ldquo;last dice space&amp;rdquo;, specifically to $3$ possibilities here. As in the original problem, perhaps we want groups to mainly consist of $1$ so that if $\mathcal{E}$ sets the $L$ dice to $1$, we know it is in that group.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 608 57"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,0 A 16,16 0 0,0 0,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,1 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,0 48,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,1 80,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,0 96,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,1 128,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 A 16,16 0 0,0 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 A 16,16 0 0,1 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,16 A 16,16 0 0,0 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,16 A 16,16 0 0,1 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,16 A 16,16 0 0,0 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,16 A 16,16 0 0,1 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>Thinking $3$-dimensionally, what if we had $3$ groups of $3$ groups of $3$? Let&amp;rsquo;s start with just the first group of groups, or &lt;em>&lt;strong>&amp;ldquo;row&amp;rdquo;&lt;/strong>&lt;/em>.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 608 57"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 152,0 L 152,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,0 L 328,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,0 0,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,1 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,0 48,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,1 80,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,0 96,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,1 128,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,0 176,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,1 208,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 A 16,16 0 0,0 224,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 A 16,16 0 0,1 256,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 A 16,16 0 0,0 272,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 A 16,16 0 0,1 304,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,0 A 16,16 0 0,0 352,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,0 A 16,16 0 0,1 384,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,0 A 16,16 0 0,0 400,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,0 A 16,16 0 0,1 432,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,0 A 16,16 0 0,0 448,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,0 A 16,16 0 0,1 480,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 A 16,16 0 0,0 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 A 16,16 0 0,1 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,16 A 16,16 0 0,0 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,16 A 16,16 0 0,1 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,16 A 16,16 0 0,0 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,16 A 16,16 0 0,1 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,16 A 16,16 0 0,0 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,16 A 16,16 0 0,1 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,16 A 16,16 0 0,0 240,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,16 A 16,16 0 0,1 240,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,16 A 16,16 0 0,0 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,16 A 16,16 0 0,1 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,16 A 16,16 0 0,0 368,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,16 A 16,16 0 0,1 368,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,16 A 16,16 0 0,0 416,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,16 A 16,16 0 0,1 416,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,16 A 16,16 0 0,0 464,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,16 A 16,16 0 0,1 464,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='288' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='368' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='416' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>Suppose $L$ is part of this &amp;ldquo;row&amp;rdquo;. In other words, $L$ is one of these unfilled slots. Let&amp;rsquo;s employ the same strategy as before where the last dice of each group is oriented at $2$.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 608 57"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 96,0 L 128,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,32 L 128,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,0 L 96,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,0 L 128,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,0 L 152,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,0 L 328,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,0 0,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,1 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,0 48,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,1 80,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,0 176,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,1 208,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 A 16,16 0 0,0 224,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 A 16,16 0 0,1 256,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 A 16,16 0 0,0 272,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 A 16,16 0 0,1 304,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,0 A 16,16 0 0,0 352,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,0 A 16,16 0 0,1 384,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,0 A 16,16 0 0,0 400,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,0 A 16,16 0 0,1 432,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,0 A 16,16 0 0,0 448,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,0 A 16,16 0 0,1 480,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 A 16,16 0 0,0 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 A 16,16 0 0,1 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,16 A 16,16 0 0,0 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,16 A 16,16 0 0,1 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,16 A 16,16 0 0,0 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,16 A 16,16 0 0,1 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,16 A 16,16 0 0,0 240,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,16 A 16,16 0 0,1 240,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,16 A 16,16 0 0,0 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,16 A 16,16 0 0,1 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,16 A 16,16 0 0,0 368,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,16 A 16,16 0 0,1 368,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,16 A 16,16 0 0,0 416,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,16 A 16,16 0 0,1 416,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,16 A 16,16 0 0,0 464,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,16 A 16,16 0 0,1 464,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='240' y='20' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='288' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='368' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='416' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='464' y='20' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>If $L$ is set to $1$, we know it is in the first group. If $L$ is set to $2$, then we know that it is among the &amp;ldquo;$2$ dice&amp;rdquo; in this row.&lt;/p>
&lt;p>We still have two more rows though.&lt;/p>
&lt;h4 id="3-dice-advantage">&amp;ldquo;3 dice&amp;rdquo; Advantage&lt;/h4>
&lt;p>If we naively just use the $m=2$ strategy for all rows:&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 608 185"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 96,0 L 128,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,32 L 128,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,0 L 96,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,0 L 128,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,0 L 152,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,64 L 152,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,128 L 152,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,0 L 328,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,64 L 328,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,128 L 328,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,0 0,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,1 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,0 48,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,1 80,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,0 176,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,1 208,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 A 16,16 0 0,0 224,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 A 16,16 0 0,1 256,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 A 16,16 0 0,0 272,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 A 16,16 0 0,1 304,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,0 A 16,16 0 0,0 352,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,0 A 16,16 0 0,1 384,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,0 A 16,16 0 0,0 400,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,0 A 16,16 0 0,1 432,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,0 A 16,16 0 0,0 448,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,0 A 16,16 0 0,1 480,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 A 16,16 0 0,0 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 A 16,16 0 0,1 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,16 A 16,16 0 0,0 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,16 A 16,16 0 0,1 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,16 A 16,16 0 0,0 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,16 A 16,16 0 0,1 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,16 A 16,16 0 0,0 240,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,16 A 16,16 0 0,1 240,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,16 A 16,16 0 0,0 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,16 A 16,16 0 0,1 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,16 A 16,16 0 0,0 368,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,16 A 16,16 0 0,1 368,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,16 A 16,16 0 0,0 416,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,16 A 16,16 0 0,1 416,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,16 A 16,16 0 0,0 464,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,16 A 16,16 0 0,1 464,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,64 A 16,16 0 0,0 0,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,64 A 16,16 0 0,1 32,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,64 A 16,16 0 0,0 48,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,64 A 16,16 0 0,1 80,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,64 A 16,16 0 0,0 96,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,64 A 16,16 0 0,1 128,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,64 A 16,16 0 0,0 176,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,64 A 16,16 0 0,1 208,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,64 A 16,16 0 0,0 224,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,64 A 16,16 0 0,1 256,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,64 A 16,16 0 0,0 272,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,64 A 16,16 0 0,1 304,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,64 A 16,16 0 0,0 352,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,64 A 16,16 0 0,1 384,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,64 A 16,16 0 0,0 400,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,64 A 16,16 0 0,1 432,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,64 A 16,16 0 0,0 448,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,64 A 16,16 0 0,1 480,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,80 A 16,16 0 0,0 16,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,80 A 16,16 0 0,1 16,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,80 A 16,16 0 0,0 64,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,80 A 16,16 0 0,1 64,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,80 A 16,16 0 0,0 112,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,80 A 16,16 0 0,1 112,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,80 A 16,16 0 0,0 192,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,80 A 16,16 0 0,1 192,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,80 A 16,16 0 0,0 240,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,80 A 16,16 0 0,1 240,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,80 A 16,16 0 0,0 288,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,80 A 16,16 0 0,1 288,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,80 A 16,16 0 0,0 368,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,80 A 16,16 0 0,1 368,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,80 A 16,16 0 0,0 416,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,80 A 16,16 0 0,1 416,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,80 A 16,16 0 0,0 464,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,80 A 16,16 0 0,1 464,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,128 A 16,16 0 0,0 0,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,128 A 16,16 0 0,1 32,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,128 A 16,16 0 0,0 48,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,128 A 16,16 0 0,1 80,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,128 A 16,16 0 0,0 96,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,128 A 16,16 0 0,1 128,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,128 A 16,16 0 0,0 176,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,128 A 16,16 0 0,1 208,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,128 A 16,16 0 0,0 224,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,128 A 16,16 0 0,1 256,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,128 A 16,16 0 0,0 272,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,128 A 16,16 0 0,1 304,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,128 A 16,16 0 0,0 352,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,128 A 16,16 0 0,1 384,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,128 A 16,16 0 0,0 400,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,128 A 16,16 0 0,1 432,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,128 A 16,16 0 0,0 448,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,128 A 16,16 0 0,1 480,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,144 A 16,16 0 0,0 16,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,144 A 16,16 0 0,1 16,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,144 A 16,16 0 0,0 64,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,144 A 16,16 0 0,1 64,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,144 A 16,16 0 0,0 112,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,144 A 16,16 0 0,1 112,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,144 A 16,16 0 0,0 192,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,144 A 16,16 0 0,1 192,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,144 A 16,16 0 0,0 240,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,144 A 16,16 0 0,1 240,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,144 A 16,16 0 0,0 288,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,144 A 16,16 0 0,1 288,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,144 A 16,16 0 0,0 368,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,144 A 16,16 0 0,1 368,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,144 A 16,16 0 0,0 416,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,144 A 16,16 0 0,1 416,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,144 A 16,16 0 0,0 464,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,144 A 16,16 0 0,1 464,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='16' y='84' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='16' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='112' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='112' y='148' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='192' y='84' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='192' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='240' y='20' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='240' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='240' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='288' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='288' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='288' y='148' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='368' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='368' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='368' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='416' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='416' y='84' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='416' y='148' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='464' y='20' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='464' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='464' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>$\mathcal{E}$ orienting the $L$ dice to $2$ only tells us it&amp;rsquo;s one of all of the &amp;ldquo;$2$ dice&amp;rdquo; among all of the rows. It&amp;rsquo;s time to use the &amp;ldquo;3 dice&amp;rdquo;.&lt;/p>
&lt;p>Following the pattern, if we assign the last of every group to be $2$, what if we assign the last of every row to be $3$?&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 608 185"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 96,0 L 128,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,32 L 128,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,0 L 96,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,0 L 128,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,0 L 152,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,64 L 152,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,128 L 152,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,0 L 328,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,64 L 328,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,128 L 328,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,0 0,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,1 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,0 48,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,1 80,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,0 176,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,1 208,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 A 16,16 0 0,0 224,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,0 A 16,16 0 0,1 256,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 A 16,16 0 0,0 272,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 A 16,16 0 0,1 304,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,0 A 16,16 0 0,0 352,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,0 A 16,16 0 0,1 384,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,0 A 16,16 0 0,0 400,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,0 A 16,16 0 0,1 432,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,0 A 16,16 0 0,0 448,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,0 A 16,16 0 0,1 480,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 A 16,16 0 0,0 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 A 16,16 0 0,1 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,16 A 16,16 0 0,0 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,16 A 16,16 0 0,1 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,16 A 16,16 0 0,0 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,16 A 16,16 0 0,1 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,16 A 16,16 0 0,0 240,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,16 A 16,16 0 0,1 240,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,16 A 16,16 0 0,0 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,16 A 16,16 0 0,1 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,16 A 16,16 0 0,0 368,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,16 A 16,16 0 0,1 368,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,16 A 16,16 0 0,0 416,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,16 A 16,16 0 0,1 416,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,16 A 16,16 0 0,0 464,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,16 A 16,16 0 0,1 464,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,64 A 16,16 0 0,0 0,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,64 A 16,16 0 0,1 32,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,64 A 16,16 0 0,0 48,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,64 A 16,16 0 0,1 80,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,64 A 16,16 0 0,0 96,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,64 A 16,16 0 0,1 128,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,64 A 16,16 0 0,0 176,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,64 A 16,16 0 0,1 208,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,64 A 16,16 0 0,0 224,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,64 A 16,16 0 0,1 256,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,64 A 16,16 0 0,0 272,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,64 A 16,16 0 0,1 304,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,64 A 16,16 0 0,0 352,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,64 A 16,16 0 0,1 384,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,64 A 16,16 0 0,0 400,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,64 A 16,16 0 0,1 432,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,64 A 16,16 0 0,0 448,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,64 A 16,16 0 0,1 480,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,80 A 16,16 0 0,0 16,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,80 A 16,16 0 0,1 16,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,80 A 16,16 0 0,0 64,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,80 A 16,16 0 0,1 64,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,80 A 16,16 0 0,0 112,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,80 A 16,16 0 0,1 112,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,80 A 16,16 0 0,0 192,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,80 A 16,16 0 0,1 192,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,80 A 16,16 0 0,0 240,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,80 A 16,16 0 0,1 240,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,80 A 16,16 0 0,0 288,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,80 A 16,16 0 0,1 288,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,80 A 16,16 0 0,0 368,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,80 A 16,16 0 0,1 368,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,80 A 16,16 0 0,0 416,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,80 A 16,16 0 0,1 416,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,80 A 16,16 0 0,0 464,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,80 A 16,16 0 0,1 464,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,128 A 16,16 0 0,0 0,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,128 A 16,16 0 0,1 32,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,128 A 16,16 0 0,0 48,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,128 A 16,16 0 0,1 80,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,128 A 16,16 0 0,0 96,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,128 A 16,16 0 0,1 128,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,128 A 16,16 0 0,0 176,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,128 A 16,16 0 0,1 208,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,128 A 16,16 0 0,0 224,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,128 A 16,16 0 0,1 256,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,128 A 16,16 0 0,0 272,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,128 A 16,16 0 0,1 304,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,128 A 16,16 0 0,0 352,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,128 A 16,16 0 0,1 384,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,128 A 16,16 0 0,0 400,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,128 A 16,16 0 0,1 432,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,128 A 16,16 0 0,0 448,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,128 A 16,16 0 0,1 480,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,144 A 16,16 0 0,0 16,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,144 A 16,16 0 0,1 16,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,144 A 16,16 0 0,0 64,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,144 A 16,16 0 0,1 64,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,144 A 16,16 0 0,0 112,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,144 A 16,16 0 0,1 112,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,144 A 16,16 0 0,0 192,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,144 A 16,16 0 0,1 192,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,144 A 16,16 0 0,0 240,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,144 A 16,16 0 0,1 240,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,144 A 16,16 0 0,0 288,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,144 A 16,16 0 0,1 288,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,144 A 16,16 0 0,0 368,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,144 A 16,16 0 0,1 368,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,144 A 16,16 0 0,0 416,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,144 A 16,16 0 0,1 416,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,144 A 16,16 0 0,0 464,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,144 A 16,16 0 0,1 464,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='16' y='84' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='16' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='112' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='112' y='148' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='192' y='84' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='192' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='240' y='20' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='240' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='240' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='288' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='288' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='288' y='148' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='368' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='368' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='368' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='416' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='416' y='84' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='416' y='148' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='464' y='20' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='464' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='464' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;ul>
&lt;li>If $L$ is assigned $1$, we know it is in the group with all $1$s&lt;/li>
&lt;li>If $L$ is assigned $2$, then we know it is among the $2$s in the row that doesn&amp;rsquo;t have a single $3$&lt;/li>
&lt;li>If $L$ is assigned $3$, we know that it is among the $3$s across rows&lt;/li>
&lt;/ul>
&lt;p>Thus, $K$ is minimized to $\lceil\sqrt[3] n\rceil$ dice.&lt;/p>
&lt;h3 id="4-sided-dice">4-sided Dice&lt;/h3>
&lt;h4 id="extending-4-sided-dice">Extending 4-sided Dice&lt;/h4>
&lt;p>It is difficult to imagine things with dimensionality greater than $3$. Instead, we can think about it as just extending the idea in $m=3$ with more groups of groups.&lt;/p>
&lt;p>Let $g=\sqrt[4]{n}$ be the group size. Each row has $g^3$ dice, and there are $g$ rows. Partitioned further, each row has $g$ groups of groups, or &lt;em>&lt;strong>&amp;ldquo;inner rows&amp;rdquo;&lt;/strong>&lt;/em> each with $g$ groups of $g$ dice each. Groups are assigned $1$ until the last which is assigned $2$. Except in inner rows, where it is assigned $3$. Except in rows where it is assigned $4$.&lt;/p>
&lt;h4 id="concrete-example">Concrete Example&lt;/h4>
&lt;p>Suppose $n=16$.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 608 121"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 272,64 L 304,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,96 L 304,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,0 L 104,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,64 L 104,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,64 L 272,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,64 L 304,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 376,0 L 376,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 376,64 L 376,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,0 0,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,1 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,0 48,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,1 80,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,0 A 16,16 0 0,0 128,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,0 A 16,16 0 0,1 160,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,0 176,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 A 16,16 0 0,1 208,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 A 16,16 0 0,0 272,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 A 16,16 0 0,1 304,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,0 A 16,16 0 0,0 320,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,0 A 16,16 0 0,1 352,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,0 A 16,16 0 0,0 400,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,0 A 16,16 0 0,1 432,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,0 A 16,16 0 0,0 448,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,0 A 16,16 0 0,1 480,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 A 16,16 0 0,0 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 A 16,16 0 0,1 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,16 A 16,16 0 0,0 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,16 A 16,16 0 0,1 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,16 A 16,16 0 0,0 144,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,16 A 16,16 0 0,1 144,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,16 A 16,16 0 0,0 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,16 A 16,16 0 0,1 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,16 A 16,16 0 0,0 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,16 A 16,16 0 0,1 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,16 A 16,16 0 0,0 336,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,16 A 16,16 0 0,1 336,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,16 A 16,16 0 0,0 416,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,16 A 16,16 0 0,1 416,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,16 A 16,16 0 0,0 464,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,16 A 16,16 0 0,1 464,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,64 A 16,16 0 0,0 0,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,64 A 16,16 0 0,1 32,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,64 A 16,16 0 0,0 48,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,64 A 16,16 0 0,1 80,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,64 A 16,16 0 0,0 128,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,64 A 16,16 0 0,1 160,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,64 A 16,16 0 0,0 176,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,64 A 16,16 0 0,1 208,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,64 A 16,16 0 0,0 320,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,64 A 16,16 0 0,1 352,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,64 A 16,16 0 0,0 400,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,64 A 16,16 0 0,1 432,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,64 A 16,16 0 0,0 448,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,64 A 16,16 0 0,1 480,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,80 A 16,16 0 0,0 16,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,80 A 16,16 0 0,1 16,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,80 A 16,16 0 0,0 64,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,80 A 16,16 0 0,1 64,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,80 A 16,16 0 0,0 144,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,80 A 16,16 0 0,1 144,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,80 A 16,16 0 0,0 192,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,80 A 16,16 0 0,1 192,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,80 A 16,16 0 0,0 336,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,80 A 16,16 0 0,1 336,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,80 A 16,16 0 0,0 416,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,80 A 16,16 0 0,1 416,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,80 A 16,16 0 0,0 464,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,80 A 16,16 0 0,1 464,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='16' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='64' y='84' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='144' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='144' y='84' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='192' y='20' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='192' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='288' y='20' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='336' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='336' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='416' y='20' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='416' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='464' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='464' y='84' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>As before, the last of each group is assigned $2$ until it is the last of its parent group. Each of the four quadrants represents an inner row, and its last die is assigned $3$ (top right and bottom left). The rows are just rows and have its last die assigned $4$.&lt;/p>
&lt;ul>
&lt;li>If $L$ is assigned $1$, we know it is in the group with all $1$s&lt;/li>
&lt;li>If $L$ is assigned $2$, we know that it is among the $2$s in the inner row with all $2$s&lt;/li>
&lt;li>If $L$ is assigned $3$, then we know it is among the $3$s in the row that doesn&amp;rsquo;t have a single $4$&lt;/li>
&lt;li>If $L$ is assigned $4$, then we know it is among the $4$s across rows&lt;/li>
&lt;/ul>
&lt;p>Thus, $K$ is minimized to $\lceil\sqrt[4] n\rceil$ dice.&lt;/p>
&lt;h3 id="generalizing-1">Generalizing&lt;/h3>
&lt;p>We can continue to recursively create more parent groups as $m$ increases as shown above. Doing so allows us to optimize $K$ to have $\lceil\sqrt[m]n\rceil$ dice.&lt;/p></description></item><item><title>III. Amortized Analysis</title><link>https://kiblitz.github.io/p/451-amortized-analysis/</link><pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/451-amortized-analysis/</guid><description>&lt;img src="https://kiblitz.github.io/p/451-amortized-analysis/waterfall_forest_pool.jpg" alt="Featured image of post III. Amortized Analysis" />&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;h3 id="motivation">Motivation&lt;/h3>
&lt;p>Analyzing an algorithm&amp;rsquo;s worst-case time complexity can be too pessimistic. Perhaps an algorithm $\mathcal{A}$ is usually cheap, but every $n$ executions, it is expensive. Should $\mathcal{A}$ be categorized as an expensive algorithm?&lt;/p>
&lt;h3 id="definition">Definition&lt;/h3>
&lt;p>The amortized time cost for $\mathcal{A}$ is the average time cost per execution across &lt;strong>any&lt;/strong> sequence of executions of length $n$ for some determined $n$.&lt;/p>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$n=1$ is worst-case analysis, but larger $n$ can offer more optimistic analysis&lt;/p>
&lt;/div>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;h3 id="binary-counter">Binary Counter&lt;/h3>
&lt;h4 id="problem">Problem&lt;/h4>
&lt;blockquote>
&lt;p>We want to store a big binary counter in an array $A$ initialized to $0$.
The cost model is every bit flip.&lt;/p>
&lt;/blockquote>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$$
\begin {array}{ccccc|c}
\underline{A_4}\quad &amp;amp; \underline{A_3}\quad &amp;amp; \underline{A_2}\quad &amp;amp; \underline{A_1}\quad &amp;amp; \underline{A_0}\quad &amp;amp; \quad\underline{\textbf{cost}} \newline
0\quad &amp;amp; 0\quad &amp;amp; 0\quad &amp;amp; 0\quad &amp;amp; 0\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad1\newline
0\quad &amp;amp; 0\quad &amp;amp; 0\quad &amp;amp; 0\quad &amp;amp; \boxed{1}\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad2\newline
0\quad &amp;amp; 0\quad &amp;amp; 0\quad &amp;amp; \boxed{1}\quad &amp;amp; \boxed{0}\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad1\newline
0\quad &amp;amp; 0\quad &amp;amp; 0\quad &amp;amp; 1\quad &amp;amp; \boxed{1}\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad3\newline
0\quad &amp;amp; 0\quad &amp;amp; \boxed{1}\quad &amp;amp; \boxed{0}\quad &amp;amp; \boxed{0}\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad1\newline
0\quad &amp;amp; 0\quad &amp;amp; 1\quad &amp;amp; 0\quad &amp;amp; \boxed{1}\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad2\newline
0\quad &amp;amp; 0\quad &amp;amp; 1\quad &amp;amp; \boxed{1}\quad &amp;amp; \boxed{0}\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad1\newline
0\quad &amp;amp; 0\quad &amp;amp; 1\quad &amp;amp; 1\quad &amp;amp; \boxed{1}\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad4\newline
0\quad &amp;amp; \boxed{1}\quad &amp;amp; \boxed{0}\quad &amp;amp; \boxed{0}\quad &amp;amp; \boxed{0}\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad1\newline
0\quad &amp;amp; 1\quad &amp;amp; 0\quad &amp;amp; 0\quad &amp;amp; \boxed{1}\quad &amp;amp;
\end {array}$$&lt;/p>
&lt;/div>
&lt;p>The worst-case time complexity is $\mathcal{O}(\log n)$ since at worst $n$ becomes a power of $2$, and we have to flip all of its significant bits.&lt;/p>
&lt;h4 id="amortized-analysis">Amortized Analysis&lt;/h4>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Theorem&lt;/strong>&lt;/dt>
&lt;dd>The amortized time cost is at most $2$.&lt;/dd>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>Consider $n$ (for large $n$) executions beginning at any state. $A_0$ flips every execution. $A_1$ flips every other execution. $A_2$ flips every 4 executions. $A_k$ flips every $2^k$ executions.&lt;/dd>
&lt;dd>
&lt;p>The total cost is the sum of these flips.&lt;/p>
&lt;/dd>
&lt;dd>$$n + \frac{n}{2} + \frac{n}{4} + &amp;hellip; \leq 2n$$&lt;/dd>
&lt;dd>Thus, the average per execution is at most $2\in\mathcal{O}(1)$.
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The &amp;ldquo;beginning at any state&amp;rdquo; is important. Otherwise, our analysis is not generalizable.&lt;/p>
&lt;/div>
&lt;/dd>
&lt;/dl>
&lt;/blockquote>
&lt;h3 id="expensive-binary-counter">Expensive Binary Counter&lt;/h3>
&lt;h4 id="problem-1">Problem&lt;/h4>
&lt;blockquote>
&lt;p>We want to store a big binary counter in an array $A$ initialized to $0$.
It costs $2^k$ to flip bit $A_k$.&lt;/p>
&lt;/blockquote>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Same problem but with exponential costs&lt;/p>
&lt;/div>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$$
\begin {array}{ccccc|c}
\underline{A_4}\quad &amp;amp; \underline{A_3}\quad &amp;amp; \underline{A_2}\quad &amp;amp; \underline{A_1}\quad &amp;amp; \underline{A_0}\quad &amp;amp; \quad\underline{\textbf{cost}} \newline
0\quad &amp;amp; 0\quad &amp;amp; 0\quad &amp;amp; 0\quad &amp;amp; 0\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad1\newline
0\quad &amp;amp; 0\quad &amp;amp; 0\quad &amp;amp; 0\quad &amp;amp; \boxed{1}\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad3\newline
0\quad &amp;amp; 0\quad &amp;amp; 0\quad &amp;amp; \boxed{1}\quad &amp;amp; \boxed{0}\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad1\newline
0\quad &amp;amp; 0\quad &amp;amp; 0\quad &amp;amp; 1\quad &amp;amp; \boxed{1}\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad7\newline
0\quad &amp;amp; 0\quad &amp;amp; \boxed{1}\quad &amp;amp; \boxed{0}\quad &amp;amp; \boxed{0}\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad1\newline
0\quad &amp;amp; 0\quad &amp;amp; 1\quad &amp;amp; 0\quad &amp;amp; \boxed{1}\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad3\newline
0\quad &amp;amp; 0\quad &amp;amp; 1\quad &amp;amp; \boxed{1}\quad &amp;amp; \boxed{0}\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad1\newline
0\quad &amp;amp; 0\quad &amp;amp; 1\quad &amp;amp; 1\quad &amp;amp; \boxed{1}\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad15\newline
0\quad &amp;amp; \boxed{1}\quad &amp;amp; \boxed{0}\quad &amp;amp; \boxed{0}\quad &amp;amp; \boxed{0}\quad &amp;amp; \newline
&amp;amp; &amp;amp; &amp;amp; &amp;amp; &amp;amp; \quad1\newline
0\quad &amp;amp; 1\quad &amp;amp; 0\quad &amp;amp; 0\quad &amp;amp; \boxed{1}\quad &amp;amp;
\end {array}$$&lt;/p>
&lt;/div>
&lt;p>The worst-case time complexity is $\mathcal{O}(n)$ since at worst $n$ becomes a power of $2$, and we have to flip all of its significant bits ($1+2+4+&amp;hellip;+\frac{n}{2}+n\leq2n$).&lt;/p>
&lt;h4 id="amortized-analysis-1">Amortized Analysis&lt;/h4>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Theorem&lt;/strong>&lt;/dt>
&lt;dd>The amortized time cost is at most $\log_2 (n) + 1$.&lt;/dd>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>Consider $n$ (for large $n$) executions beginning at any state. $A_0$ flips every execution for a cost of $1$. $A_1$ flips every other execution for a cost of $2$. $A_2$ flips every 4 executions for a cost of $4$. $A_k$ flips every $2^k$ executions for a cost of $2^k$.&lt;/dd>
&lt;dd>
&lt;p>$n$ has $\lfloor\log_2 n + 1\rfloor$ significant bits.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>The total cost is the sum of these flips.&lt;/p>
&lt;/dd>
&lt;dd>$$\underbrace{n + 2\cdot\frac{n}{2} + 4\cdot\frac{n}{4} + &amp;hellip;}_{\lfloor\log_2 n + 1\rfloor} = n\lfloor\log_2 n + 1\rfloor$$&lt;/dd>
&lt;dd>Thus, the average per execution is $\lfloor\log_2 n + 1\rfloor\in\mathcal{O}(\log n)$.&lt;/dd>
&lt;/dl>
&lt;/blockquote>
&lt;h3 id="unbounded-array">Unbounded Array&lt;/h3>
&lt;h4 id="problem-2">Problem&lt;/h4>
&lt;blockquote>
&lt;p>We want to store a linear stream of data. We start with an Array $\mathcal{A}$ of memory space of size $1$. Every new append inserts into $\mathcal{A}$. If an append is attempted when $\mathcal{A}$ is completely filled, we must reallocate memory at double the size and re-insert previous data before inserting the new data.&lt;/p>
&lt;p>It costs $1$ to insert one slot of data.&lt;/p>
&lt;/blockquote>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$$
\begin {array}{c|c}
\underline{A} &amp;amp; \underline{\textbf{cost}} \newline
\Box&amp;amp;\newline
&amp;amp;1\newline
\blacksquare&amp;amp;\newline
&amp;amp;2\newline
\blacksquare\blacksquare&amp;amp;\newline
&amp;amp;3\newline
\Box\blacksquare\blacksquare\blacksquare&amp;amp;\newline
&amp;amp;1\newline
\blacksquare\blacksquare\blacksquare\blacksquare&amp;amp;\newline
&amp;amp;5\newline
\Box\Box\Box\blacksquare\blacksquare\blacksquare\blacksquare\blacksquare&amp;amp;\newline
&amp;amp;1\newline
\Box\Box\blacksquare\blacksquare\blacksquare\blacksquare\blacksquare\blacksquare&amp;amp;\newline
&amp;amp;1\newline
\Box\blacksquare\blacksquare\blacksquare\blacksquare\blacksquare\blacksquare\blacksquare&amp;amp;\newline
&amp;amp;1\newline
\blacksquare\blacksquare\blacksquare\blacksquare\blacksquare\blacksquare\blacksquare\blacksquare&amp;amp;\newline
&amp;amp;9\newline
\Box\Box\Box\Box\Box\Box\Box\blacksquare\blacksquare\blacksquare\blacksquare\blacksquare\blacksquare\blacksquare\blacksquare\blacksquare&amp;amp;\newline
\end {array}$$&lt;/p>
&lt;/div>
&lt;p>The worst-case time complexity is $\mathcal{O}(n)$ with respect to the data size since at worst, we are in a reallocation step where we must re-insert all old data.&lt;/p>
&lt;h4 id="amortized-analysis-2">Amortized Analysis&lt;/h4>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Theorem&lt;/strong>&lt;/dt>
&lt;dd>The amortized time cost is at most $3$.&lt;/dd>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>Consider $n$ (for large $n$) executions beginning at any state. Without including the cost of inserting old data, every append costs exactly $1$. In total, this has cost $n$.&lt;/dd>
&lt;dd>
&lt;p>Inserting old data costs the size of the old array. In total, this costs at most $n + \frac{n}{2} + &amp;hellip; \leq 2n$.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>Thus, the total cost is at most $n+2n=3n$ and the average cost per execution is $3$.&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/blockquote>
&lt;h2 id="potentials">Potentials&lt;/h2>
&lt;p>Potentials offer a more rigorous approach to amortized analysis. What we&amp;rsquo;ve been doing is still entirely correct, but might be problematically difficult with more complex algorithms.&lt;/p>
&lt;h3 id="intuition-bankers-method">Intuition: Banker&amp;rsquo;s Method&lt;/h3>
&lt;p>The intuitive way to think about potentials is with a bank. Every time $\mathcal{A}$ is executed, we earn some amount of coins $k(S)$ (function on data-structure state). If the current $\mathcal{A}$ operation is cheap, we can split our earnings between this operation and saving it in the bank. If the current $\mathcal{A}$ operation is expensive, we can use our funds from the bank to support it.&lt;/p>
&lt;p>$k(S)$ is an amoritized time bound on $\mathcal{A}$ if we will always have enough coins to pay for an operation at any given time.&lt;/p>
&lt;h3 id="definition-1">Definition&lt;/h3>
&lt;p>The potential function $\Phi$ is a function mapping data-structure states to $\reals$. It represents the &amp;ldquo;potential&amp;rdquo; of that state (the coin cost).&lt;/p>
&lt;p>Let $ac_i$ represent the amortized cost over $i$ algorithm executions. Let $c_i$ be the cost of the $i$th execution, and let $S_i$ being the resulting state.&lt;/p>
&lt;p>$$ac_i = c_i + \Phi(S_i)-\Phi(S_{i-1})$$
Analogically, $\text{amortized cost}=\text{actual cost}+\text{change in potential}$.&lt;/p>
&lt;p>$$\begin{align*}\sum_iac_i&amp;amp;=\sum_i(c_i+\Phi(S_i)-\Phi(S_{i-1}))\newline&amp;amp;=\sum_ic_i+\Phi(S_n)-\Phi(S_0)\end{align*}$$&lt;/p>
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Observe that if $\Phi(S_n)\geq\Phi(S_0)$ (which is frequently the case): $$\sum_ic_i\leq\sum_iac_i$$&lt;/p>
&lt;p>Note that $\Phi(S)$ can be defined in any way, but unless $\Phi(S_0)-\Phi(S_n)$ is appropriately bounded (as in above), our determined $ac$ has no meaning.&lt;/p>
&lt;/div>
&lt;h2 id="revisiting-binary-counter">Revisiting Binary Counter&lt;/h2>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Theorem&lt;/strong>&lt;/dt>
&lt;dd>The amortized time cost is at most $2$.&lt;/dd>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>Let $\Phi(S)=1\text{s in }S$.&lt;/dd>
&lt;dd>
&lt;p>Consider the $i$th execution $i-1\rightarrow i$. Let $k$ be the number of carries that occur.
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>In $10100\rightarrow 10101$, $\thickspace k=0$&lt;/p>
&lt;p>In $10111\rightarrow 11000$, $\thickspace k=3$&lt;/p>
&lt;/div>
&lt;/p>
&lt;/dd>
&lt;dd>$\Phi(S_i)-\Phi(S_{i-1})=-k+1$ since $k$ $1$s become $0$ and one $0$ becomes a $1$.&lt;/dd>
&lt;dd>
&lt;p>For the same reason, $c_i=k+1$.
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>In $10100\rightarrow 10101$&lt;/p>
&lt;ul>
&lt;li>costs $1$&lt;/li>
&lt;li>changes potential from $2\rightarrow 3$&lt;/li>
&lt;/ul>
&lt;p>In $10111\rightarrow 11000$, $\thickspace k=3$&lt;/p>
&lt;ul>
&lt;li>costs $4$&lt;/li>
&lt;li>changes potential from $4\rightarrow 2$&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/p>
&lt;/dd>
&lt;dd>Thus, $ac_i=(k+1)+(-k+1)=2$.&lt;/dd>
&lt;dd>
&lt;p>Since $\Phi(S_n)\geq\Phi(S_0)\thickspace\forall n$,&lt;/p>
&lt;/dd>
&lt;dd>$$\sum_ic_i\leq\sum_iac_i$$&lt;/dd>
&lt;/dl>
&lt;/blockquote></description></item><item><title>IV. Minus World</title><link>https://kiblitz.github.io/p/minus-world/</link><pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/minus-world/</guid><description>&lt;img src="https://kiblitz.github.io/p/minus-world/mountain_colorful_horizon.jpg" alt="Featured image of post IV. Minus World" />&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>We know that the unique edge in quantum computing is derived from negative amplitudes. How can we cause a qubit value to have negative amplitude?&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;h3 id="working-with-the-hadamard-gate">Working with the Hadamard Gate&lt;/h3>
&lt;p>The only instruction that we&amp;rsquo;ve seen that introduces negative amplitude is the hadamard gate. Specifically, $1\xmapsto{-1} 1$.&lt;/p>
&lt;p>$$H=\frac{\sqrt{2}}{2}\begin{bmatrix}1 &amp;amp; 1 \newline 1 &amp;amp; -1\end{bmatrix}$$&lt;/p>
&lt;p>So if we want to enter minus world, we probably want to perform $\texttt{HAD}$ on a qubit with value $1$.&lt;/p>
&lt;p>$$\frac{\sqrt{2}}{2}\begin{bmatrix}1 &amp;amp; 1 \newline 1 &amp;amp; -1\end{bmatrix}\cdot\begin{bmatrix}0 \newline 1\end{bmatrix} = \frac{\sqrt{2}}{2}\begin{bmatrix}1 \newline -1\end{bmatrix}$$&lt;/p>
&lt;p>Recall that $\texttt{HAD}$ is its own reverse ($\texttt{HAD}^\dagger=\texttt{HAD}\implies H^2=I$).
$$\begin{align*}(\frac{\sqrt{2}}{2}\begin{bmatrix}1 &amp;amp; 1 \newline 1 &amp;amp; -1\end{bmatrix})^\dagger\cdot \frac{\sqrt{2}}{2}\begin{bmatrix}1 &amp;amp; 1 \newline 1 &amp;amp; -1\end{bmatrix}\cdot\begin{bmatrix}0 \newline 1\end{bmatrix} &amp;amp;= (\frac{\sqrt{2}}{2}\begin{bmatrix}1 &amp;amp; 1 \newline 1 &amp;amp; -1\end{bmatrix})^\dagger\cdot\frac{\sqrt{2}}{2}\begin{bmatrix}1 \newline -1\end{bmatrix}\newline \begin{bmatrix}0 \newline 1\end{bmatrix} &amp;amp;= \frac{\sqrt{2}}{2}\begin{bmatrix}1 &amp;amp; 1 \newline 1 &amp;amp; -1\end{bmatrix}\frac{\sqrt{2}}{2}\begin{bmatrix}1 \newline -1\end{bmatrix}\end{align*}$$&lt;/p>
&lt;h3 id="the-magic">The Magic&lt;/h3>
&lt;p>The left side of the above equation shows a qubit with amplitude $1$ on value $1$. Looking at the computations in matrix form, it is clear that what we want is to somehow negate both sides of the equation.&lt;/p>
&lt;p>Here is a simple equality.&lt;/p>
&lt;p>$$-\frac{\sqrt{2}}{2}\begin{bmatrix}1 \newline -1\end{bmatrix}=\frac{\sqrt{2}}{2}\begin{bmatrix}-1 \newline 1\end{bmatrix}$$&lt;/p>
&lt;p>Now the solution is clear.
$$\texttt{NOT}(\frac{\sqrt{2}}{2}\begin{bmatrix}1 \newline -1\end{bmatrix})=\frac{\sqrt{2}}{2}\begin{bmatrix}-1 \newline 1\end{bmatrix}=-\frac{\sqrt{2}}{2}\begin{bmatrix}1 \newline -1\end{bmatrix}$$&lt;/p>
&lt;h3 id="putting-it-all-together">Putting it All Together&lt;/h3>
&lt;p>The first step, we applied $\texttt{HAD}$ on a qubit with amplitude $1$ on value $1$ to get the following state.
$$\frac{\sqrt{2}}{2}\begin{bmatrix}1 \newline -1\end{bmatrix}$$
In the next step, we negated this expression with a $\texttt{NOT}$ operation.
$$\frac{\sqrt{2}}{2}\begin{bmatrix}-1 \newline 1\end{bmatrix}$$
Finally, we applied $\texttt{HAD}$ on this updated qubit.
$$\begin{bmatrix}0 \newline -1\end{bmatrix}$$&lt;/p>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Notice that we require in the first step for the qubit to have value $1$. If it had value $0$, the steps would be the same but without the minus sign. In other words, no effect would take place.&lt;/p>
&lt;p>This is powerful, because now we have a $\texttt{If }A\texttt{=1 THEN MINUS}(A)$ subroutine.&lt;/p>
&lt;/div>
&lt;h2 id="quantum-code">Quantum Code&lt;/h2>
&lt;p>$
\texttt{INIT}(A)
\newline\texttt{NOT}(A)
\newline\quad\newline
\newline\texttt{HAD}(A)
\newline\texttt{NOT}(A)
\newline\texttt{HAD}(A)
$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 488 249"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 256,0 L 304,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,48 L 160,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,48 L 232,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,96 L 304,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,112 L 96,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,128 L 304,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,176 L 160,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,176 L 232,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,224 L 304,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,112 L 128,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,48 L 256,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,176 L 256,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,112 L 128,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,176 L 256,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,48 L 256,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='32' cy='112' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='96' cy='112' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='160' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='160' cy='176' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='232' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='232' cy='176' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='304' cy='0' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='304' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='304' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='304' cy='224' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='0' y='116' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='16' y='116' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='48' y='164' fill='currentColor' style='font-size:1em'>N&lt;/text>
&lt;text text-anchor='middle' x='56' y='164' fill='currentColor' style='font-size:1em'>O&lt;/text>
&lt;text text-anchor='middle' x='64' y='132' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='164' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='72' y='164' fill='currentColor' style='font-size:1em'>(&lt;/text>
&lt;text text-anchor='middle' x='80' y='164' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='88' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='88' y='164' fill='currentColor' style='font-size:1em'>)&lt;/text>
&lt;text text-anchor='middle' x='104' y='180' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='112' y='52' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='112' y='116' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='112' y='180' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='120' y='116' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='128' y='116' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='136' y='116' fill='currentColor' style='font-size:1em'>(&lt;/text>
&lt;text text-anchor='middle' x='144' y='116' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='152' y='116' fill='currentColor' style='font-size:1em'>)&lt;/text>
&lt;text text-anchor='middle' x='160' y='36' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='160' y='196' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='176' y='116' fill='currentColor' style='font-size:1em'>N&lt;/text>
&lt;text text-anchor='middle' x='184' y='116' fill='currentColor' style='font-size:1em'>O&lt;/text>
&lt;text text-anchor='middle' x='192' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='192' y='116' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='192' y='196' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='200' y='116' fill='currentColor' style='font-size:1em'>(&lt;/text>
&lt;text text-anchor='middle' x='208' y='116' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='216' y='116' fill='currentColor' style='font-size:1em'>)&lt;/text>
&lt;text text-anchor='middle' x='224' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='224' y='196' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='240' y='116' fill='currentColor' style='font-size:1em'>H&lt;/text>
&lt;text text-anchor='middle' x='248' y='116' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='256' y='84' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='256' y='116' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='264' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='264' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='264' y='116' fill='currentColor' style='font-size:1em'>(&lt;/text>
&lt;text text-anchor='middle' x='264' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='264' y='212' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='272' y='116' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='280' y='116' fill='currentColor' style='font-size:1em'>)&lt;/text>
&lt;text text-anchor='middle' x='320' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='320' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='320' y='132' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='320' y='228' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>$
\mathbb{A}[0] = (1\times 1\times 1\times 1) + (1\times -1\times 1\times 1) = 0\newline
\mathbb{A}[1] = (1\times 1\times 1\times -1) + (1\times -1\times 1\times 1) = -2
$
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Unnormalized. Clearly when normalized, $\mathbb{A}[1]=-1$.&lt;/p>
&lt;/div>
&lt;/p>
&lt;h2 id="new-power">New Power&lt;/h2>
&lt;p>Suppose we created some subroutine $\texttt{MAJ}(ABCM)$ which negates $M$ if the majority value in $ABC$ is $1$ (we will use it with $M=0$, so essentially this function just sets $M$ to the majority value).&lt;/p>
&lt;p>Now, with our new code, the following subroutine is possible.&lt;/p>
&lt;p>$
\texttt{INIT}(ABCM)
\newline\texttt{// assign }ABC
\newline\texttt{MAJ}(ABCM)
\newline\texttt{HAD}(M)
\newline\texttt{NOT}(M)
\newline\texttt{HAD}(M)
$&lt;/p>
&lt;p>Going forward, we can just execute subroutines like this with $\texttt{IF MAJ}(ABCM)\texttt{ THEN MINUS}(M)$.&lt;/p></description></item><item><title>III. Garbage Qubit Disposal</title><link>https://kiblitz.github.io/p/garbage-qubit-disposal/</link><pubDate>Mon, 12 Jun 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/garbage-qubit-disposal/</guid><description>&lt;img src="https://kiblitz.github.io/p/garbage-qubit-disposal/mountain_contrast.jpg" alt="Featured image of post III. Garbage Qubit Disposal" />&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;h3 id="example">Example&lt;/h3>
&lt;p>Suppose we had the following quantum code.&lt;/p>
&lt;p>$\texttt{INIT}(A)\newline\texttt{HAD}(A)\newline\texttt{HAD}(A)$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 448 185"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 64,48 L 80,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,48 L 128,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,64 L 48,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,16 L 96,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,64 L 144,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,144 L 48,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,144 L 144,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,80 L 80,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,80 L 176,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,48 A 16,16 0 0,0 48,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,32 A 16,16 0 0,1 80,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,32 A 16,16 0 0,0 112,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,48 A 16,16 0 0,1 144,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='80' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='96' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='112' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='144' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='176' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='16' y='164' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='24' y='116' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='32' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='72' y='116' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='80' y='164' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='96' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='112' y='164' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='120' y='116' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='136' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='160' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='168' y='116' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='176' y='116' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='176' y='164' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>We can see that the amplitudes on the paths to value $1$ cancel out, leaving $A=0$ with probability $1$.&lt;/p>
&lt;p>What happens when we throw a random qubit into the program?&lt;/p>
&lt;h3 id="correctness-bug">Correctness Bug&lt;/h3>
&lt;p>$\texttt{INIT}(A,B)\newline\texttt{HAD}(A)\newline\texttt{CNOT}(AB)\newline\texttt{HAD}(A)$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 448 249"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 64,48 L 80,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,48 L 128,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,64 L 48,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,80 L 48,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,16 L 96,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,64 L 144,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,80 L 144,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,208 L 48,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,208 L 144,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,144 L 80,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,144 L 176,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,48 A 16,16 0 0,0 48,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,32 A 16,16 0 0,1 80,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,32 A 16,16 0 0,0 112,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,48 A 16,16 0 0,1 144,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='208' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='80' cy='208' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='96' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='112' cy='208' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='144' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='144' cy='144' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='176' cy='208' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='8' y='228' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='16' y='228' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='24' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='24' y='148' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='24' y='180' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='32' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='32' y='148' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='40' y='116' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='72' y='180' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='72' y='228' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='80' y='228' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='96' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='104' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='112' y='228' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='120' y='180' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='120' y='228' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='136' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='152' y='116' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='160' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='160' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='168' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='168' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='168' y='180' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='176' y='180' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='176' y='228' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='184' y='228' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>Now that $B$ has a value, amplitude cancellations don&amp;rsquo;t work anymore. We don&amp;rsquo;t modify $A$ at all with this change. Yet, $A=0$ and $A=1$ each have probability $0.5$.&lt;/p>
&lt;p>This example is a bit contrived, but you can imagine that you might need to introduce extra temporary qubits and perform computations on them like you would temporary variables in classical computing. These types of qubits are called &lt;strong>garbage qubits&lt;/strong>.&lt;/p>
&lt;h2 id="taking-out-the-trash">Taking Out the Trash&lt;/h2>
&lt;p>So here&amp;rsquo;s the fix. Just set all the garbage qubits to $0$. That way all leaves have the same garbage qubit values and interference works as if they didn&amp;rsquo;t exist.&lt;/p>
&lt;p>The catch? Remember that all quantum computation must be reversible. Assignment isn&amp;rsquo;t reversible. We can&amp;rsquo;t actually just set qubits to $0$.&lt;/p>
&lt;h3 id="reversible-computation">Reversible Computation&lt;/h3>
&lt;p>Instead, we can perform computations with our garbage qubits, use their outcomes, and then perform &lt;em>&lt;strong>reversed computations&lt;/strong>&lt;/em> on the garbage qubits.&lt;/p>
&lt;h4 id="example-1">Example&lt;/h4>
&lt;p>$\texttt{INIT}(A,B)\newline\texttt{HAD}(A)\newline\texttt{CNOT}(AB)\newline\boxed{\texttt{CNOT}(AB)}\newline\texttt{HAD}(A)$&lt;/p>
&lt;p>Again, this example is a bit contrived. But the idea is still applicable. Once you are finished working with garbage qubits, you need to apply the inverse of the computations on those qubits so they can be reversed to $0$.&lt;/p>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Reversal example&lt;/p>
&lt;p>$
\texttt{CCNOT}(ABC)
\newline\texttt{NOT}(A)
\newline\texttt{CNOT}(AB)
\newline\quad\newline
\newline\texttt{CNOT}(AB)
\newline\texttt{NOT}(A)
\newline\texttt{CCNOT}(ABC)
$&lt;/p>
&lt;/div>
&lt;h4 id="hadamard">Hadamard&lt;/h4>
&lt;p>Recall that Hadamard performs the following mapping on qubit values.
$$\begin{align*}0&amp;amp;\xmapsto{1}1\newline0&amp;amp;\xmapsto{1}0\end{align*}$$$$\begin{align*}1&amp;amp;\xmapsto{1}0\newline1&amp;amp;\xmapsto{-1}1\newline\end{align*}$$
Notice that if we flip the arrows, the operation is the same. Thus, $\texttt{HAD}$ is its own reverse.
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>This explains why executing $\texttt{HAD}$ twice has no effect&lt;/p>
&lt;/div>
&lt;/p>
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Technically this reverse operation is called &lt;a class="link" href="https://en.wikipedia.org/wiki/Conjugate_transpose" target="_blank" rel="noopener"
>dagger&lt;/a> (will be covered in a later post).&lt;/p>
&lt;/div></description></item><item><title>Pirates!</title><link>https://kiblitz.github.io/p/pirates/</link><pubDate>Sun, 11 Jun 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/pirates/</guid><description>&lt;img src="https://kiblitz.github.io/p/pirates/storm_seas_ship.jpg" alt="Featured image of post Pirates!" />&lt;p>This post has been heavily modularized so you can follow step-by-step to try to solve the puzzle.&lt;/p>
&lt;h2 id="problem">Problem&lt;/h2>
&lt;blockquote>
&lt;p>A crew of $100$ pirates have found treasure: $100$ gold doubloons. They need to figure out a way to distribute the treasure amongst themselves.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 960 249"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,0 A 16,16 0 0,0 0,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,0 A 16,16 0 0,1 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,0 48,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 A 16,16 0 0,1 80,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,0 96,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,0 A 16,16 0 0,1 128,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,0 A 16,16 0 0,0 144,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,0 A 16,16 0 0,1 176,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 A 16,16 0 0,0 192,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,0 A 16,16 0 0,1 224,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,0 A 16,16 0 0,0 240,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,0 A 16,16 0 0,1 272,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,0 A 16,16 0 0,0 288,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,0 A 16,16 0 0,1 320,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,0 A 16,16 0 0,0 336,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,0 A 16,16 0 0,1 368,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,0 A 16,16 0 0,0 384,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,0 A 16,16 0 0,1 416,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,0 A 16,16 0 0,0 432,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,0 A 16,16 0 0,1 464,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,0 A 16,16 0 0,0 480,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,0 A 16,16 0 0,1 512,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,0 A 16,16 0 0,0 528,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,0 A 16,16 0 0,1 560,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,0 A 16,16 0 0,0 576,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,0 A 16,16 0 0,1 608,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 640,0 A 16,16 0 0,0 624,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 640,0 A 16,16 0 0,1 656,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 688,0 A 16,16 0 0,0 672,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 688,0 A 16,16 0 0,1 704,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 736,0 A 16,16 0 0,0 720,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 736,0 A 16,16 0 0,1 752,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 784,0 A 16,16 0 0,0 768,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 784,0 A 16,16 0 0,1 800,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 832,0 A 16,16 0 0,0 816,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 832,0 A 16,16 0 0,1 848,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 880,0 A 16,16 0 0,0 864,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 880,0 A 16,16 0 0,1 896,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 928,0 A 16,16 0 0,0 912,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 928,0 A 16,16 0 0,1 944,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 A 16,16 0 0,0 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 A 16,16 0 0,1 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,16 A 16,16 0 0,0 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,16 A 16,16 0 0,1 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,16 A 16,16 0 0,0 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,16 A 16,16 0 0,1 112,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,16 A 16,16 0 0,0 160,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,16 A 16,16 0 0,1 160,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,16 A 16,16 0 0,0 208,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,16 A 16,16 0 0,1 208,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,16 A 16,16 0 0,0 256,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,16 A 16,16 0 0,1 256,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,16 A 16,16 0 0,0 304,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,16 A 16,16 0 0,1 304,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,16 A 16,16 0 0,0 352,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,16 A 16,16 0 0,1 352,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,16 A 16,16 0 0,0 400,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,16 A 16,16 0 0,1 400,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,16 A 16,16 0 0,0 448,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,16 A 16,16 0 0,1 448,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,16 A 16,16 0 0,0 496,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 512,16 A 16,16 0 0,1 496,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,16 A 16,16 0 0,0 544,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,16 A 16,16 0 0,1 544,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 576,16 A 16,16 0 0,0 592,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 608,16 A 16,16 0 0,1 592,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 624,16 A 16,16 0 0,0 640,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 656,16 A 16,16 0 0,1 640,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 672,16 A 16,16 0 0,0 688,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 704,16 A 16,16 0 0,1 688,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 720,16 A 16,16 0 0,0 736,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 752,16 A 16,16 0 0,1 736,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 768,16 A 16,16 0 0,0 784,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 800,16 A 16,16 0 0,1 784,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 816,16 A 16,16 0 0,0 832,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 848,16 A 16,16 0 0,1 832,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 864,16 A 16,16 0 0,0 880,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 896,16 A 16,16 0 0,1 880,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 912,16 A 16,16 0 0,0 928,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 944,16 A 16,16 0 0,1 928,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 A 16,16 0 0,0 0,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 A 16,16 0 0,1 32,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,48 A 16,16 0 0,0 48,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,48 A 16,16 0 0,1 80,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,48 A 16,16 0 0,0 96,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,48 A 16,16 0 0,1 128,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,48 A 16,16 0 0,0 144,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,48 A 16,16 0 0,1 176,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,48 A 16,16 0 0,0 192,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,48 A 16,16 0 0,1 224,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,48 A 16,16 0 0,0 240,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,48 A 16,16 0 0,1 272,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,48 A 16,16 0 0,0 288,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,48 A 16,16 0 0,1 320,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,48 A 16,16 0 0,0 336,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,48 A 16,16 0 0,1 368,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,48 A 16,16 0 0,0 384,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,48 A 16,16 0 0,1 416,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,48 A 16,16 0 0,0 432,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,48 A 16,16 0 0,1 464,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,48 A 16,16 0 0,0 480,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,48 A 16,16 0 0,1 512,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,48 A 16,16 0 0,0 528,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,48 A 16,16 0 0,1 560,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,48 A 16,16 0 0,0 576,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,48 A 16,16 0 0,1 608,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 640,48 A 16,16 0 0,0 624,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 640,48 A 16,16 0 0,1 656,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 688,48 A 16,16 0 0,0 672,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 688,48 A 16,16 0 0,1 704,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 736,48 A 16,16 0 0,0 720,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 736,48 A 16,16 0 0,1 752,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 784,48 A 16,16 0 0,0 768,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 784,48 A 16,16 0 0,1 800,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 832,48 A 16,16 0 0,0 816,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 832,48 A 16,16 0 0,1 848,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 880,48 A 16,16 0 0,0 864,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 880,48 A 16,16 0 0,1 896,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 928,48 A 16,16 0 0,0 912,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 928,48 A 16,16 0 0,1 944,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,64 A 16,16 0 0,0 16,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,64 A 16,16 0 0,1 16,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,64 A 16,16 0 0,0 64,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,64 A 16,16 0 0,1 64,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,64 A 16,16 0 0,0 112,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,64 A 16,16 0 0,1 112,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,64 A 16,16 0 0,0 160,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,64 A 16,16 0 0,1 160,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,64 A 16,16 0 0,0 208,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,64 A 16,16 0 0,1 208,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,64 A 16,16 0 0,0 256,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,64 A 16,16 0 0,1 256,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,64 A 16,16 0 0,0 304,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,64 A 16,16 0 0,1 304,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,64 A 16,16 0 0,0 352,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,64 A 16,16 0 0,1 352,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,64 A 16,16 0 0,0 400,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,64 A 16,16 0 0,1 400,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,64 A 16,16 0 0,0 448,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,64 A 16,16 0 0,1 448,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,64 A 16,16 0 0,0 496,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 512,64 A 16,16 0 0,1 496,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,64 A 16,16 0 0,0 544,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,64 A 16,16 0 0,1 544,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 576,64 A 16,16 0 0,0 592,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 608,64 A 16,16 0 0,1 592,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 624,64 A 16,16 0 0,0 640,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 656,64 A 16,16 0 0,1 640,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 672,64 A 16,16 0 0,0 688,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 704,64 A 16,16 0 0,1 688,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 720,64 A 16,16 0 0,0 736,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 752,64 A 16,16 0 0,1 736,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 768,64 A 16,16 0 0,0 784,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 800,64 A 16,16 0 0,1 784,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 816,64 A 16,16 0 0,0 832,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 848,64 A 16,16 0 0,1 832,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 864,64 A 16,16 0 0,0 880,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 896,64 A 16,16 0 0,1 880,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 912,64 A 16,16 0 0,0 928,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 944,64 A 16,16 0 0,1 928,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,96 A 16,16 0 0,0 0,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,96 A 16,16 0 0,1 32,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,96 A 16,16 0 0,0 48,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,96 A 16,16 0 0,1 80,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,96 A 16,16 0 0,0 96,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,96 A 16,16 0 0,1 128,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,96 A 16,16 0 0,0 144,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,96 A 16,16 0 0,1 176,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,96 A 16,16 0 0,0 192,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,96 A 16,16 0 0,1 224,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,96 A 16,16 0 0,0 240,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,96 A 16,16 0 0,1 272,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,96 A 16,16 0 0,0 288,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,96 A 16,16 0 0,1 320,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,96 A 16,16 0 0,0 336,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,96 A 16,16 0 0,1 368,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,96 A 16,16 0 0,0 384,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,96 A 16,16 0 0,1 416,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,96 A 16,16 0 0,0 432,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,96 A 16,16 0 0,1 464,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,96 A 16,16 0 0,0 480,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,96 A 16,16 0 0,1 512,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,96 A 16,16 0 0,0 528,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,96 A 16,16 0 0,1 560,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,96 A 16,16 0 0,0 576,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,96 A 16,16 0 0,1 608,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 640,96 A 16,16 0 0,0 624,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 640,96 A 16,16 0 0,1 656,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 688,96 A 16,16 0 0,0 672,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 688,96 A 16,16 0 0,1 704,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 736,96 A 16,16 0 0,0 720,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 736,96 A 16,16 0 0,1 752,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 784,96 A 16,16 0 0,0 768,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 784,96 A 16,16 0 0,1 800,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 832,96 A 16,16 0 0,0 816,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 832,96 A 16,16 0 0,1 848,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 880,96 A 16,16 0 0,0 864,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 880,96 A 16,16 0 0,1 896,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 928,96 A 16,16 0 0,0 912,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 928,96 A 16,16 0 0,1 944,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,112 A 16,16 0 0,0 16,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,112 A 16,16 0 0,1 16,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,112 A 16,16 0 0,0 64,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,112 A 16,16 0 0,1 64,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,112 A 16,16 0 0,0 112,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,112 A 16,16 0 0,1 112,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,112 A 16,16 0 0,0 160,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,112 A 16,16 0 0,1 160,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,112 A 16,16 0 0,0 208,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,112 A 16,16 0 0,1 208,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,112 A 16,16 0 0,0 256,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,112 A 16,16 0 0,1 256,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,112 A 16,16 0 0,0 304,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,112 A 16,16 0 0,1 304,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,112 A 16,16 0 0,0 352,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,112 A 16,16 0 0,1 352,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,112 A 16,16 0 0,0 400,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,112 A 16,16 0 0,1 400,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,112 A 16,16 0 0,0 448,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,112 A 16,16 0 0,1 448,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,112 A 16,16 0 0,0 496,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 512,112 A 16,16 0 0,1 496,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,112 A 16,16 0 0,0 544,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,112 A 16,16 0 0,1 544,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 576,112 A 16,16 0 0,0 592,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 608,112 A 16,16 0 0,1 592,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 624,112 A 16,16 0 0,0 640,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 656,112 A 16,16 0 0,1 640,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 672,112 A 16,16 0 0,0 688,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 704,112 A 16,16 0 0,1 688,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 720,112 A 16,16 0 0,0 736,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 752,112 A 16,16 0 0,1 736,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 768,112 A 16,16 0 0,0 784,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 800,112 A 16,16 0 0,1 784,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 816,112 A 16,16 0 0,0 832,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 848,112 A 16,16 0 0,1 832,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 864,112 A 16,16 0 0,0 880,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 896,112 A 16,16 0 0,1 880,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 912,112 A 16,16 0 0,0 928,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 944,112 A 16,16 0 0,1 928,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,144 A 16,16 0 0,0 0,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,144 A 16,16 0 0,1 32,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,144 A 16,16 0 0,0 48,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,144 A 16,16 0 0,1 80,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,144 A 16,16 0 0,0 96,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,144 A 16,16 0 0,1 128,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,144 A 16,16 0 0,0 144,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,144 A 16,16 0 0,1 176,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,144 A 16,16 0 0,0 192,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,144 A 16,16 0 0,1 224,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,144 A 16,16 0 0,0 240,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,144 A 16,16 0 0,1 272,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,144 A 16,16 0 0,0 288,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,144 A 16,16 0 0,1 320,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,144 A 16,16 0 0,0 336,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,144 A 16,16 0 0,1 368,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,144 A 16,16 0 0,0 384,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,144 A 16,16 0 0,1 416,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,144 A 16,16 0 0,0 432,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,144 A 16,16 0 0,1 464,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,144 A 16,16 0 0,0 480,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,144 A 16,16 0 0,1 512,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,144 A 16,16 0 0,0 528,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,144 A 16,16 0 0,1 560,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,144 A 16,16 0 0,0 576,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,144 A 16,16 0 0,1 608,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 640,144 A 16,16 0 0,0 624,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 640,144 A 16,16 0 0,1 656,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 688,144 A 16,16 0 0,0 672,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 688,144 A 16,16 0 0,1 704,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 736,144 A 16,16 0 0,0 720,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 736,144 A 16,16 0 0,1 752,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 784,144 A 16,16 0 0,0 768,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 784,144 A 16,16 0 0,1 800,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 832,144 A 16,16 0 0,0 816,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 832,144 A 16,16 0 0,1 848,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 880,144 A 16,16 0 0,0 864,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 880,144 A 16,16 0 0,1 896,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 928,144 A 16,16 0 0,0 912,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 928,144 A 16,16 0 0,1 944,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,160 A 16,16 0 0,0 16,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,160 A 16,16 0 0,1 16,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,160 A 16,16 0 0,0 64,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,160 A 16,16 0 0,1 64,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,160 A 16,16 0 0,0 112,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,160 A 16,16 0 0,1 112,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,160 A 16,16 0 0,0 160,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,160 A 16,16 0 0,1 160,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,160 A 16,16 0 0,0 208,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,160 A 16,16 0 0,1 208,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,160 A 16,16 0 0,0 256,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,160 A 16,16 0 0,1 256,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,160 A 16,16 0 0,0 304,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,160 A 16,16 0 0,1 304,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,160 A 16,16 0 0,0 352,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,160 A 16,16 0 0,1 352,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,160 A 16,16 0 0,0 400,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,160 A 16,16 0 0,1 400,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,160 A 16,16 0 0,0 448,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,160 A 16,16 0 0,1 448,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,160 A 16,16 0 0,0 496,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 512,160 A 16,16 0 0,1 496,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,160 A 16,16 0 0,0 544,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,160 A 16,16 0 0,1 544,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 576,160 A 16,16 0 0,0 592,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 608,160 A 16,16 0 0,1 592,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 624,160 A 16,16 0 0,0 640,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 656,160 A 16,16 0 0,1 640,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 672,160 A 16,16 0 0,0 688,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 704,160 A 16,16 0 0,1 688,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 720,160 A 16,16 0 0,0 736,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 752,160 A 16,16 0 0,1 736,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 768,160 A 16,16 0 0,0 784,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 800,160 A 16,16 0 0,1 784,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 816,160 A 16,16 0 0,0 832,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 848,160 A 16,16 0 0,1 832,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 864,160 A 16,16 0 0,0 880,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 896,160 A 16,16 0 0,1 880,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 912,160 A 16,16 0 0,0 928,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 944,160 A 16,16 0 0,1 928,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,192 A 16,16 0 0,0 0,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,192 A 16,16 0 0,1 32,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,192 A 16,16 0 0,0 48,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,192 A 16,16 0 0,1 80,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,192 A 16,16 0 0,0 96,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,192 A 16,16 0 0,1 128,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,192 A 16,16 0 0,0 144,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,192 A 16,16 0 0,1 176,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,192 A 16,16 0 0,0 192,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,192 A 16,16 0 0,1 224,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,192 A 16,16 0 0,0 240,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,192 A 16,16 0 0,1 272,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,192 A 16,16 0 0,0 288,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,192 A 16,16 0 0,1 320,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,192 A 16,16 0 0,0 336,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,192 A 16,16 0 0,1 368,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,192 A 16,16 0 0,0 384,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,192 A 16,16 0 0,1 416,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,192 A 16,16 0 0,0 432,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,192 A 16,16 0 0,1 464,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,192 A 16,16 0 0,0 480,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,192 A 16,16 0 0,1 512,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,192 A 16,16 0 0,0 528,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,192 A 16,16 0 0,1 560,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,192 A 16,16 0 0,0 576,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 592,192 A 16,16 0 0,1 608,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 640,192 A 16,16 0 0,0 624,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 640,192 A 16,16 0 0,1 656,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 688,192 A 16,16 0 0,0 672,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 688,192 A 16,16 0 0,1 704,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 736,192 A 16,16 0 0,0 720,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 736,192 A 16,16 0 0,1 752,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 784,192 A 16,16 0 0,0 768,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 784,192 A 16,16 0 0,1 800,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 832,192 A 16,16 0 0,0 816,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 832,192 A 16,16 0 0,1 848,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 880,192 A 16,16 0 0,0 864,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 880,192 A 16,16 0 0,1 896,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 928,192 A 16,16 0 0,0 912,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 928,192 A 16,16 0 0,1 944,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,208 A 16,16 0 0,0 16,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,208 A 16,16 0 0,1 16,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,208 A 16,16 0 0,0 64,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,208 A 16,16 0 0,1 64,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,208 A 16,16 0 0,0 112,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,208 A 16,16 0 0,1 112,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,208 A 16,16 0 0,0 160,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,208 A 16,16 0 0,1 160,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,208 A 16,16 0 0,0 208,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,208 A 16,16 0 0,1 208,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,208 A 16,16 0 0,0 256,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,208 A 16,16 0 0,1 256,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,208 A 16,16 0 0,0 304,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,208 A 16,16 0 0,1 304,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,208 A 16,16 0 0,0 352,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,208 A 16,16 0 0,1 352,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,208 A 16,16 0 0,0 400,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,208 A 16,16 0 0,1 400,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,208 A 16,16 0 0,0 448,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,208 A 16,16 0 0,1 448,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,208 A 16,16 0 0,0 496,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 512,208 A 16,16 0 0,1 496,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,208 A 16,16 0 0,0 544,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,208 A 16,16 0 0,1 544,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 576,208 A 16,16 0 0,0 592,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 608,208 A 16,16 0 0,1 592,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 624,208 A 16,16 0 0,0 640,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 656,208 A 16,16 0 0,1 640,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 672,208 A 16,16 0 0,0 688,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 704,208 A 16,16 0 0,1 688,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 720,208 A 16,16 0 0,0 736,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 752,208 A 16,16 0 0,1 736,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 768,208 A 16,16 0 0,0 784,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 800,208 A 16,16 0 0,1 784,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 816,208 A 16,16 0 0,0 832,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 848,208 A 16,16 0 0,1 832,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 864,208 A 16,16 0 0,0 880,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 896,208 A 16,16 0 0,1 880,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 912,208 A 16,16 0 0,0 928,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 944,208 A 16,16 0 0,1 928,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='16' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='16' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='16' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='16' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='64' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='64' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='64' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='64' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='64' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='112' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='112' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='112' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='112' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='112' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='160' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='160' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='160' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='160' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='160' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='208' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='208' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='208' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='208' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='208' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='256' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='256' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='256' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='256' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='256' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='304' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='304' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='304' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='304' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='304' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='352' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='352' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='352' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='352' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='352' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='400' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='400' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='400' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='400' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='400' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='448' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='448' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='448' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='448' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='448' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='496' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='496' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='496' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='496' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='496' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='544' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='544' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='544' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='544' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='544' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='592' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='592' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='592' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='592' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='592' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='640' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='640' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='640' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='640' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='640' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='688' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='688' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='688' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='688' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='688' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='736' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='736' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='736' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='736' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='736' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='784' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='784' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='784' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='784' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='784' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='832' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='832' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='832' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='832' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='832' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='880' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='880' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='880' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='880' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='880' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='928' y='20' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='928' y='68' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='928' y='116' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='928' y='164' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='928' y='212' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>Specifically, there is a linear chain of command that is publically known, and at the top of the chain is the pirate captain. The captain is the one who proposes the treasure distribution. Let&amp;rsquo;s say we label every pirate with a number corresponding to chain power.
$$ c\rightarrow 99 \rightarrow 98 \rightarrow 97 \rightarrow &amp;hellip; \rightarrow 4 \rightarrow 3 \rightarrow 2 \rightarrow 1$$
The pirates then simultaneously say &amp;ldquo;aye!&amp;rdquo; (including the captain) if they agree with the proposal. If at least half of the pirates say &amp;ldquo;aye!&amp;rdquo;, then it is realized. Otherwise, the captain walks the plank, and the next in command becomes captain!
$$ c\rightarrow 98 \rightarrow 97 \rightarrow &amp;hellip; \rightarrow 4 \rightarrow 3 \rightarrow 2 \rightarrow 1$$
What influences a pirate&amp;rsquo;s vote?&lt;/p>
&lt;ul>
&lt;li>Pirates are trying to maximize their own loot&lt;/li>
&lt;li>In the case where a vote does not affect their rewards, pirates are ruthless and won&amp;rsquo;t say &amp;ldquo;aye!&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>So, how should the captain distribute the doubloons?&lt;/p>
&lt;/blockquote>
&lt;h2 id="some-ideas">Some Ideas&lt;/h2>
&lt;p>Well, there are $100$ pirates splitting $100$ gold doubloons. Maybe the captain should $1$ to each pirate?&lt;/p>
&lt;p>But the captain really only needs half of the votes. How about $2$ to $50$ of them?&lt;/p>
&lt;p>There&amp;rsquo;s also a chain of command&amp;hellip; the pirates way down the hierarchy have no power right? Can the captain afford to give less doubloons to those pirates while still keeping their vote?&lt;/p>
&lt;p>Clearly, there&amp;rsquo;s a optimal strategy for the captain to maximize their own loot, otherwise it wouldn&amp;rsquo;t make for a interesting puzzle.&lt;/p>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Spoilers ahead&lt;/p>
&lt;/div>
&lt;h2 id="thinking-with-small-numbers">Thinking with Small Numbers&lt;/h2>
&lt;p>$100$ is a bit big to think about all of the possibilities. What if we were dealing with less pirates?&lt;/p>
&lt;h3 id="baby-steps">Baby Steps&lt;/h3>
&lt;p>Let&amp;rsquo;s start at the top and put ourselves in the captain&amp;rsquo;s shoes. $1$ pirate. Clearly with no one to make us walk the plank, we should give ourselves all $100$ doubloons!&lt;/p>
&lt;p>How about $2$ pirates? As long as we say &amp;ldquo;aye!&amp;rdquo;, the second-in-command will never get enough votes. Again, we get all $100$ doubloons.&lt;/p>
&lt;p>Ok, what about $3$ pirates? Now we are in danger, since there are enough pirates for a mutiny. We should entice one of them with some of the loot. But which one? And with how much?
$$c\rightarrow 2 \rightarrow 1$$&lt;/p>
&lt;h4 id="buying-votes">Buying Votes&lt;/h4>
&lt;p>Let&amp;rsquo;s remember the pirate code.&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>Pirates are trying to maximize their own loot&lt;/li>
&lt;li>In the case where a vote does not affect their rewards, pirates are ruthless and won&amp;rsquo;t say &amp;ldquo;aye!&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Here&amp;rsquo;s an observation. If we walk the plank, pirate $2$ becomes the new captain. How much would they get if this scenario happens?&lt;/p>
&lt;p>$$2 \rightarrow 1$$
Doesn&amp;rsquo;t this look familiar? It&amp;rsquo;s the same case that we looked at before! Pirate $2$ will get all the doubloons here!
$$2[100] \rightarrow 1[0]$$&lt;/p>
&lt;p>So, pirate $2$ will always vote to kill and try to be captain no matter what! Even if we as captain gave all the doubloons to pirate $2$, the pirate code states that pirates are ruthless!
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>It follows that no matter the number of alive pirates in the crew, the relative second-in-command will always vote to kill if they want to be captain.&lt;/p>
&lt;/div>
Clearly pirate $1$ is who we should be paying. How much should we spend?&lt;/p>
&lt;p>Let&amp;rsquo;s think back to the scenario where pirate $2$ becomes captain.
$$2[100] \rightarrow 1[0]$$
Pirate $1$ isn&amp;rsquo;t getting anything here! So, pirate $1$ really doesn&amp;rsquo;t want pirate $2$ to be captain!&lt;/p>
&lt;p>Can we be greedy and not give anything to pirate $1$? Well, remember the pirate code. $0=0$, so we&amp;rsquo;re walking the plank. But $1&amp;gt;0$!
$$c[99] \rightarrow 2[0] \rightarrow 1[1]$$&lt;/p>
&lt;h3 id="less-baby-steps">Less Baby Steps&lt;/h3>
&lt;p>What about with $4$ pirates?
$$c\rightarrow 3 \rightarrow 2 \rightarrow 1$$
Applying our logic from before, pirate $3$ is getting $99$ doubloons if they get to be captain. If we want to buy their vote, we need to give them $100$ doubloons.
$$c[0]\rightarrow 3[100] \rightarrow 2[0] \rightarrow 1[0]$$
And we have $2$ votes: ourselves and pirate $3$. But this is kind of silly.&lt;/p>
&lt;p>Ok, again using our logic from before, pirate $2$ will be sad and poor if pirate $3$ becomes captain. The solution follows naturally.
$$c[99]\rightarrow 3[0] \rightarrow 2[1] \rightarrow 1[0]$$&lt;/p>
&lt;h2 id="generalizing-the-approach">Generalizing the Approach&lt;/h2>
&lt;h3 id="solving-the-problem">Solving the Problem&lt;/h3>
&lt;p>Looks like an alternating pattern. This happens because all the pirates who will get $0$ if the captain gets thrown overboard can be incentivized with $1$ doubloon. And since that makes up half of the crew, the captain can just give everyone else nothing!
$$ c[51]\rightarrow 99[0] \rightarrow 98[1] \rightarrow 97[0] \rightarrow &amp;hellip; \rightarrow 4[1] \rightarrow 3[0] \rightarrow 2[1] \rightarrow 1[0]$$
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>This is a tight upper bound on the captain&amp;rsquo;s rewards. The crew is distributed $49$ doubloons. This is exactly the number of &amp;ldquo;ayes!&amp;rdquo; the captain needs (not including themselves) to not walk the plank.&lt;/p>
&lt;/div>
&lt;/p>
&lt;h3 id="more-generalization">More Generalization&lt;/h3>
&lt;p>The captain has earned a hefty sum. That means there&amp;rsquo;s still space for more pirates!&lt;/p>
&lt;p>It&amp;rsquo;s clear that we can keep this alternating pattern all the up to $200$ pirates.
$$ c[1]\rightarrow 199[0] \rightarrow 198[1] \rightarrow 197[0] \rightarrow &amp;hellip; \rightarrow 4[1] \rightarrow 3[0] \rightarrow 2[1] \rightarrow 1[0]$$
The natural follow up is: what happens after $200$ pirates?
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Spoilers ahead&lt;/p>
&lt;/div>
&lt;/p>
&lt;h2 id="too-many-pirates">Too Many Pirates&lt;/h2>
&lt;h3 id="one-step-at-a-time">One Step at a Time&lt;/h3>
&lt;p>What happens when there are $201$ pirates? We are $1$ doubloon short if we try to use our normal strategy.&lt;/p>
&lt;p>Notice that, not including ourselves, we need $100$ votes. If we can&amp;rsquo;t incentivize $100$ other pirates, then it&amp;rsquo;s plank time.&lt;/p>
&lt;p>Now it&amp;rsquo;s obvious what the strategy should be.&lt;/p>
&lt;p>$$ c[0]\rightarrow 200[0] \rightarrow 199[1] \rightarrow 198[0] \rightarrow &amp;hellip; \rightarrow 4[0] \rightarrow 3[1] \rightarrow 2[0] \rightarrow 1[1]$$&lt;/p>
&lt;p>Ok, so we&amp;rsquo;re a little sad that we don&amp;rsquo;t get any of the loot. But we&amp;rsquo;re not as sad as we would be if we lost this vote.&lt;/p>
&lt;p>It&amp;rsquo;s clear that we can use the same strategy for when there are $202$ pirates.&lt;/p>
&lt;p>$$ c[0]\rightarrow 201[0] \rightarrow 200[1] \rightarrow 199[0] \rightarrow &amp;hellip; \rightarrow 4[1] \rightarrow 3[0] \rightarrow 2[1] \rightarrow 1[0]$$&lt;/p>
&lt;h3 id="203-pirates">203 Pirates&lt;/h3>
&lt;p>Ok, now what?&lt;/p>
&lt;p>We need $101$ other pirates to say &amp;ldquo;aye!&amp;rdquo; but we only have $100$ doubloons to reward. Furthermore, there are $101$ pirates in the previous case that were not awarded any doubloons, which means that unless they are motivated to do so, they will vote to kill.&lt;/p>
&lt;p>Does this mean that with $203$ pirates, we are doomed to walk the plank?&lt;/p>
&lt;p>Unfortunately so. Hopefully we can wash upon an island and join another band of pirates.&lt;/p>
&lt;p>So that means that with more than $202$ pirates, the captain is always destined to die right?
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Spoilers ahead&lt;/p>
&lt;/div>
&lt;/p>
&lt;h3 id="204-pirates">204 Pirates&lt;/h3>
&lt;h4 id="déjà-vu">Déjà Vu?&lt;/h4>
&lt;p>The argument in the previous case for our imminent death was that we needed $101$ other votes but could only buy $100$ of them. Again, we need $101$ other votes here. Isn&amp;rsquo;t it the same case now?&lt;/p>
&lt;p>Here&amp;rsquo;s a hint. There is one pirate that doesn&amp;rsquo;t require monetary motivation.&lt;/p>
&lt;h4 id="another-motivator">Another Motivator&lt;/h4>
&lt;p>Here is a proposed rewards distribution.&lt;/p>
&lt;p>$$ c[0]\rightarrow 203[0] \rightarrow 202[0] \rightarrow 201[0] \rightarrow 200[0] \rightarrow 199[1] \rightarrow &amp;hellip; \rightarrow 4[0] \rightarrow 3[1] \rightarrow 2[0] \rightarrow 1[1]$$&lt;/p>
&lt;p>As always, we get our $100$ &amp;ldquo;ayes!&amp;rdquo; from the last $200$ pirates. We get $1$ &amp;ldquo;aye!&amp;rdquo; from ourselves. Who else is on our side amongst pirates $201,202,203$?&lt;/p>
&lt;p>Turns out death is a strong motivator. Remember, if $203$ becomes captain, they will walk the plank! So pirate $203$ will also say &amp;ldquo;aye!&amp;rdquo;.&lt;/p>
&lt;h3 id="generalizing-the-new-strategy">Generalizing the New Strategy&lt;/h3>
&lt;p>It is the case that we will always distribute the coins amongst pirates $1$ through $200$ to get our first $100$ votes. Thus for our analysis, it is sufficient to just look at pirates $201$ onwards.
$$\boxed{201}\boxed{202}\xcancel{\boxed{203}}\boxed{204}$$&lt;/p>
&lt;h4 id="205-pirates">205 Pirates&lt;/h4>
&lt;p>For sure, we are not getting pirate $204$&amp;rsquo;s &amp;ldquo;aye!&amp;rdquo; as they won&amp;rsquo;t be sad as captain. And pirate $203$ also won&amp;rsquo;t be sad if $204$ is captain. Pirates $201$ and $202$ are not on the chopping block, so we are not getting their votes either.
$$\boxed{201}\boxed{202}\xcancel{\boxed{203}}\boxed{204}\xcancel{\boxed{205}}$$&lt;/p>
&lt;h4 id="206-pirates">206 Pirates&lt;/h4>
&lt;p>Using the logic from the previous case, pirates $201$ through $204$ won&amp;rsquo;t be sad if pirate $205$ becomes captain. The only pirate that will be sad is pirate $205$. So we get their vote!
$$201,202,203,204\quad&amp;mdash;\quad \underbrace{205, 206}_\text{aye!}$$
Darn, still walking the plank.&lt;/p>
&lt;h4 id="207-pirates">207 Pirates&lt;/h4>
&lt;p>$$201,202,203,204\quad&amp;mdash;\quad \underbrace{205, 206, 207}_\text{aye!}$$&lt;/p>
&lt;h4 id="208-pirates">208 Pirates&lt;/h4>
&lt;p>$$201,202,203,204\quad&amp;mdash;\quad \underbrace{205, 206, 207, 208}_\text{aye!}$$
Wow! We&amp;rsquo;ve survived!&lt;/p>
&lt;p>Unfortunately for the captains in the next few cases, since pirates $205$ through $208$ are not sad with $208$ being captain, they will not be saying &amp;ldquo;aye!&amp;rdquo;.&lt;/p>
&lt;h4 id="216-pirates">216 Pirates&lt;/h4>
&lt;p>$$\begin{matrix}
201,202,203,204,\newline 205,206,207,208\thickspace
\end{matrix}
\quad&amp;mdash;\quad
\underbrace{
\begin{matrix}
209,210,211,212, \newline 213,214,215,216\thickspace
\end{matrix}
}_\text{aye!}$$&lt;/p>
&lt;p>Another surviving captain! Now the idea is clear. Every surviving captain creates a &amp;ldquo;sink state&amp;rdquo; where every pirate up to that point will never say &amp;ldquo;aye!&amp;rdquo; ever again (since they are not sad if they end up in that state). Every next surviving captain must have double the number of pirates labelled after $200$ in order to tie with these no-&amp;ldquo;aye!&amp;rdquo; pirates.&lt;/p>
&lt;p>Thus, a pirate captain only survives if they are a power of $2$ after $200$.
$$201, 202, 204, 208, 216, 232, 264, &amp;hellip;$$&lt;/p></description></item><item><title>II. Quantum Computing Foundations</title><link>https://kiblitz.github.io/p/quantum-computing-foundations/</link><pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/quantum-computing-foundations/</guid><description>&lt;img src="https://kiblitz.github.io/p/quantum-computing-foundations/mountain_winter.jpeg" alt="Featured image of post II. Quantum Computing Foundations" />&lt;h2 id="qubit-system-representations">Qubit System Representations&lt;/h2>
&lt;h3 id="single-qubit-recap">Single Qubit Recap&lt;/h3>
&lt;p>Previously, we saw that a single qubit can be represented as a pair of amplitudes.
$$A=\begin{bmatrix} v_0 \newline v_1 \end{bmatrix}$$
$$\text{OR}$$
$$A=v_0|0\rangle + v_1|1\rangle$$
Where $v_0$ represents $A$&amp;rsquo;s amplitude on $0$ and $v_1$ represents $A$&amp;rsquo;s amplitude on $1$.&lt;/p>
&lt;h3 id="extending-to-multi-qubit-states">Extending to Multi-Qubit States&lt;/h3>
&lt;p>In $q$-qubit systems, the representing vectors are $2^q$-dimensional where each component&amp;rsquo;s magnitude represents the amplitude on a specific value. The mapping of axis to value follows from the tensor product order.
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Suppose $AB$ had the following state.
$$AB=v_{00}|00\rangle + v_{01}|01\rangle + v_{10}|10\rangle + v_{11}|11\rangle$$
The corresponding vector would be the following.
$$AB=\begin{bmatrix} v_{00} \newline v_{01} \newline v_{10} \newline v_{11} \end{bmatrix}$$&lt;/p>
&lt;/div>
&lt;/p>
&lt;h2 id="classical-quantum-gates">Classical Quantum Gates&lt;/h2>
&lt;p>With the exception of qubit initialization, quantum computing operations are all bijective modifications on their input qubits with no outputs.
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The reason for this strict rule is for &lt;a class="link" href="https://en.wikipedia.org/wiki/Reversible_computing" target="_blank" rel="noopener"
>computational reversibility&lt;/a> which is essential for taking out the garbage (to be explained in a later post).&lt;/p>
&lt;p>This is why qubit value assignment isn&amp;rsquo;t possible. It is not possible to reverse the assigned value $o$ since every possible input $i$ maps to $o$.&lt;/p>
&lt;/div>
&lt;/p>
&lt;h3 id="definitions">Definitions&lt;/h3>
&lt;h4 id="initialize">Initialize&lt;/h4>
&lt;p>$\texttt{INIT}(A)$&lt;/p>
&lt;p>Creates a new qubit $A$ with full amplitude on value $0$.&lt;/p>
&lt;p>$$\begin{bmatrix} 1 \newline 0 \end{bmatrix}$$&lt;/p>
&lt;h4 id="not">Not&lt;/h4>
&lt;p>$\texttt{NOT}(A)$&lt;/p>
&lt;p>Negates $A$. In other words, adds $1$ to qubit $A$ ($\bmod\thickspace2$).&lt;/p>
&lt;p>$$\begin{bmatrix} 0 &amp;amp; 1 \newline 1 &amp;amp; 0 \end{bmatrix}$$&lt;/p>
&lt;h4 id="controlled-not">Controlled Not&lt;/h4>
&lt;p>$\texttt{CNOT}(AB)$&lt;/p>
&lt;p>If $A=1$ then negates $B$. In other words, adds $A$ to qubit $B$ ($\bmod\thickspace2$).&lt;/p>
&lt;p>$$\begin{bmatrix} 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \newline 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 \newline 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 \newline 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0\end{bmatrix}$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$$
\begin{array}{c|c}
AB &amp;amp; \texttt{CNOT}(AB) \newline
00 &amp;amp; 00 \newline
01 &amp;amp; 01 \newline
\boxed{10} &amp;amp; 11 \newline
\boxed{11} &amp;amp; 10
\end{array}
$$&lt;/p>
&lt;/div>
&lt;h4 id="controlled-controlled-not">Controlled Controlled Not&lt;/h4>
&lt;p>$\texttt{CCNOT}(ABC)$&lt;/p>
&lt;p>If $A=1$ and $B=1$ then negates $C$. In other words, adds $A\And B$ to qubit $C$ ($\bmod\thickspace 2$).&lt;/p>
&lt;p>$$\begin{bmatrix}
1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \newline
0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \newline
0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \newline
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \newline
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \newline
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 \newline
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 \newline
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0
\end{bmatrix}$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$$
\begin{array}{c|c}
ABC &amp;amp; \texttt{CCNOT}(ABC) \newline
000 &amp;amp; 000 \newline
001 &amp;amp; 001 \newline
010 &amp;amp; 010 \newline
011 &amp;amp; 011 \newline
100 &amp;amp; 100 \newline
101 &amp;amp; 101 \newline
\boxed{110} &amp;amp; 111 \newline
\boxed{111} &amp;amp; 110
\end{array}
$$&lt;/p>
&lt;/div>
&lt;h3 id="syntactic-sugar">Syntactic Sugar&lt;/h3>
&lt;p>Sometimes we will define/use a subroutine $F(X_1X_2&amp;hellip;X_n)$ that outputs a value which we later execute in some pseudocode fashion (i.e. $\text{If }F(AB)\text{ Then}&amp;hellip;$). But technically returning a value isn&amp;rsquo;t allowed.&lt;/p>
&lt;p>This is just syntactic sugar for creating a temporary qubit $T$ and applying $F$&amp;rsquo;s logic to modify $T$ as the output.
$$\texttt{INIT}(T)\newline &amp;hellip;\newline \text{// Apply $F$ logic onto $T$}\newline &amp;hellip; \newline\text{If }T\text{ Then}&amp;hellip;$$&lt;/p>
&lt;p>Also note that since quantum computation must be reversible, branching must be done intelligently.
For example, $\text{If}$ branches are syntactic sugar for controlled operations ($\texttt{CTRUEBRANCH}(T&amp;hellip;)$).&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Example for negation of adding $\texttt{CCNOT}$ to input.
$$
\begin{array}{c|c}
\text{compiled} &amp;amp; \text{syntactic sugar} \newline\newline
\texttt{INIT}(A) &amp;amp; \texttt{INIT}(A) \newline
\texttt{INIT}(B) &amp;amp; \texttt{INIT}(B) \newline
\texttt{INIT}(C) &amp;amp; \texttt{INIT}(C) \newline
\texttt{INIT}(D) &amp;amp; \texttt{INIT}(D) \newline
\texttt{INIT}(T_1) &amp;amp; \newline
\texttt{INIT}(T_2) &amp;amp; \newline
&amp;amp; \texttt{def F}(X_1X_2)\lbrace \newline
&amp;amp; \texttt{INIT}(T) \newline
&amp;amp; \texttt{NOT}(X_1) \newline
&amp;amp; \texttt{NOT}(X_2) \newline
&amp;amp; \texttt{CCNOT}(X_1X_2T) \newline
&amp;amp; \texttt{NOT}(X_1) \newline
&amp;amp; \texttt{NOT}(X_2) \newline
&amp;amp; \texttt{Output }T \newline
&amp;amp; \rbrace\quad\quad\quad\quad\quad\quad \newline
&amp;amp; \newline
\texttt{NOT}(A) &amp;amp; \texttt{If F}(AB)\texttt{ Then}\lbrace \newline
\texttt{NOT}(B) &amp;amp; \newline
\texttt{CCNOT}(ABT_1) &amp;amp; \newline
\texttt{NOT}(A) &amp;amp; \newline
\texttt{NOT}(B) &amp;amp; \newline
\texttt{CNOT}(T_1A)&amp;amp; \texttt{NOT}(A) \newline
\texttt{CNOT}(T_1B)&amp;amp; \texttt{NOT}(B) \newline
&amp;amp; \rbrace\quad\quad\quad\quad\quad\quad\quad \newline
&amp;amp; \newline
\texttt{NOT}(C) &amp;amp; \texttt{If F}(CD)\texttt{ Then}\lbrace \newline
\texttt{NOT}(D) &amp;amp; \newline
\texttt{CCNOT}(CDT_2) &amp;amp; \newline
\texttt{NOT}(C) &amp;amp; \newline
\texttt{NOT}(D) &amp;amp; \newline
\texttt{CCNOT}(T_2CD)&amp;amp; \texttt{CNOT}(CD) \newline
&amp;amp; \rbrace\quad\quad\quad\quad\quad\quad\quad \newline
\end{array}
$$&lt;/p>
&lt;/div></description></item><item><title>II. Bounding Problems</title><link>https://kiblitz.github.io/p/bounding-problems/</link><pubDate>Fri, 09 Jun 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/bounding-problems/</guid><description>&lt;img src="https://kiblitz.github.io/p/bounding-problems/waterfall_rock.jpg" alt="Featured image of post II. Bounding Problems" />&lt;h2 id="sorting">Sorting&lt;/h2>
&lt;h3 id="lower-bound-info-theory-argument">Lower Bound (Info Theory Argument)&lt;/h3>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Theorem&lt;/strong>&lt;/dt>
&lt;dd>&lt;em>&lt;strong>Any&lt;/strong>&lt;/em> deterministic sorting algorithm on an array of length $n$ must make at least $\log_2(n!)$ comparisons&lt;/dd>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>Observe that sorting is just a permutation on the input array. In total, there are $n!$ permutations. In the worst case, only one permutation corresponds to a sorted array.
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>This is when all elements in the array are unique&lt;/p>
&lt;/div>
&lt;/dd>
&lt;dd>Observe that each comparison ($a {_?\atop &amp;gt;} b$) partitions the solution space into two: permutations that are still possibly correct and permutations that are not.
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Suppose we have $[3, 1, 2]$. At the start of the algorithm (without having made any comparisons), all permutations could potentially be correct (sorted). However, once we make the comparison between $3 {?\atop &amp;gt;} 1 \Rightarrow 1 &amp;lt; 3$, every permutation where $3$ comes before $1$ is known to be incorrect.&lt;/p>
&lt;p>$$\cancel{[3,1,2]}\newline\cancel{[3,2,1]}\newline[2,1,3]\newline\cancel{[2,3,1]}\newline[1,3,2]\newline[1,2,3]$$&lt;/p>
&lt;/div>
&lt;/dd>
&lt;dd>Since in the worst case, the algorithm will mark the smaller partition as incorrect, it must be the case that each comparison shrinks the solution space by at most half. So in the worst case, it takes $\log_2(n!)$ comparisons.&lt;/dd>
&lt;/dl>
&lt;/blockquote>
&lt;p>This is an &lt;a class="link" href="https://en.wikipedia.org/wiki/Information_theory" target="_blank" rel="noopener"
>information theoretic&lt;/a> argument since the proof is explaining that any algorithm requires $\log_2 n$ bits of information.&lt;/p>
&lt;h2 id="upper-bound">Upper Bound&lt;/h2>
&lt;blockquote>
&lt;p>$\texttt{MergeSort}(A)$&lt;/p>
&lt;ul>
&lt;li>Split $A$ into two contiguous subarrays $L,R$ with (approximately) equal number of elements&lt;/li>
&lt;li>$L&amp;rsquo;=\texttt{MergeSort}(L)$, $R&amp;rsquo;=\texttt{MergeSort}(R)$&lt;/li>
&lt;li>Merge sorted $L&amp;rsquo;$ and $R&amp;rsquo;$ to create sorted $A&amp;rsquo;$
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>You can inductively reason that $L&amp;rsquo;$ and $R&amp;rsquo;$ are sorted.&lt;/p>
&lt;/div>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The merging is done linearly using two pointers on $L&amp;rsquo;$ and $R&amp;rsquo;$ and appending the lesser of the two values to $A&amp;rsquo;$ while incrementing that pointer (this is possible because $L&amp;rsquo;$ and $R&amp;rsquo;$ are both sorted)&lt;/p>
&lt;/div>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>The only comparisons done in $\texttt{MergeSort}$ are in the last step. Every comparison increments at least one pointer, which can happen at most $n-1$ times (See &lt;a class="link" href="https://www.geeksforgeeks.org/merge-two-sorted-arrays/" target="_blank" rel="noopener"
>this&lt;/a> for a more thorough explanation on the last step).&lt;/p>
&lt;p>Unrolling the recurrence:
$$\begin{align*}&amp;amp;\thickspace\underbrace{(n-1)+2(\frac{n}{2}-1)+4(\frac{n}{4}-1)+&amp;hellip;}_{\log_2(n)}\newline=&amp;amp;\thickspace (n-1) + (n-2) + (n-4) + &amp;hellip; \newline=&amp;amp;\thickspace n\log_2 n - (n - 1) \newline &amp;lt;&amp;amp; \thickspace n\log_2 n\newline\in&amp;amp;\thickspace \mathcal{O}(n\log n)\end{align*}$$&lt;/p>
&lt;p>Since $\log_2(n!)\in\Omega(n \log n)$, the bound is tight.
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$$\begin{align*}\log_2 (n!) &amp;amp;= \log_2(n) + \log_2(n - 1) + \log_2(n - 2) + &amp;hellip; + \log_2(1) \newline &amp;amp;&amp;gt; \frac{n}{2}\log_2 (\frac{n}{2}) \newline &amp;amp;= \Omega(n \log n) \end{align*}$$&lt;/p>
&lt;/div>
&lt;/p>
&lt;h2 id="maximum-element">Maximum Element&lt;/h2>
&lt;h3 id="upper-bound-1">Upper Bound&lt;/h3>
&lt;p>Scanning the array from left to right while keeping track of the largest seen element requires $n-1$ comparisons.&lt;/p>
&lt;h3 id="lower-bound">Lower Bound&lt;/h3>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Theorem&lt;/strong>&lt;/dt>
&lt;dd>Any deterministic maximum element algorithm must make at least $n - 1$ comparisons&lt;/dd>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>AFSOC there exists an algorithm $\mathcal{A}$ which makes less than $n-1$ comparisons. Construct a graph with $n$ vertices for each array element. For every comparison $\mathcal{A}$ makes between two elements, append an edge to the graph between the corresponding vertices. Since there are less than $n-1$ edges, there must be at least two islands.&lt;/dd>
&lt;dd>
&lt;p>If $\mathcal{A}$ selects an element $e$ in an island, consider the same input array except all corresponding elements on every other island are incremented by $e$. The observations $\mathcal{A}$ makes are the same since the comparisons known are only within an island, yet clearly $e$ cannot be the maximum element.
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Suppose our array is $[1, 2, 3, 4, 5, 6, 7]$ labelled $[a, b, c, d, e, f, g]$ and $\mathcal{A}$ makes the following ($n-2=5$) comparisons:
$$
a_{(1)}&amp;lt;c_{(3)}\newline
c_{(3)}&amp;lt;g_{(7)}\newline
g_{(7)}&amp;gt;d_{(4)}\newline
\text{}\newline
b_{(2)}&amp;lt;f_{(6)}\newline
f_{(6)}&amp;gt;e_{(5)}\newline
$$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 392 217"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 64,32 L 80,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,32 L 352,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,64 L 80,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,64 L 352,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,192 L 48,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,192 L 320,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,32 L 64,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,32 L 80,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,32 L 336,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,32 L 352,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 L 32,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,80 L 48,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,192 L 32,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,48 L 304,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,80 L 320,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,192 L 304,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,176 L 376,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,160 L 48,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,48 L 32,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,16 L 48,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,160 L 320,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,48 L 304,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,16 L 320,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='372.000000,176.000000 360.000000,170.399994 360.000000,181.600006' fill='currentColor' transform='rotate(120.000000, 360.000000, 176.000000)'>&lt;/polygon>
&lt;circle cx='16' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='16' cy='192' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='32' cy='160' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='192' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='288' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='288' cy='192' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='304' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='304' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='304' cy='160' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='320' cy='48' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='320' cy='192' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='0' y='52' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='0' y='196' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='32' y='4' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='32' y='100' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='32' y='148' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='64' y='196' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='72' y='52' fill='currentColor' style='font-size:1em'>7&lt;/text>
&lt;text text-anchor='middle' x='136' y='100' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='144' y='100' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='152' y='100' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='160' y='100' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='168' y='100' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='176' y='100' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='184' y='100' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='192' y='100' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='200' y='100' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='208' y='100' fill='currentColor' style='font-size:1em'>&amp;gt;&lt;/text>
&lt;text text-anchor='middle' x='272' y='52' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='272' y='196' fill='currentColor' style='font-size:1em'>9&lt;/text>
&lt;text text-anchor='middle' x='296' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='304' y='4' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='304' y='100' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='304' y='148' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='336' y='196' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='344' y='52' fill='currentColor' style='font-size:1em'>7&lt;/text>
&lt;text text-anchor='middle' x='344' y='196' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>Now look at the comparisons after the incremental modification to $[1, 9, 3, 4, 5, 12, 13]$ labelled $[a, b, c, d, e, f, g]$:
$$
a_{(1)}&amp;lt;c_{(3)}\newline
c_{(3)}&amp;lt;g_{(7)}\newline
g_{(7)}&amp;gt;d_{(4)}\newline
\text{}\newline
b_{(9)}&amp;lt;f_{(13)}\newline
f_{(13)}&amp;gt;e_{(12)}\newline
$$
The comparisons are still true yet $\mathcal{A}$&amp;rsquo;s original output is incorrect!&lt;/p>
&lt;/div>
&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/blockquote>
&lt;h2 id="second-largest-element">Second Largest Element&lt;/h2>
&lt;h3 id="upper-bound-2">Upper Bound&lt;/h3>
&lt;p>Find the maximum element with a &amp;ldquo;playoffs&amp;rdquo; structure ($n-1$ comparisons).&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 464 217"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 48,96 L 80,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,96 L 144,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,96 L 336,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,96 L 400,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,160 L 208,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,160 L 336,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,16 A 16,16 0 0,0 16,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,32 A 16,16 0 0,1 32,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,32 A 16,16 0 0,0 32,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,16 A 16,16 0 0,1 48,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,16 A 16,16 0 0,0 144,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,32 A 16,16 0 0,1 160,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,32 A 16,16 0 0,0 160,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,16 A 16,16 0 0,1 176,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,16 A 16,16 0 0,0 272,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,32 A 16,16 0 0,1 288,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,32 A 16,16 0 0,0 288,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,16 A 16,16 0 0,1 304,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 384,16 A 16,16 0 0,0 400,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,32 A 16,16 0 0,1 416,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 432,32 A 16,16 0 0,0 416,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,16 A 16,16 0 0,1 432,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,80 A 16,16 0 0,0 48,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,96 A 16,16 0 0,1 96,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,96 A 16,16 0 0,0 96,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,80 A 16,16 0 0,1 144,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,80 A 16,16 0 0,0 304,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,96 A 16,16 0 0,1 352,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,96 A 16,16 0 0,0 352,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,80 A 16,16 0 0,1 400,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,144 A 16,16 0 0,0 112,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,160 A 16,16 0 0,1 224,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,160 A 16,16 0 0,0 224,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,144 A 16,16 0 0,1 336,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='0' y='4' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='32' y='68' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='64' y='4' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='96' y='132' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='128' y='4' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='160' y='68' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='192' y='4' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='224' y='196' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='256' y='4' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='288' y='68' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='320' y='4' fill='currentColor' style='font-size:1em'>7&lt;/text>
&lt;text text-anchor='middle' x='352' y='132' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='384' y='4' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='416' y='68' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='448' y='4' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>&lt;/p>
&lt;/div>
&lt;p>Observe that the second largest element is only less than the maximum element. Therefore, it must be the case that the second largest element had a comparison with the maximum element.&lt;/p>
&lt;p>Since there are $\log_2 n$ &amp;ldquo;rounds&amp;rdquo;, it takes $\log_2 n - 1$ comparisons to find the maximum element among those previously compared with the true maximum element.&lt;/p>
&lt;p>Thus, this algorithm provides an upper bound of $n + \log_2 n - 2$ comparisons.&lt;/p>
&lt;h3 id="lower-bound-adversarial-argument">Lower Bound (Adversarial Argument)&lt;/h3>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Theorem&lt;/strong>&lt;/dt>
&lt;dd>Any deterministic second largest element algorithm must make at least $n + \log_2 n - 2$ comparisons&lt;/dd>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>Consider the set of all comparisons made that do not involve the maximum element. Since any algorithm $A$ finds the second largest element, the same argument from the previous problem can be made to prove that this set has at least $n-2$ elements.&lt;/dd>
&lt;dd>
&lt;p>Let $M$ be the set of all comparisons made that involve the maximum element. The lower bound on the number of comparisons made by $A$ is&lt;/p>
&lt;/dd>
&lt;dd>$$n-2+|M|$$&lt;/dd>
&lt;dd>
&lt;p>We will now show that $|M|$ is at least $\log_2 n$.&lt;/p>
&lt;/dd>
&lt;dd>Let each element have a corresponding weight associated with it. The weight $w$ represents the number of elements known to be less than it. Observe that with each comparison query $\mathcal{A}$ makes between any two elements $e_1,e_2$, one of $w(e_1) := w(e_1) + w(e_2)$ or $w(e_2) := w(e_2) + w(e_1)$ will occur.&lt;/dd>
&lt;dd>
&lt;p>Since either is possible before the comparison occurs, we can choose which is true upon $\mathcal{A}$&amp;rsquo;s query. Specifically, we will minimize the weight increment (if $w(e_1) &amp;gt; w(e_2)$ then assign $e_1&amp;gt;e_2$ else assign $e_1&amp;lt;e_2$).&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>Observe that with this dynamic response, any weight can at most double with each comparison. Since the algorithm only knows the maximum element once such an element obtains a weight of $n-1$ (there are $n-1$ elements less than the maximum one), $|M|\geq \log_2 n$.&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>$$n - 2 + \log_2 n$$&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/blockquote>
&lt;p>This is an &lt;em>&lt;strong>adversarial&lt;/strong>&lt;/em> argument since the proof constructs an adversary that dynamically responds to any algorithm&amp;rsquo;s queries such that it minimizes the algorithm&amp;rsquo;s effectiveness.&lt;/p>
&lt;h2 id="graph-connectivity">Graph Connectivity&lt;/h2>
&lt;h3 id="upper-bound-3">Upper Bound&lt;/h3>
&lt;p>Query every pair to know the entire graph. In an $n$-node graph, this is $n\choose 2$ queries.&lt;/p>
&lt;h3 id="lower-bound-adversarial-argument-1">Lower Bound (Adversarial Argument)&lt;/h3>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Theorem&lt;/strong>&lt;/dt>
&lt;dd>Any deterministic graph connectivity algorithm must make $n\choose 2$ queries&lt;/dd>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>We will again construct an adversary $\mathcal{E}$ to maximize the number of required queries an algorithm $\mathcal{A}$ must make.&lt;/dd>
&lt;dd>
&lt;p>Observe that the edges declared by $\mathcal{A}$ form a forest of trees (where $\mathcal{A}$ aims to determine if the number of trees in the forest is exactly $1$). $\mathcal{E}$ will maintain the following invariant.&lt;/p>
&lt;/dd>
&lt;dd>&lt;ul>
&lt;li>For each tree $T$, all possible edges among its vertices have been queried&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dd>&lt;ul>
&lt;li>For each pair of trees $T_1, T_2$, $\exists (e_1,e_2)$ such that $e_1\in T_1, e_2\in T_2$.&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dd>
&lt;p>In other words, only dynamically create an edge if it is the last edge to connect two forests.
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Intuitively $\mathcal{E}$&amp;rsquo;s idea is that if it creates an edge between two trees $T_1, T_2$, but it is not the last possible edge query between $T_1, T_2$, then $\mathcal{A}$ would not need to
query any more edges between $T_1, T_2$.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 400 137"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 32,64 L 64,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,80 L 128,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,64 L 160,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,64 L 48,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='104.000000,80.000000 92.000000,74.400002 92.000000,85.599998' fill='currentColor' transform='rotate(180.000000, 96.000000, 80.000000)'>&lt;/polygon>
&lt;polygon points='136.000000,80.000000 124.000000,74.400002 124.000000,85.599998' fill='currentColor' transform='rotate(0.000000, 128.000000, 80.000000)'>&lt;/polygon>
&lt;circle cx='32' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='64' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='160' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='160' cy='96' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='16' y='68' fill='currentColor' style='font-size:1em'>a&lt;/text>
&lt;text text-anchor='middle' x='40' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='48' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='48' y='116' fill='currentColor' style='font-size:1em'>b&lt;/text>
&lt;text text-anchor='middle' x='80' y='68' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='112' y='68' fill='currentColor' style='font-size:1em'>?&lt;/text>
&lt;text text-anchor='middle' x='160' y='20' fill='currentColor' style='font-size:1em'>T&lt;/text>
&lt;text text-anchor='middle' x='160' y='52' fill='currentColor' style='font-size:1em'>d&lt;/text>
&lt;text text-anchor='middle' x='160' y='116' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='168' y='20' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>In the above example, there currently exists $0$ queries between trees $T_1$ and $T_2$. If $\mathcal{A}$ queries $(b, e)$ and $\mathcal{E}$ responds with &lt;em>&lt;strong>yes&lt;/strong>&lt;/em>, then $\mathcal{A}$ has no need to query any more edges between $T_1$ and $T_2$ because it already knows that there is going to be some path in $T_1$ to $b$ which connects to some path in $T_2$ to $e$.&lt;/p>
&lt;/div>
&lt;/p>
&lt;/dd>
&lt;dd>AFSOC $\mathcal{A}$ outputs without querying $n\choose 2$ edges from $\mathcal{E}$. By definition of $\mathcal{E}$, $\exists T_1, T_2, &amp;hellip;, T_t$ such that there is no queried connecting edge between $T_i, T_j\thickspace \forall i, j$.&lt;/dd>
&lt;dd>
&lt;ul>
&lt;li>If $\mathcal{A}$ outputs &lt;em>&lt;strong>yes&lt;/strong>&lt;/em>, then suppose all un-queried edges are not in the graph.&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dd>&lt;ul>
&lt;li>If $\mathcal{A}$ outputs &lt;em>&lt;strong>no&lt;/strong>&lt;/em>, then suppose all un-queried edges are indeed in the graph.&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;/dl>
&lt;/blockquote></description></item><item><title>I. The Hadamard Gate</title><link>https://kiblitz.github.io/p/the-hadamard-gate/</link><pubDate>Wed, 07 Jun 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/the-hadamard-gate/</guid><description>&lt;img src="https://kiblitz.github.io/p/the-hadamard-gate/mountain_cross.jpeg" alt="Featured image of post I. The Hadamard Gate" />&lt;h2 id="probabilistic-computing-analogy">Probabilistic Computing Analogy&lt;/h2>
&lt;p>The first computing models were entirely deterministic. The idea of probabilistic computing brought about a single new instruction.&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 496 121"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 136,16 L 192,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,32 L 120,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,48 L 24,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,64 L 120,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,80 L 192,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,32 L 24,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 24,48 L 24,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,32 L 120,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,48 L 136,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,48 L 136,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='40' y='52' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='48' y='52' fill='currentColor' style='font-size:1em'>o&lt;/text>
&lt;text text-anchor='middle' x='56' y='52' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='64' y='52' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='80' y='52' fill='currentColor' style='font-size:1em'>f&lt;/text>
&lt;text text-anchor='middle' x='88' y='52' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='96' y='52' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='104' y='52' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='152' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='152' y='100' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='160' y='4' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='160' y='100' fill='currentColor' style='font-size:1em'>.&lt;/text>
&lt;text text-anchor='middle' x='168' y='4' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='168' y='100' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>It provided computers with greater functionality and the ability to solve problems in novel ways (randomized/approximation algorithms) as well as introduce a new space of problems not possible before (i.e. &lt;a class="link" href="https://en.wikipedia.org/wiki/Interactive_proof_system" target="_blank" rel="noopener"
>interactive proof systems&lt;/a>).&lt;/p>
&lt;p>Quantum computing does something similar. Enter the Hadamard gate.
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Technically more but for now just the Hadamard gate&lt;/p>
&lt;/div>
&lt;/p>
&lt;h2 id="hadamard">Hadamard&lt;/h2>
&lt;p>The Hadamard gate is a modification operation on a single qubit.
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>We will go over what a qubit is later. For now, it is sufficient to think of a qubit as a bit&lt;/p>
&lt;/div>
&lt;/p>
&lt;h3 id="what-does-it-do">What does it do?&lt;/h3>
&lt;h4 id="testing">Testing&lt;/h4>
&lt;p>What happens if we execute the following?
&lt;style>
.alert {
padding: 20px;
background-color: #2196F3;
color: white;
opacity: 1;
transition: opacity 0.6s;
margin-bottom: 15px;
}
.alert.success {
background-color: #04AA6D;
}
.alert.danger {
background-color: #f44336;
}
.alert.warning {
background-color: #ff9800;
}
.closebtn {
margin-left: 15px;
color: white;
font-weight: bold;
float: right;
font-size: 22px;
line-height: 20px;
cursor: pointer;
transition: 0.3s;
}
.closebtn:hover {
color: black;
}
&lt;/style>
&lt;div class="alert success">
&lt;span class="closebtn" onclick="var div=this.parentElement; div.style.opacity='0';setTimeout(function(){ div.style.display = 'none'; }, 600);">&amp;times;&lt;/span>
Refresh the page to see!
&lt;/div>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">$$\texttt{INIT}(A)\newline\texttt{HAD}(A)$$&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">
&lt;p id="demo1">&lt;/p>
&lt;script>
document.getElementById("demo1").innerHTML = "$A = " + Math.round(Math.random()) + "$";
&lt;/script>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Seems like a coin flip. What about if $A=1$?&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">$$\texttt{INIT}(A)\newline\texttt{NOT}(A)\newline\texttt{HAD}(A)$$&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">
&lt;p id="demo2">&lt;/p>
&lt;script>
document.getElementById("demo2").innerHTML = "$A = " + Math.round(Math.random()) + "$";
&lt;/script>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Also a coin flip. Is quantum computing really just a computer that can coin flip?&lt;/p>
&lt;hr>
&lt;p>Ok let&amp;rsquo;s see what happens when we chain $\texttt{HAD}$ operations.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>$$\texttt{INIT}(A)\newline\texttt{HAD}(A)\newline\texttt{HAD}(A)$$&lt;/th>
&lt;th>$$\texttt{INIT}(A)\newline\texttt{NOT}(A)\newline\texttt{HAD}(A)\newline\texttt{HAD}(A)$$&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>$$A=0$$&lt;/td>
&lt;td>$$A=1$$&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>???&lt;/p>
&lt;h4 id="the-qubit">The Qubit&lt;/h4>
&lt;p>Before we can explain what&amp;rsquo;s going on, let&amp;rsquo;s revisit the qubit. It looks like a bit and acts like a bit with non-quantum instructions. But is it really a bit?&lt;/p>
&lt;p>In reality, a qubit can be defined by a pair of &lt;strong>amplitudes&lt;/strong>. Amplitudes in quantum computing are like what probabilities are in probabilistic computing. After a coin flip, the random bit has a $0.5$ probability of being $0$ and a $0.5$ probability of being $1$. The Hadamard gate has a similar effect except with the qubit&amp;rsquo;s amplitudes.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Quantum pairs well with linear algebra. A qubit can be represented as a 2-dimensional vector where its components are the qubit&amp;rsquo;s amplitudes. In the example below, qubit $A$ has all of its amplitude on the $0$ state. $$A=\begin{bmatrix}1 \newline 0 \end{bmatrix}$$In quantum, we typically use &lt;a class="link" href="https://en.wikipedia.org/wiki/Bra%E2%80%93ket_notation" target="_blank" rel="noopener"
>Bra-ket notation&lt;/a>.$$A=1|0\rangle + 0|1\rangle = |0\rangle$$&lt;/p>
&lt;/div>
&lt;p>So how does a qubit resolve its amplitude state? A qubit with a non-trivial state is said to be in &lt;a class="link" href="https://en.wikipedia.org/wiki/Quantum_superposition" target="_blank" rel="noopener"
>superposition&lt;/a>. The probability that a qubit measures to a value is its amplitude on that value &lt;em>&lt;strong>squared&lt;/strong>&lt;/em>.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Suppose $A=\frac{\sqrt{2}}{2}|0\rangle + \frac{\sqrt{2}}{2}|1\rangle$. Then, $A$ has a $0.5$ probability to measure with value $0$ and likewise $1$. Observe that the sum of the squares of amplitudes must sum to $1$. Because of this strict ratio property, we can represent qubits with their unnormalized state.$$A=|0\rangle + |1\rangle$$&lt;/p>
&lt;/div>
&lt;p>So how does it offer any more than probabilistic computing?&lt;/p>
&lt;h4 id="hadamard-definition">Hadamard Definition&lt;/h4>
&lt;p>In simple terms, the Hadamard gate has the following value mappings (amplitudes on arrows).
$$\begin{align*}0&amp;amp;\xmapsto{\frac{\sqrt{2}}{2}}1\newline0&amp;amp;\xmapsto{\frac{\sqrt{2}}{2}}0\end{align*}$$$$\begin{align*}1&amp;amp;\xmapsto{\frac{\sqrt{2}}{2}}0\newline1&amp;amp;\xmapsto{-\frac{\sqrt{2}}{2}}1\newline\end{align*}$$&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>It may be easier to think about the mappings in their unnormalized amplitudes$$\begin{align*}0&amp;amp;\xmapsto{1}1\newline0&amp;amp;\xmapsto{1}0\end{align*}$$$$\begin{align*}1&amp;amp;\xmapsto{1}0\newline1&amp;amp;\xmapsto{-1}1\newline\end{align*}$$&lt;/p>
&lt;/div>
&lt;p>The Hadamard gate can be represented by the following matrix.$$H=\frac{\sqrt{2}}{2}\begin{bmatrix}1 &amp;amp; 1 \newline 1 &amp;amp; -1\end{bmatrix}$$&lt;/p>
&lt;p>Represented as a pair of amplitude trees based on starting state:&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 488 105"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,64 L 40,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,64 L 136,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 40,16 L 64,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,16 L 160,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='40' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='64' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='112' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='136' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='160' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='16' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='40' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='112' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='120' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='136' y='4' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='152' y='36' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='160' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='160' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The root of the tree represents the starting state and the leaves the end state. The edges along any path represent the amplitudes (unnormalized in this example).&lt;/p>
&lt;/div>
&lt;p>The interesting capability quantum offers over probabilistic computing is that qubits can have &lt;em>negative amplitudes&lt;/em>.&lt;/p>
&lt;h4 id="examples">Examples&lt;/h4>
&lt;p>$\texttt{INIT}(A)\newline\texttt{HAD}(A)$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 488 105"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 16,64 L 40,16' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 40,16 L 64,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='40' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='64' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='16' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='24' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='40' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='56' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>$\mathbb{P}[A=0]=0.5\newline\mathbb{P}[A=1]=0.5$&lt;/p>
&lt;hr>
&lt;p>$\texttt{INIT}(A)\newline\texttt{NOT}(A)\newline\texttt{HAD}(A)$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 488 169"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 48,16 L 48,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,128 L 48,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,64 L 80,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='48' cy='64' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='80' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='16' y='148' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='24' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='40' y='52' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='48' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='64' y='68' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='72' y='100' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='80' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='80' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>$\mathbb{P}[A=0]=0.5\newline\mathbb{P}[A=1]=0.5$&lt;/p>
&lt;hr>
&lt;p>This is consistent with our first two testing results where $\texttt{HAD}$ acted like a coin flip.&lt;/p>
&lt;p>$\texttt{INIT}(A)\newline\texttt{HAD}(A)\newline\texttt{HAD}(A)$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 496 169"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 56,48 L 64,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,48 L 104,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 40,64 L 40,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,16 L 80,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,64 L 120,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,128 L 40,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,128 L 120,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 40,80 L 64,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,80 L 144,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 56,48 A 16,16 0 0,0 40,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,32 A 16,16 0 0,1 64,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,32 A 16,16 0 0,0 96,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,48 A 16,16 0 0,1 120,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;circle cx='16' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='40' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='64' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='80' cy='16' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='96' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='120' cy='80' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;circle cx='144' cy='128' r='6' stroke='currentColor' fill='#fff'>&lt;/circle>
&lt;text text-anchor='middle' x='16' y='148' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='24' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='32' y='68' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='48' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='56' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='64' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='80' y='4' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='96' y='148' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='104' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='112' y='36' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='128' y='68' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='136' y='100' fill='currentColor' style='font-size:1em'>-&lt;/text>
&lt;text text-anchor='middle' x='144' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='144' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;p>$\mathbb{A}[A=0]=1\times 1 + 1\times 1 = 2\newline \mathbb{A}[A=1]=1\times 1 + 1\times (-1) = 0$
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Unnormalized&lt;/p>
&lt;/div>
$\mathbb{P}[A=0]=1$&lt;/p>
&lt;p>Ok, so this explains our last testing result. Essentially, there are two paths resulting in $A=1$ whose amplitudes cancelled each other out. This is the unique factor in quantum computing.&lt;/p>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>This is called &lt;a class="link" href="https://en.wikipedia.org/wiki/Wave_interference" target="_blank" rel="noopener"
>destructive interference&lt;/a>&lt;/p>
&lt;/div>
&lt;h2 id="concluding-remarks">Concluding Remarks&lt;/h2>
&lt;h3 id="quantum-computing-advantage">Quantum Computing Advantage&lt;/h3>
&lt;p>Notice that the state of qubit $A$ only resolves at the end. If we were to only look at the right subtree, we would not know that an amplitude cancellation occured. In other words, to understand the behavior of a qubit we need knowledge on the entire amplitude tree. This is why &lt;em>simulating a quantum computer using a classical computer has &lt;strong>exponential&lt;/strong> complexity&lt;/em>.&lt;/p>
&lt;h3 id="resolving-qubit-values">Resolving Qubit Values&lt;/h3>
&lt;p>At what point do the amplitude calculations resolve to probabilities? In other words, at what point is the value of $A$ known? In our examples, it seems to resolve at the end of the program. In actuality, a qubit is known when it is &lt;a class="link" href="https://en.wikipedia.org/wiki/Measurement_in_quantum_mechanics" target="_blank" rel="noopener"
>measured&lt;/a>.&lt;/p>
&lt;p>In our last example, if we had measured qubit $A$ at every step, then the value of $A$ at the end is equally $0$ or $1$ at every step (essentially just a series of coin flips).&lt;/p></description></item><item><title>I. Derandomization: Kth Smallest Element</title><link>https://kiblitz.github.io/p/derandomization-kth-smallest-element/</link><pubDate>Sun, 04 Jun 2023 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/p/derandomization-kth-smallest-element/</guid><description>&lt;img src="https://kiblitz.github.io/p/derandomization-kth-smallest-element/waterfall_fire.jpg" alt="Featured image of post I. Derandomization: Kth Smallest Element" />&lt;h2 id="problem">Problem&lt;/h2>
&lt;blockquote>
&lt;p>Find the $k$th smallest element in an unsorted array $A$ of size $n$.&lt;/p>
&lt;/blockquote>
&lt;p>Sorting has $\mathcal{O}(n\log n)$ time complexity and is overkill for this specific problem (solves for all $k$).&lt;/p>
&lt;hr>
&lt;h3 id="quickselect">QuickSelect&lt;/h3>
&lt;h4 id="algorithm">Algorithm&lt;/h4>
&lt;blockquote>
&lt;p>$\texttt{QuickSelect}(A, k)$&lt;/p>
&lt;ul>
&lt;li>Arbitrarily pick a pivot element $p$ from $A$&lt;/li>
&lt;li>Split $A$ into $L = \lbrace a | \thickspace a \in A \text{ and } a &amp;lt; p \rbrace$ and $G = \lbrace a | \thickspace a \in A \text{ and } a &amp;gt; p \rbrace$&lt;/li>
&lt;li>Recurse
&lt;ul>
&lt;li>If $|L| = k$ then return $p$&lt;/li>
&lt;li>If $|L| &amp;gt; k - 1$ then $\texttt{QuickSelect}(L, k)$&lt;/li>
&lt;li>If $|L| &amp;lt; k - 1$ then $\texttt{QuickSelect}(G, k - (|L| + 1))$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;style type="text/css">
.box-shortcode {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 1em;
margin-bottom: 2em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box-shortcode.warning .box-title {
background: #ff6b6b;
}
.box-shortcode.warning {
background: #ff5b5bc6;
}
.box-shortcode.info .box-title {
background: #0089e488;
}
.box-shortcode.info {
background: #87ceffc0;
box-shadow: 3px 3px 5px #0089e410;
}
.box-shortcode.important .box-title {
background: #f7ec2c;
}
.box-shortcode.important {
background: #f7ec2c7d;
}
.box-shortcode.tip .box-title {
background: #a3ffa36d;
}
.box-shortcode.tip {
background: #a3ffa36d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box-shortcode p {
margin-bottom: 0.6em;
}
.box-shortcode p:first-of-type {
display: inline;
}
.box-shortcode p:nth-of-type(2) {
margin-top: 0.6em;
}
.box-shortcode p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>The $A_k\in G$ case has to readjust the recursive $k$ value since we are essentially throwing away the first $|L| + 1$ elements ($L$ and $p$).&lt;/p>
&lt;/div>
&lt;hr>
&lt;h4 id="example">Example&lt;/h4>
&lt;p>&lt;em>Suppose we always pick the first element $A_0$ to be $p$ (this is arbitrary for arbitrary $A$).&lt;/em>&lt;/p>
&lt;div class="box box-shortcode warning" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#warning-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$A$ can adversarially be monotonically ordered and the time complexity becomes $\mathcal{O}(n^2)$&lt;/p>
&lt;/div>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 888 761"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 104,0 L 136,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,0 L 168,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,0 L 200,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,0 L 232,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,0 L 264,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 264,0 L 296,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 296,0 L 336,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,0 L 368,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,0 L 408,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 408,0 L 440,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 440,0 L 480,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,0 L 512,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,32 L 136,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,32 L 152,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,32 L 168,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,32 L 184,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,32 L 200,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,32 L 216,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,32 L 232,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,32 L 248,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 248,32 L 264,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 264,32 L 280,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,32 L 296,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 296,32 L 320,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,32 L 336,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,32 L 352,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,32 L 368,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,32 L 392,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,32 L 408,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 408,32 L 424,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 424,32 L 440,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 440,32 L 464,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,32 L 480,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,32 L 496,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,32 L 512,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,64 L 392,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,80 L 344,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 344,80 L 408,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,128 L 120,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,128 L 152,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,128 L 184,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,128 L 216,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,128 L 248,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 248,128 L 280,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,128 L 392,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,128 L 424,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 424,128 L 464,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,128 L 504,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 504,128 L 536,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,160 L 120,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,160 L 152,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,160 L 184,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,160 L 216,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,160 L 248,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 248,160 L 280,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,160 L 392,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,160 L 424,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 424,160 L 464,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,160 L 504,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 504,160 L 536,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,208 L 376,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,256 L 144,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,256 L 176,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,256 L 216,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,256 L 256,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,256 L 288,256' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,288 L 144,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,288 L 160,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,288 L 176,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,288 L 192,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,288 L 216,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,288 L 240,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,288 L 256,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,288 L 272,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,288 L 288,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,384 L 128,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,384 L 168,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,384 L 200,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,384 L 296,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,416 L 128,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,416 L 168,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,416 L 200,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,416 L 296,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,464 L 376,464' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,512 L 120,512' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,512 L 160,512' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,512 L 192,512' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,544 L 120,544' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,544 L 136,544' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,544 L 160,544' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,544 L 176,544' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,544 L 192,544' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,608 L 192,608' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,608 L 224,608' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,640 L 192,640' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,640 L 224,640' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,688 L 376,688' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 204,312 L 228,312' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 228,312 L 260,312' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 180,328 L 220,328' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 204,344 L 244,344' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,128 L 88,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 88,512 L 88,544' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,384 L 96,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,0 L 104,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,256 L 104,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,128 L 120,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,512 L 120,544' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,384 L 128,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,0 L 136,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,256 L 144,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,128 L 152,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,608 L 152,640' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,512 L 160,544' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,0 L 168,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,384 L 168,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,256 L 176,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,128 L 184,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,512 L 192,544' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,608 L 192,640' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,0 L 200,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 200,384 L 200,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,128 L 216,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,256 L 216,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,608 L 224,640' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 232,0 L 232,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 248,128 L 248,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,256 L 256,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,384 L 256,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 264,0 L 264,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 264,96 L 264,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,336 L 272,368' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,128 L 280,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,256 L 288,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 296,0 L 296,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 296,384 L 296,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,0 L 336,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,32 L 352,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,128 L 352,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,0 L 368,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,128 L 392,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 408,0 L 408,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 408,80 L 408,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 424,32 L 424,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 424,128 L 424,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 440,0 L 440,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,32 L 464,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,128 L 464,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,0 L 480,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 488,96 L 488,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,32 L 496,48' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 504,128 L 504,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 512,0 L 512,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 520,96 L 520,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 536,128 L 536,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,112 L 152,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 144,112 L 184,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,112 L 216,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,112 L 248,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,112 L 280,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,368 L 160,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,368 L 180,328' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,368 L 204,344' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 220,328 L 240,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 244,344 L 272,288' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,544 L 160,592' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,544 L 200,592' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,288 L 204,312' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 260,312 L 272,336' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,32 L 344,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 344,80 L 360,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,32 L 416,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,80 L 432,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 464,48 L 488,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 496,48 L 520,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 104,128 L 112,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='130.000000,112.000000 118.000000,106.400002 118.000000,117.599998' fill='currentColor' transform='rotate(120.000000, 112.000000, 112.000000)'>&lt;/polygon>
&lt;path d='M 112,384 L 120,368' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='138.000000,368.000000 126.000000,362.399994 126.000000,373.600006' fill='currentColor' transform='rotate(120.000000, 120.000000, 368.000000)'>&lt;/polygon>
&lt;path d='M 136,128 L 144,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='162.000000,112.000000 150.000000,106.400002 150.000000,117.599998' fill='currentColor' transform='rotate(120.000000, 144.000000, 112.000000)'>&lt;/polygon>
&lt;path d='M 152,384 L 160,368' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='178.000000,368.000000 166.000000,362.399994 166.000000,373.600006' fill='currentColor' transform='rotate(120.000000, 160.000000, 368.000000)'>&lt;/polygon>
&lt;path d='M 160,592 L 168,608' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='178.000000,592.000000 166.000000,586.400024 166.000000,597.599976' fill='currentColor' transform='rotate(60.000000, 160.000000, 592.000000)'>&lt;/polygon>
&lt;path d='M 168,128 L 176,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='194.000000,112.000000 182.000000,106.400002 182.000000,117.599998' fill='currentColor' transform='rotate(120.000000, 176.000000, 112.000000)'>&lt;/polygon>
&lt;path d='M 184,384 L 192,368' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='210.000000,368.000000 198.000000,362.399994 198.000000,373.600006' fill='currentColor' transform='rotate(120.000000, 192.000000, 368.000000)'>&lt;/polygon>
&lt;path d='M 200,592 L 208,608' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='218.000000,592.000000 206.000000,586.400024 206.000000,597.599976' fill='currentColor' transform='rotate(60.000000, 200.000000, 592.000000)'>&lt;/polygon>
&lt;path d='M 200,128 L 208,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='226.000000,112.000000 214.000000,106.400002 214.000000,117.599998' fill='currentColor' transform='rotate(120.000000, 208.000000, 112.000000)'>&lt;/polygon>
&lt;path d='M 232,128 L 240,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='258.000000,112.000000 246.000000,106.400002 246.000000,117.599998' fill='currentColor' transform='rotate(120.000000, 240.000000, 112.000000)'>&lt;/polygon>
&lt;path d='M 264,112 L 264,120' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='280.000000,112.000000 268.000000,106.400002 268.000000,117.599998' fill='currentColor' transform='rotate(90.000000, 264.000000, 112.000000)'>&lt;/polygon>
&lt;path d='M 272,368 L 272,376' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='288.000000,368.000000 276.000000,362.399994 276.000000,373.600006' fill='currentColor' transform='rotate(90.000000, 272.000000, 368.000000)'>&lt;/polygon>
&lt;path d='M 360,112 L 368,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='378.000000,112.000000 366.000000,106.400002 366.000000,117.599998' fill='currentColor' transform='rotate(60.000000, 360.000000, 112.000000)'>&lt;/polygon>
&lt;path d='M 408,112 L 408,120' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='424.000000,112.000000 412.000000,106.400002 412.000000,117.599998' fill='currentColor' transform='rotate(90.000000, 408.000000, 112.000000)'>&lt;/polygon>
&lt;path d='M 432,112 L 440,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='450.000000,112.000000 438.000000,106.400002 438.000000,117.599998' fill='currentColor' transform='rotate(60.000000, 432.000000, 112.000000)'>&lt;/polygon>
&lt;path d='M 488,112 L 488,120' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='504.000000,112.000000 492.000000,106.400002 492.000000,117.599998' fill='currentColor' transform='rotate(90.000000, 488.000000, 112.000000)'>&lt;/polygon>
&lt;path d='M 520,112 L 520,120' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='536.000000,112.000000 524.000000,106.400002 524.000000,117.599998' fill='currentColor' transform='rotate(90.000000, 520.000000, 112.000000)'>&lt;/polygon>
&lt;path d='M 352,48 A 16,16 0 0,0 368,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 392,64 A 16,16 0 0,1 408,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,80 A 16,16 0 0,0 264,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 424,64 A 16,16 0 0,1 408,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='0' y='20' fill='currentColor' style='font-size:1em'>k&lt;/text>
&lt;text text-anchor='middle' x='0' y='148' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='0' y='276' fill='currentColor' style='font-size:1em'>k&lt;/text>
&lt;text text-anchor='middle' x='0' y='404' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='0' y='532' fill='currentColor' style='font-size:1em'>k&lt;/text>
&lt;text text-anchor='middle' x='0' y='628' fill='currentColor' style='font-size:1em'>p&lt;/text>
&lt;text text-anchor='middle' x='0' y='740' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='8' y='740' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='16' y='148' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='16' y='276' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='16' y='404' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='16' y='532' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='16' y='628' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='16' y='740' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='24' y='740' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='32' y='20' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='32' y='148' fill='currentColor' style='font-size:1em'>7&lt;/text>
&lt;text text-anchor='middle' x='32' y='276' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='32' y='404' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='32' y='532' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='32' y='628' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='32' y='740' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='40' y='20' fill='currentColor' style='font-size:1em'>,&lt;/text>
&lt;text text-anchor='middle' x='40' y='148' fill='currentColor' style='font-size:1em'>,&lt;/text>
&lt;text text-anchor='middle' x='40' y='276' fill='currentColor' style='font-size:1em'>,&lt;/text>
&lt;text text-anchor='middle' x='40' y='404' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='40' y='532' fill='currentColor' style='font-size:1em'>,&lt;/text>
&lt;text text-anchor='middle' x='40' y='628' fill='currentColor' style='font-size:1em'>,&lt;/text>
&lt;text text-anchor='middle' x='40' y='740' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='48' y='404' fill='currentColor' style='font-size:1em'>,&lt;/text>
&lt;text text-anchor='middle' x='56' y='148' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='56' y='532' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='56' y='628' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='56' y='740' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='64' y='404' fill='currentColor' style='font-size:1em'>L&lt;/text>
&lt;text text-anchor='middle' x='72' y='20' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='72' y='148' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='72' y='276' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='72' y='532' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='72' y='628' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='80' y='404' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='88' y='20' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='88' y='276' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='88' y='628' fill='currentColor' style='font-size:1em'>{&lt;/text>
&lt;text text-anchor='middle' x='96' y='628' fill='currentColor' style='font-size:1em'>}&lt;/text>
&lt;text text-anchor='middle' x='104' y='148' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='104' y='532' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='104' y='628' fill='currentColor' style='font-size:1em'>,&lt;/text>
&lt;text text-anchor='middle' x='112' y='404' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='120' y='20' fill='currentColor' style='font-size:1em'>7&lt;/text>
&lt;text text-anchor='middle' x='120' y='276' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='120' y='628' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='128' y='276' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='136' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='136' y='532' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='136' y='628' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='144' y='404' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='144' y='532' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='152' y='20' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='152' y='404' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='160' y='276' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='168' y='148' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='168' y='628' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='176' y='532' fill='currentColor' style='font-size:1em'>9&lt;/text>
&lt;text text-anchor='middle' x='176' y='628' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='184' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='184' y='404' fill='currentColor' style='font-size:1em'>9&lt;/text>
&lt;text text-anchor='middle' x='192' y='276' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='200' y='148' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='200' y='276' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='208' y='404' fill='currentColor' style='font-size:1em'>,&lt;/text>
&lt;text text-anchor='middle' x='208' y='628' fill='currentColor' style='font-size:1em'>9&lt;/text>
&lt;text text-anchor='middle' x='216' y='20' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='224' y='404' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='232' y='148' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='232' y='276' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='240' y='276' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='240' y='404' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='248' y='20' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='264' y='148' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='272' y='276' fill='currentColor' style='font-size:1em'>9&lt;/text>
&lt;text text-anchor='middle' x='272' y='404' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='280' y='20' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='280' y='404' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='288' y='148' fill='currentColor' style='font-size:1em'>,&lt;/text>
&lt;text text-anchor='middle' x='312' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='320' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='320' y='148' fill='currentColor' style='font-size:1em'>G&lt;/text>
&lt;text text-anchor='middle' x='336' y='148' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='352' y='20' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='368' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='376' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='384' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='392' y='20' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='408' y='148' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='424' y='20' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='440' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='448' y='148' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='456' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='464' y='20' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='480' y='148' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='488' y='148' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='496' y='20' fill='currentColor' style='font-size:1em'>9&lt;/text>
&lt;text text-anchor='middle' x='520' y='148' fill='currentColor' style='font-size:1em'>9&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;hr>
&lt;h4 id="analysis">Analysis&lt;/h4>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>Theorem&lt;/strong>&lt;/dt>
&lt;dd>The expected number of comparisons is upper bounded by $4n$&lt;/dd>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>Let $C(A, n, k)$ be the cost (number of comparisons) to find the $k$th smallest element in an array $A$ of $n$ elements. Let $C(n) = \max_{A,k} C(A,n,k)$.
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Convince yourself that $C(A,n,k)$ doesn&amp;rsquo;t depend on $A$&lt;/p>
&lt;/div>
&lt;/dd>
&lt;dd>It takes $n - 1$ comparisons to split $A$ into $L$ and $G$. The sizes of the pieces take the same distribution as $p$, which is uniformly random. By our definition of $C$, we will always consider the larger of the two pieces in cost calculation.&lt;/dd>
&lt;dd>
&lt;p>$$\mathbb{E}[C(n)] \leq (n-1) + \text{avg}[C(\frac{n}{2}),&amp;hellip;,C(n-1)]$$&lt;/p>
&lt;/dd>
&lt;dd>
&lt;p>Inductively, assume $\mathbb{E}[C(i)] \leq 4i$ for $i &amp;lt; n$ ($0$ comparisons when $n=1$ so the base case holds).&lt;/p>
&lt;/dd>
&lt;dd>$$\begin{align*}\mathbb{E}[C(n)] &amp;amp;\leq (n-1) + \text{avg}[4(\frac{n}{2}),&amp;hellip;,4(n-1)] \newline &amp;amp;\leq (n-1) + 4(\frac{3n}{4}) \newline &amp;amp;\leq 4n\end{align*}$$
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Technically we assumed $n$ is even, but the proof is basically the same in the odd case&lt;/p>
&lt;/div>
&lt;/dd>
&lt;/dl>
&lt;/blockquote>
&lt;p>Thus, QuickSelect has $\mathcal{O}(n)$ time complexity.&lt;/p>
&lt;hr>
&lt;h3 id="deterministicselect">DeterministicSelect&lt;/h3>
&lt;h4 id="algorithm-1">Algorithm&lt;/h4>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Pick a parameter constant $\alpha$. It matters what $\alpha$ is, but for now suppose $\alpha=5$&lt;/p>
&lt;/div>
&lt;blockquote>
&lt;p>$\texttt{ApproxMedian}(A, \alpha=5)$&lt;/p>
&lt;ul>
&lt;li>If $|A| = 1$ then return $A_0$&lt;/li>
&lt;li>Partition $A$ into groups $G_1, G_2, &amp;hellip; G_{\frac{n}{\alpha}}$ each of size $\alpha$&lt;/li>
&lt;li>Let $M = \lbrace \text{median}(G_i) \forall i \rbrace$
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>It doesn&amp;rsquo;t matter how median is calculated here since $\alpha$ is constant implies each calculation has $\mathcal{O}(1)$ time complexity ($\mathcal{O}(n)$ total)&lt;/p>
&lt;/div>
&lt;/li>
&lt;li>return $\texttt{DeterministicSelect}(M, \lceil\frac{|M|}{2}\rceil)$
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>In other words, find the true median of the group medians&lt;/p>
&lt;/div>
&lt;/li>
&lt;/ul>
&lt;p>
&lt;div class="box box-shortcode important" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#important-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>There are some integrality issues (that we will ignore) which complicate the analysis, though the time complexity should be unaffected&lt;/p>
&lt;/div>
$\texttt{DeterministicSelect}(A, k)$&lt;/p>
&lt;ul>
&lt;li>If $|A| \leq \alpha$ then return $k$th smallest value in $A$ by brute force&lt;/li>
&lt;li>Let the pivot $p$ be $\texttt{ApproxMedian}(A)$&lt;/li>
&lt;li>Split $A$ into $L = \lbrace a | \thickspace a \in A \text{ and } a &amp;lt; p \rbrace$ and $G = \lbrace a | \thickspace a \in A \text{ and } a &amp;gt; p \rbrace$&lt;/li>
&lt;li>Recurse
&lt;ul>
&lt;li>If $|L| = k$ then return $p$&lt;/li>
&lt;li>If $|L| &amp;gt; k - 1$ then $\texttt{DeterministicSelect}(L, k)$&lt;/li>
&lt;li>If $|L| &amp;lt; k - 1$ then $\texttt{DeterministicSelect}(G, k - (|L| + 1))$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Notice that the only difference between $\texttt{QuickSelect}$ and $\texttt{DeterministicSelect}$ is how the pivot $p$ is chosen&lt;/p>
&lt;/div>
&lt;hr>
&lt;h4 id="approxmedian-example">ApproxMedian Example&lt;/h4>
&lt;p>$\alpha=3$&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 888 473"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 32,0 L 64,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 L 96,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,0 L 128,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,0 L 160,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,0 L 192,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 L 224,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,0 L 256,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,0 L 288,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 L 320,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,0 L 360,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,0 L 400,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,0 L 440,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 440,0 L 480,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,0 L 520,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 520,0 L 560,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,32 L 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,32 L 96,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,32 L 128,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,32 L 160,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,32 L 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,32 L 224,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,32 L 256,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,32 L 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,32 L 320,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,32 L 360,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,32 L 400,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,32 L 440,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 440,32 L 480,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,32 L 520,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 520,32 L 560,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,64 L 32,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,64 L 64,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,64 L 96,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,64 L 152,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,64 L 184,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,64 L 216,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,64 L 272,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,64 L 304,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,64 L 336,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,64 L 400,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,64 L 440,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 440,64 L 480,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 504,64 L 544,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,64 L 584,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 584,64 L 624,64' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,96 L 32,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,96 L 48,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,96 L 64,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,96 L 96,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,96 L 136,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,96 L 152,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,96 L 184,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,96 L 216,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,96 L 256,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,96 L 272,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,96 L 304,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,96 L 336,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,96 L 400,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,96 L 416,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,96 L 440,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 440,96 L 480,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 504,96 L 544,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,96 L 560,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,96 L 584,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 584,96 L 624,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,128 L 120,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,128 L 256,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,128 L 400,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,144 L 152,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,144 L 240,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,192 L 64,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,192 L 96,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,192 L 128,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,192 L 168,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,192 L 208,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,208 L 544,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,224 L 64,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,224 L 96,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,224 L 128,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,224 L 168,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,224 L 208,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,320 L 184,320' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,320 L 216,320' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,320 L 248,320' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 248,320 L 288,320' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,320 L 328,320' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,352 L 184,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,352 L 216,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,352 L 248,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 248,352 L 288,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,352 L 328,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,64 L 0,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,0 L 32,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,64 L 32,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,192 L 32,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,96 L 48,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 L 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,64 L 64,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,192 L 64,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,144 L 80,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,0 L 96,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,64 L 96,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,192 L 96,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,160 L 112,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,64 L 120,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,0 L 128,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,192 L 128,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,96 L 136,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,64 L 152,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,144 L 152,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,320 L 152,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,0 L 160,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,192 L 168,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,64 L 184,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,320 L 184,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 L 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,192 L 208,224' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,64 L 216,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,320 L 216,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,0 L 224,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,64 L 240,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 248,320 L 248,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,0 L 256,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,96 L 256,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,64 L 272,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 L 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,320 L 288,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,64 L 304,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 320,0 L 320,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,320 L 328,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,64 L 336,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,0 L 360,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,64 L 360,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,0 L 400,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,64 L 400,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,96 L 416,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 440,0 L 440,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 440,64 L 440,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,0 L 480,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,64 L 480,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 504,64 L 504,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 520,0 L 520,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,64 L 544,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,0 L 560,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,96 L 560,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 584,64 L 584,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 624,64 L 624,96' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,176 L 48,184' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='64.000000,176.000000 52.000000,170.399994 52.000000,181.600006' fill='currentColor' transform='rotate(90.000000, 48.000000, 176.000000)'>&lt;/polygon>
&lt;path d='M 80,176 L 80,184' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='96.000000,176.000000 84.000000,170.399994 84.000000,181.600006' fill='currentColor' transform='rotate(90.000000, 80.000000, 176.000000)'>&lt;/polygon>
&lt;path d='M 112,176 L 112,184' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='128.000000,176.000000 116.000000,170.399994 116.000000,181.600006' fill='currentColor' transform='rotate(90.000000, 112.000000, 176.000000)'>&lt;/polygon>
&lt;path d='M 152,176 L 152,184' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='168.000000,176.000000 156.000000,170.399994 156.000000,181.600006' fill='currentColor' transform='rotate(90.000000, 152.000000, 176.000000)'>&lt;/polygon>
&lt;polygon points='224.000000,208.000000 212.000000,202.399994 212.000000,213.600006' fill='currentColor' transform='rotate(180.000000, 216.000000, 208.000000)'>&lt;/polygon>
&lt;path d='M 96,128 A 16,16 0 0,0 80,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 136,112 A 16,16 0 0,1 120,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,128 A 16,16 0 0,0 152,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,112 A 16,16 0 0,1 400,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,144 A 16,16 0 0,0 112,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,128 A 16,16 0 0,1 240,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,192 A 16,16 0 0,1 544,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='0' y='20' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='0' y='212' fill='currentColor' style='font-size:1em'>M&lt;/text>
&lt;text text-anchor='middle' x='0' y='452' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='8' y='452' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='16' y='84' fill='currentColor' style='font-size:1em'>7&lt;/text>
&lt;text text-anchor='middle' x='16' y='212' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='16' y='452' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='24' y='452' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='32' y='452' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='40' y='452' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='48' y='20' fill='currentColor' style='font-size:1em'>7&lt;/text>
&lt;text text-anchor='middle' x='48' y='84' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='48' y='212' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='56' y='452' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='64' y='276' fill='currentColor' style='font-size:1em'>D&lt;/text>
&lt;text text-anchor='middle' x='64' y='340' fill='currentColor' style='font-size:1em'>k&lt;/text>
&lt;text text-anchor='middle' x='64' y='404' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='72' y='276' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='72' y='404' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='80' y='20' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='80' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='80' y='212' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='80' y='276' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='80' y='340' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='80' y='404' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='88' y='276' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='88' y='404' fill='currentColor' style='font-size:1em'>u&lt;/text>
&lt;text text-anchor='middle' x='96' y='276' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='96' y='340' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='96' y='404' fill='currentColor' style='font-size:1em'>r&lt;/text>
&lt;text text-anchor='middle' x='104' y='276' fill='currentColor' style='font-size:1em'>m&lt;/text>
&lt;text text-anchor='middle' x='104' y='340' fill='currentColor' style='font-size:1em'>,&lt;/text>
&lt;text text-anchor='middle' x='104' y='404' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='112' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='112' y='212' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='112' y='276' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='120' y='276' fill='currentColor' style='font-size:1em'>n&lt;/text>
&lt;text text-anchor='middle' x='120' y='340' fill='currentColor' style='font-size:1em'>A&lt;/text>
&lt;text text-anchor='middle' x='120' y='404' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='128' y='276' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='136' y='84' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='136' y='276' fill='currentColor' style='font-size:1em'>s&lt;/text>
&lt;text text-anchor='middle' x='136' y='340' fill='currentColor' style='font-size:1em'>=&lt;/text>
&lt;text text-anchor='middle' x='144' y='20' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='144' y='212' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='144' y='276' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='152' y='212' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='152' y='276' fill='currentColor' style='font-size:1em'>i&lt;/text>
&lt;text text-anchor='middle' x='160' y='276' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='168' y='84' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='168' y='276' fill='currentColor' style='font-size:1em'>S&lt;/text>
&lt;text text-anchor='middle' x='168' y='340' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='176' y='20' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='176' y='276' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='184' y='212' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='184' y='276' fill='currentColor' style='font-size:1em'>l&lt;/text>
&lt;text text-anchor='middle' x='192' y='212' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='192' y='276' fill='currentColor' style='font-size:1em'>e&lt;/text>
&lt;text text-anchor='middle' x='200' y='84' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='200' y='276' fill='currentColor' style='font-size:1em'>c&lt;/text>
&lt;text text-anchor='middle' x='200' y='340' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='208' y='20' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='208' y='276' fill='currentColor' style='font-size:1em'>t&lt;/text>
&lt;text text-anchor='middle' x='232' y='340' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='240' y='20' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='256' y='84' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='264' y='340' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='272' y='20' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='272' y='340' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='288' y='84' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='304' y='20' fill='currentColor' style='font-size:1em'>9&lt;/text>
&lt;text text-anchor='middle' x='304' y='340' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='312' y='340' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='320' y='84' fill='currentColor' style='font-size:1em'>9&lt;/text>
&lt;text text-anchor='middle' x='336' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='344' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='376' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='376' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='384' y='20' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='384' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='416' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='416' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='424' y='20' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='424' y='84' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='456' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='456' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='464' y='20' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='464' y='84' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='496' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='504' y='20' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='520' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='528' y='84' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='536' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='544' y='20' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='560' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='568' y='84' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='600' y='84' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='608' y='84' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;hr>
&lt;h4 id="analysis-1">Analysis&lt;/h4>
&lt;blockquote>
&lt;dl>
&lt;dt>&lt;strong>ApproxMedian Bound Lemma&lt;/strong>&lt;/dt>
&lt;dd>Let $p = \texttt{ApproxMedian}(A)$. Let $n = \lceil\frac{n}{2\alpha}\rceil\lceil\frac{\alpha}{2}\rceil$. At least $n$ elements in $A$ are greater than $p$ and at least $n$ elements in $A$ are less than $p$.&lt;/dd>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>WLOG look at the $\leq$ case. By definition, $p$ is the true median of the group medians, so $\lceil\frac{n}{2\alpha}\rceil$ groups (including the group $p$ is in) have medians $\leq p$.&lt;/dd>
&lt;dd>
&lt;p>For each of those groups, there are $\lceil\frac{\alpha}{2}\rceil$ elements (including that group&amp;rsquo;s median) $\leq$ that group&amp;rsquo;s median and therefore $p$.&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;p>&lt;strong>Visual&lt;/strong>&lt;/p>
&lt;div class="goat svg-container ">
&lt;svg
xmlns="http://www.w3.org/2000/svg"
font-family="Menlo,Lucida Console,monospace"
viewBox="0 0 872 505"
>
&lt;g transform='translate(8,16)'>
&lt;path d='M 0,0 L 32,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,0 L 64,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 L 96,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,0 L 128,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,0 L 160,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,0 L 192,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 L 224,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,0 L 256,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,0 L 288,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 L 328,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,0 L 368,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,0 L 408,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 408,0 L 448,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,0 L 488,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 488,0 L 528,0' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,32 L 32,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,32 L 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,32 L 96,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,32 L 128,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,32 L 160,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,32 L 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,32 L 224,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,32 L 256,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,32 L 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,32 L 328,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,32 L 368,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,32 L 408,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 408,32 L 448,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,32 L 488,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 488,32 L 528,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,80 L 32,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,80 L 64,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,80 L 96,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,80 L 152,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,80 L 184,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,80 L 216,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,80 L 272,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,80 L 304,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,80 L 336,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,80 L 400,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,80 L 440,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 440,80 L 480,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 504,80 L 544,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,80 L 584,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 584,80 L 624,80' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,112 L 32,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,112 L 48,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,112 L 64,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,112 L 96,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,112 L 152,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,112 L 168,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,112 L 184,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,112 L 216,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,112 L 272,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,112 L 288,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,112 L 304,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,112 L 336,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,112 L 400,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,112 L 416,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,112 L 440,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 440,112 L 480,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 504,112 L 544,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,112 L 560,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,112 L 584,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 584,112 L 624,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,144 L 80,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,144 L 288,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,144 L 416,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,144 L 544,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,160 L 96,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,160 L 152,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,160 L 264,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 264,160 L 272,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,160 L 400,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,208 L 32,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,208 L 112,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,208 L 192,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,208 L 280,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,208 L 368,208' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,240 L 32,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,240 L 112,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,240 L 192,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,240 L 280,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,240 L 368,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,272 L 32,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,272 L 112,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,272 L 192,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,272 L 280,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,272 L 368,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,304 L 32,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,304 L 112,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,304 L 192,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,304 L 280,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,304 L 368,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,352 L 32,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,352 L 64,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,352 L 96,352' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,384 L 32,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,384 L 64,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,384 L 96,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,384 L 168,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,384 L 208,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,416 L 32,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,416 L 64,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,416 L 96,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,416 L 168,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,416 L 208,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,448 L 64,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,448 L 96,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,448 L 128,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,448 L 168,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,448 L 208,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,480 L 64,480' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,480 L 96,480' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,480 L 128,480' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,480 L 168,480' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,480 L 208,480' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,0 L 0,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,80 L 0,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,208 L 0,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,240 L 0,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,272 L 0,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,352 L 0,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 0,384 L 0,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,176 L 16,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,0 L 32,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,80 L 32,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,208 L 32,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,240 L 32,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,272 L 32,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,352 L 32,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,384 L 32,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,448 L 32,480' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 48,112 L 48,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,0 L 64,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,80 L 64,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,352 L 64,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,384 L 64,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 64,448 L 64,480' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,208 L 80,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,240 L 80,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,272 L 80,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,0 L 96,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,80 L 96,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,160 L 96,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,352 L 96,384' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,384 L 96,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 96,448 L 96,480' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,208 L 112,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,240 L 112,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 112,272 L 112,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 120,80 L 120,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,0 L 128,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,384 L 128,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,416 L 128,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 128,448 L 128,480' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 152,80 L 152,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,0 L 160,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,208 L 160,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,240 L 160,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 160,272 L 160,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,112 L 168,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,384 L 168,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,416 L 168,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,448 L 168,480' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 176,176 L 176,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 184,80 L 184,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,0 L 192,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,208 L 192,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,240 L 192,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,272 L 192,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,384 L 208,416' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,416 L 208,448' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 208,448 L 208,480' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 216,80 L 216,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 224,0 L 224,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,80 L 240,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,208 L 240,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,240 L 240,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 240,272 L 240,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 256,0 L 256,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 264,160 L 264,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 272,80 L 272,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,208 L 280,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,240 L 280,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,272 L 280,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,0 L 288,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,112 L 288,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 304,80 L 304,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,0 L 328,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,208 L 328,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,240 L 328,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 328,272 L 328,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 336,80 L 336,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 352,176 L 352,192' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 360,80 L 360,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,0 L 368,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,208 L 368,240' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,240 L 368,272' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,272 L 368,304' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 400,80 L 400,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 408,0 L 408,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,112 L 416,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 440,80 L 440,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 448,0 L 448,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 480,80 L 480,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 488,0 L 488,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 504,80 L 504,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 528,0 L 528,32' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 544,80 L 544,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,112 L 560,128' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 584,80 L 584,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 624,80 L 624,112' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 16,192 L 16,200' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='32.000000,192.000000 20.000000,186.399994 20.000000,197.600006' fill='currentColor' transform='rotate(90.000000, 16.000000, 192.000000)'>&lt;/polygon>
&lt;path d='M 96,192 L 96,200' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='112.000000,192.000000 100.000000,186.399994 100.000000,197.600006' fill='currentColor' transform='rotate(90.000000, 96.000000, 192.000000)'>&lt;/polygon>
&lt;path d='M 176,192 L 176,200' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='192.000000,192.000000 180.000000,186.399994 180.000000,197.600006' fill='currentColor' transform='rotate(90.000000, 176.000000, 192.000000)'>&lt;/polygon>
&lt;path d='M 264,192 L 264,200' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='280.000000,192.000000 268.000000,186.399994 268.000000,197.600006' fill='currentColor' transform='rotate(90.000000, 264.000000, 192.000000)'>&lt;/polygon>
&lt;path d='M 352,192 L 352,200' fill='none' stroke='currentColor'>&lt;/path>
&lt;polygon points='368.000000,192.000000 356.000000,186.399994 356.000000,197.600006' fill='currentColor' transform='rotate(90.000000, 352.000000, 192.000000)'>&lt;/polygon>
&lt;path d='M 48,128 A 16,16 0 0,0 64,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 80,144 A 16,16 0 0,1 96,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 280,144 A 16,16 0 0,0 264,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 560,128 A 16,16 0 0,1 544,144' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 32,160 A 16,16 0 0,0 16,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 168,144 A 16,16 0 0,1 152,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 192,160 A 16,16 0 0,0 176,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 288,144 A 16,16 0 0,1 272,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 368,160 A 16,16 0 0,0 352,176' fill='none' stroke='currentColor'>&lt;/path>
&lt;path d='M 416,144 A 16,16 0 0,1 400,160' fill='none' stroke='currentColor'>&lt;/path>
&lt;text text-anchor='middle' x='16' y='20' fill='currentColor' style='font-size:1em'>7&lt;/text>
&lt;text text-anchor='middle' x='16' y='100' fill='currentColor' style='font-size:1em'>7&lt;/text>
&lt;text text-anchor='middle' x='16' y='228' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='16' y='260' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='16' y='292' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='16' y='372' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='16' y='404' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='48' y='20' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='48' y='100' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='48' y='372' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='48' y='404' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='48' y='468' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='80' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='80' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='80' y='372' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='80' y='404' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='80' y='468' fill='currentColor' style='font-size:1em'>7&lt;/text>
&lt;text text-anchor='middle' x='96' y='228' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='96' y='260' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='96' y='292' fill='currentColor' style='font-size:1em'>7&lt;/text>
&lt;text text-anchor='middle' x='112' y='20' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='112' y='468' fill='currentColor' style='font-size:1em'>9&lt;/text>
&lt;text text-anchor='middle' x='136' y='100' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='144' y='20' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='144' y='404' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='144' y='436' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='144' y='468' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='152' y='404' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='152' y='436' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='152' y='468' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='168' y='100' fill='currentColor' style='font-size:1em'>6&lt;/text>
&lt;text text-anchor='middle' x='176' y='20' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='176' y='228' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='176' y='260' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='176' y='292' fill='currentColor' style='font-size:1em'>9&lt;/text>
&lt;text text-anchor='middle' x='184' y='404' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='184' y='436' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='184' y='468' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='192' y='404' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='192' y='436' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='192' y='468' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='200' y='100' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='208' y='20' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='240' y='20' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='256' y='100' fill='currentColor' style='font-size:1em'>8&lt;/text>
&lt;text text-anchor='middle' x='256' y='228' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='256' y='260' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='256' y='292' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='264' y='228' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='264' y='260' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='264' y='292' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='272' y='20' fill='currentColor' style='font-size:1em'>9&lt;/text>
&lt;text text-anchor='middle' x='288' y='100' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='304' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='312' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='320' y='100' fill='currentColor' style='font-size:1em'>9&lt;/text>
&lt;text text-anchor='middle' x='344' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='344' y='228' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='344' y='260' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='344' y='292' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='352' y='20' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='352' y='228' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='352' y='260' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='352' y='292' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='376' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='384' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='384' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='392' y='20' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='416' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='424' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='424' y='100' fill='currentColor' style='font-size:1em'>4&lt;/text>
&lt;text text-anchor='middle' x='432' y='20' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='456' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='464' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='464' y='100' fill='currentColor' style='font-size:1em'>5&lt;/text>
&lt;text text-anchor='middle' x='472' y='20' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='504' y='20' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='512' y='20' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;text text-anchor='middle' x='520' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='528' y='100' fill='currentColor' style='font-size:1em'>0&lt;/text>
&lt;text text-anchor='middle' x='560' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='568' y='100' fill='currentColor' style='font-size:1em'>2&lt;/text>
&lt;text text-anchor='middle' x='600' y='100' fill='currentColor' style='font-size:1em'>1&lt;/text>
&lt;text text-anchor='middle' x='608' y='100' fill='currentColor' style='font-size:1em'>3&lt;/text>
&lt;/g>
&lt;/svg>
&lt;/div>
&lt;div class="box box-shortcode tip" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#tip-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$$\texttt{ApproxMedian}(A)=8$$ $$\begin{align}8 &amp;amp;\geq 5\geq 4 \tag*{medians} \newline 8&amp;amp;\geq 2 \tag*{group 3} \newline 5&amp;amp;\geq 1 \tag*{group 2} \newline 4&amp;amp;\geq 3 \tag*{group 1} \newline 8&amp;amp;\geq i \thickspace \forall i\in\lbrace 3, 4, 1, 5, 2, 8 \rbrace \tag*{$\therefore$} \end{align}$$&lt;/p>
&lt;/div>
&lt;hr>
&lt;dl>
&lt;dt>&lt;strong>Theorem&lt;/strong>&lt;/dt>
&lt;dd>If $\alpha$ is chosen intelligently, $\texttt{DeterministicSelect}$ makes $\mathcal{O}(n)$ comparisons&lt;/dd>
&lt;dt>&lt;strong>Proof&lt;/strong>&lt;/dt>
&lt;dd>Let $C(A, n, k)$ be the worst-case cost to find the $k$th smallest element in an array $A$ of $n$ elements and let $C(n) = \max_{A,k} C(A,n,k)$.&lt;/dd>
&lt;dd>
&lt;ul>
&lt;li>Finding the median of a single group has constant cost (since its size is bounded by $\alpha$). Since there are a linear number of groups, this step has linear time complexity.&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dd>
&lt;ul>
&lt;li>As in $\texttt{QuickSelect}$ it also take linear time to split $A$ into $L$ and $G$.&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dd>
&lt;ul>
&lt;li>The first recursive call to find the true median of medians has time complexity $C(\frac{n}{\alpha})$.
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Since there are that many number of medians&lt;/p>
&lt;/div>
&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dd>&lt;ul>
&lt;li>The second recursive call to search from a sub-piece has time complexity $C(n - \lceil\frac{n}{2\alpha}\rceil\lceil\frac{\alpha}{2}\rceil)$ by the &lt;strong>ApproxMedian Bound Lemma&lt;/strong>.
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>Since in worst case we recurse on the larger sub-piece&lt;/p>
&lt;/div>
&lt;/li>
&lt;/ul>
&lt;/dd>
&lt;dd>
&lt;p>$$C(n) \leq \gamma n + C(\frac{n}{\alpha}) + C(n - \lceil\frac{n}{2\alpha}\rceil\lceil\frac{\alpha}{2}\rceil)$$
&lt;div class="box box-shortcode info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>$\gamma$ is a constant where its subexpression represents linear time complexity from the first two bullet points&lt;/p>
&lt;/div>
&lt;/p>
&lt;/dd>
&lt;dd>Using $\alpha=5$&lt;/dd>
&lt;dd>$$\begin{align*}C(n)&amp;amp;\leq \gamma n + C(\frac{n}{5}) + C(n - 3\lceil\frac{n}{10}\rceil)\newline&amp;amp;\leq \gamma n + C(\frac{n}{5}) + C(\frac{7n}{10})\newline&amp;amp;\leq \gamma n[1 + (\frac{1}{5} + \frac{7}{10}) + (\frac{1}{5}(\frac{1}{5} + \frac{7}{10}) + \frac{7}{10}(\frac{1}{5} + \frac{7}{10})) + &amp;hellip; ] \newline &amp;amp;\leq \gamma n[1 + (\frac{9}{10}) + (\frac{1}{5}\cdot\frac{9}{10} + \frac{7}{10}\cdot\frac{9}{10}) + &amp;hellip;] \newline &amp;amp;\leq \gamma n[1 + (\frac{9}{10}) + (\frac{9}{10})^2 + (\frac{9}{10})^3 + &amp;hellip;] \newline &amp;amp;\leq 10\gamma n \newline &amp;amp;\in \mathcal{O}(n)\end{align*}$$&lt;/dd>
&lt;dt>&lt;strong>Corollary&lt;/strong>&lt;/dt>
&lt;dd>$\texttt{DeterministicSelect}$ has linear time complexity if $$\begin{align*}\frac{1}{\alpha} + 1 - \frac{1}{2\alpha}\lceil\frac{\alpha}{2}\rceil &amp;amp;&amp;lt; 1\newline\frac{1}{\alpha} - \frac{1}{2\alpha}\lceil\frac{\alpha}{2}\rceil &amp;amp;&amp;lt; 0\end{align*}$$&lt;/dd>
&lt;/dl>
&lt;/blockquote></description></item><item><title>Archives</title><link>https://kiblitz.github.io/archives/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/archives/</guid><description/></item><item><title>Links</title><link>https://kiblitz.github.io/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/links/</guid><description>&lt;p>A curated collection of useful/interesting pages.&lt;/p></description></item><item><title>Search</title><link>https://kiblitz.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kiblitz.github.io/search/</guid><description/></item></channel></rss>